
hs2-gpr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005274  08005274  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800527c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000088  08005304  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005304  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2f4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5d  00000000  00000000  0002b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022087  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a017  00000000  00000000  0004ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c66fe  00000000  00000000  0005a016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  00120768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800519c 	.word	0x0800519c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800519c 	.word	0x0800519c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	0000      	movs	r0, r0
	...

08000da8 <AD9910_Init>:
#include <stdio.h>
#include <math.h>

static uint8_t nbytes[] = {4,4,4,4,4,4,4,2,4,4,8,8,4,8,8,8,8,8,8,8,8,4}; //register lengths in bytes

state AD9910_Init(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET); //deselect SPI
 8000dae:	2201      	movs	r2, #1
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	482d      	ldr	r0, [pc, #180]	; (8000e68 <AD9910_Init+0xc0>)
 8000db4:	f001 fa24 	bl	8002200 <HAL_GPIO_WritePin>

	state rs = PASS;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_Reset(); //reset the AD9910
 8000dbc:	f000 f9b8 	bl	8001130 <AD9910_Reset>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR1, (SDIO_INPUT_ONLY));
 8000dca:	f04f 0202 	mov.w	r2, #2
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f9c0 	bl	8001158 <AD9910_WriteReg>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000de2:	f000 fa7f 	bl	80012e4 <AD9910_IO_Update>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR2, (SYNC_TIM_V_DIS | A_FROM_STP));
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <AD9910_Init+0xc4>)
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 f9ae 	bl	8001158 <AD9910_WriteReg>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000e06:	f000 fa6d 	bl	80012e4 <AD9910_IO_Update>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR3, (VCO5 | CP_387 | INP_DIV_RST | PLL_EN | (PLL_MULT << 1))); //refclk off
 8000e14:	a312      	add	r3, pc, #72	; (adr r3, 8000e60 <AD9910_Init+0xb8>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f000 f99c 	bl	8001158 <AD9910_WriteReg>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000e2a:	f000 fa5b 	bl	80012e4 <AD9910_IO_Update>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_SetProfile(PF0); //set profile
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 fa6b 	bl	8001314 <AD9910_SetProfile>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AD9910_TXE_GPIO_Port, AD9910_TXE_Pin, GPIO_PIN_SET);  //enable TX
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <AD9910_Init+0xc8>)
 8000e4e:	f001 f9d7 	bl	8002200 <HAL_GPIO_WritePin>

	return rs;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f3af 8000 	nop.w
 8000e60:	05384150 	.word	0x05384150
 8000e64:	00000000 	.word	0x00000000
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	01000020 	.word	0x01000020
 8000e70:	40020c00 	.word	0x40020c00

08000e74 <AD9910_ConfigureRamp>:

state AD9910_ConfigureRamp(float lower, float upper, float ramptime){
 8000e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e78:	b08a      	sub	sp, #40	; 0x28
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e80:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e84:	ed87 1a01 	vstr	s2, [r7, #4]
	state rs = PASS;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_GPIO_WritePin(AD9910_DRCTL_GPIO_Port, AD9910_DRCTL_Pin, GPIO_PIN_RESET); //don't ramp
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2120      	movs	r1, #32
 8000e92:	4863      	ldr	r0, [pc, #396]	; (8001020 <AD9910_ConfigureRamp+0x1ac>)
 8000e94:	f001 f9b4 	bl	8002200 <HAL_GPIO_WritePin>
	uint32_t upper_ftw = FREQ_TO_FTW(upper);
 8000e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e9c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001024 <AD9910_ConfigureRamp+0x1b0>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001028 <AD9910_ConfigureRamp+0x1b4>
 8000ea8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000eac:	eeb0 0a47 	vmov.f32	s0, s14
 8000eb0:	f004 f948 	bl	8005144 <lroundf>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	61fb      	str	r3, [r7, #28]
	uint32_t lower_ftw = FREQ_TO_FTW(lower);
 8000eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001024 <AD9910_ConfigureRamp+0x1b0>
 8000ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec4:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001028 <AD9910_ConfigureRamp+0x1b4>
 8000ec8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed0:	f004 f938 	bl	8005144 <lroundf>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]
	uint32_t upstep_ftw = ((upper_ftw - lower_ftw) / ramptime) * (4.0f / FSYSCLK);
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ee6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eee:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800102c <AD9910_ConfigureRamp+0x1b8>
 8000ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efa:	ee17 3a90 	vmov	r3, s15
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t p = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	847b      	strh	r3, [r7, #34]	; 0x22
	if(upstep_ftw < 1) {  //if we're stepping so fast that the steps need to be smaller
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d115      	bne.n	8000f36 <AD9910_ConfigureRamp+0xc2>
		upstep_ftw = 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
		p = FSYSCLK/4 * ramptime / (upper_ftw - lower_ftw);
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001030 <AD9910_ConfigureRamp+0x1bc>
 8000f16:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f30:	ee17 3a90 	vmov	r3, s15
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	rs |= AD9910_WriteReg(DR_LIMIT, (uint64_t) upper_ftw << 32 | lower_ftw);
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f04f 0100 	mov.w	r1, #0
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	0003      	movs	r3, r0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	f04f 0100 	mov.w	r1, #0
 8000f52:	ea42 0800 	orr.w	r8, r2, r0
 8000f56:	ea43 0901 	orr.w	r9, r3, r1
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	200b      	movs	r0, #11
 8000f60:	f000 f8fa 	bl	8001158 <AD9910_WriteReg>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	rs |= AD9910_WriteReg(DR_STEP_SIZE, (uint64_t) upstep_ftw << 32 | upstep_ftw);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f04f 0100 	mov.w	r1, #0
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	0003      	movs	r3, r0
 8000f84:	2200      	movs	r2, #0
 8000f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f88:	4608      	mov	r0, r1
 8000f8a:	f04f 0100 	mov.w	r1, #0
 8000f8e:	ea42 0400 	orr.w	r4, r2, r0
 8000f92:	ea43 0501 	orr.w	r5, r3, r1
 8000f96:	4622      	mov	r2, r4
 8000f98:	462b      	mov	r3, r5
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f000 f8dc 	bl	8001158 <AD9910_WriteReg>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	rs |= AD9910_WriteReg(DR_RATE, (uint32_t) p << 16 | p);
 8000fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	200d      	movs	r0, #13
 8000fbe:	f000 f8cb 	bl	8001158 <AD9910_WriteReg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	AD9910_IO_Update();
 8000fd0:	f000 f988 	bl	80012e4 <AD9910_IO_Update>

	//Turn on DRG, set destination to frequency, no dwell high
	uint32_t cfr2 = AD9910_ReadReg32(CFR2);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 f941 	bl	800125c <AD9910_ReadReg32>
 8000fda:	6178      	str	r0, [r7, #20]
	rs |= AD9910_WriteReg(CFR2, ((cfr2 & ~(0b11 << 20)) | DR_ENABLE));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8000fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 f8b3 	bl	8001158 <AD9910_WriteReg>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	rs |= AD9910_IO_Update();
 8001000:	f000 f970 	bl	80012e4 <AD9910_IO_Update>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800100c:	4313      	orrs	r3, r2
 800100e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	return rs;
 8001012:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
}
 8001016:	4618      	mov	r0, r3
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001020:	40020400 	.word	0x40020400
 8001024:	4f800000 	.word	0x4f800000
 8001028:	4e6e6b28 	.word	0x4e6e6b28
 800102c:	3189705f 	.word	0x3189705f
 8001030:	4d6e6b28 	.word	0x4d6e6b28
 8001034:	00000000 	.word	0x00000000

08001038 <AD9910_SingleTone>:
	HAL_GPIO_WritePin(AD9910_DRCTL_GPIO_Port, AD9910_DRCTL_Pin, GPIO_PIN_RESET); //don't ramp

	return rs;
}

state AD9910_SingleTone(uint8_t profile, float frequency, float amplitude){
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	ed87 0a02 	vstr	s0, [r7, #8]
 8001044:	edc7 0a01 	vstr	s1, [r7, #4]
 8001048:	73fb      	strb	r3, [r7, #15]
	//TODO, check bounds for frequency and amplitude
	state rs = PASS;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
	uint16_t asf = AMP_TO_ASF(amplitude); //compute the amplitude scale factor
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001120 <AD9910_SingleTone+0xe8>
 8001056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105a:	ee17 0a90 	vmov	r0, s15
 800105e:	f7ff fa6b 	bl	8000538 <__aeabi_f2d>
 8001062:	a32d      	add	r3, pc, #180	; (adr r3, 8001118 <AD9910_SingleTone+0xe0>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fbe8 	bl	800083c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fcca 	bl	8000a0c <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	ee00 3a10 	vmov	s0, r3
 800107e:	f004 f861 	bl	8005144 <lroundf>
 8001082:	4603      	mov	r3, r0
 8001084:	82bb      	strh	r3, [r7, #20]
	uint32_t ftw = FREQ_TO_FTW(frequency);                             //compute the frequency tuning word
 8001086:	edd7 7a02 	vldr	s15, [r7, #8]
 800108a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001124 <AD9910_SingleTone+0xec>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001128 <AD9910_SingleTone+0xf0>
 8001096:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	f004 f851 	bl	8005144 <lroundf>
 80010a2:	4603      	mov	r3, r0
 80010a4:	613b      	str	r3, [r7, #16]

	rs |= AD9910_WriteReg(0x0E + profile, (((uint64_t) asf << 48) | (ftw))); //load those parameters into the profile
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	330e      	adds	r3, #14
 80010aa:	b2de      	uxtb	r6, r3
 80010ac:	8ab8      	ldrh	r0, [r7, #20]
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	0403      	lsls	r3, r0, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	4608      	mov	r0, r1
 80010c2:	f04f 0100 	mov.w	r1, #0
 80010c6:	ea42 0400 	orr.w	r4, r2, r0
 80010ca:	ea43 0501 	orr.w	r5, r3, r1
 80010ce:	4622      	mov	r2, r4
 80010d0:	462b      	mov	r3, r5
 80010d2:	4630      	mov	r0, r6
 80010d4:	f000 f840 	bl	8001158 <AD9910_WriteReg>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	4313      	orrs	r3, r2
 80010e0:	75fb      	strb	r3, [r7, #23]
	rs |= AD9910_IO_Update();
 80010e2:	f000 f8ff 	bl	80012e4 <AD9910_IO_Update>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(AD9910_TXE_GPIO_Port, AD9910_TXE_Pin, GPIO_PIN_SET);  //enable TX
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <AD9910_SingleTone+0xf4>)
 80010f6:	f001 f883 	bl	8002200 <HAL_GPIO_WritePin>

	rs |= AD9910_SetProfile(profile); //set profile
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f909 	bl	8001314 <AD9910_SetProfile>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	4313      	orrs	r3, r2
 800110a:	75fb      	strb	r3, [r7, #23]

	return rs;
 800110c:	7dfb      	ldrb	r3, [r7, #23]
}
 800110e:	4618      	mov	r0, r3
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001116:	bf00      	nop
 8001118:	04189375 	.word	0x04189375
 800111c:	3ff00e56 	.word	0x3ff00e56
 8001120:	46800000 	.word	0x46800000
 8001124:	4f800000 	.word	0x4f800000
 8001128:	4e6e6b28 	.word	0x4e6e6b28
 800112c:	40020c00 	.word	0x40020c00

08001130 <AD9910_Reset>:

state AD9910_Reset(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9910_RST_GPIO_Port, AD9910_RST_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <AD9910_Reset+0x24>)
 800113a:	f001 f861 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f000 fdb8 	bl	8001cb4 <HAL_Delay>
	HAL_GPIO_WritePin(AD9910_RST_GPIO_Port, AD9910_RST_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <AD9910_Reset+0x24>)
 800114a:	f001 f859 	bl	8002200 <HAL_GPIO_WritePin>
	return PASS;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020800 	.word	0x40020800

08001158 <AD9910_WriteReg>:

state AD9910_WriteReg(uint8_t reg, uint64_t value){
 8001158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af00      	add	r7, sp, #0
 8001160:	4601      	mov	r1, r0
 8001162:	e9c7 2300 	strd	r2, r3, [r7]
 8001166:	460b      	mov	r3, r1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	466b      	mov	r3, sp
 800116c:	4698      	mov	r8, r3
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2140      	movs	r1, #64	; 0x40
 8001172:	4837      	ldr	r0, [pc, #220]	; (8001250 <AD9910_WriteReg+0xf8>)
 8001174:	f001 f844 	bl	8002200 <HAL_GPIO_WritePin>
	uint8_t payloadsize = nbytes[reg];
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4a36      	ldr	r2, [pc, #216]	; (8001254 <AD9910_WriteReg+0xfc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	76fb      	strb	r3, [r7, #27]
	uint8_t packet[payloadsize + 1];
 8001180:	7efb      	ldrb	r3, [r7, #27]
 8001182:	1c5e      	adds	r6, r3, #1
 8001184:	1e73      	subs	r3, r6, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	4633      	mov	r3, r6
 800118a:	4618      	mov	r0, r3
 800118c:	f04f 0100 	mov.w	r1, #0
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	00cb      	lsls	r3, r1, #3
 800119a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800119e:	00c2      	lsls	r2, r0, #3
 80011a0:	4633      	mov	r3, r6
 80011a2:	4618      	mov	r0, r3
 80011a4:	f04f 0100 	mov.w	r1, #0
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	00cb      	lsls	r3, r1, #3
 80011b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011b6:	00c2      	lsls	r2, r0, #3
 80011b8:	4633      	mov	r3, r6
 80011ba:	3307      	adds	r3, #7
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	ebad 0d03 	sub.w	sp, sp, r3
 80011c4:	466b      	mov	r3, sp
 80011c6:	3300      	adds	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
	packet[0] = reg;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < payloadsize; i++){ 				//fill the packet
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	e01c      	b.n	8001210 <AD9910_WriteReg+0xb8>
		packet[i+1] = ((value >> ((payloadsize - 1 - i) * 8)) & 0xFF);
 80011d6:	7efb      	ldrb	r3, [r7, #27]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	00d9      	lsls	r1, r3, #3
 80011e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e4:	f1c1 0620 	rsb	r6, r1, #32
 80011e8:	f1a1 0020 	sub.w	r0, r1, #32
 80011ec:	fa22 f401 	lsr.w	r4, r2, r1
 80011f0:	fa03 f606 	lsl.w	r6, r3, r6
 80011f4:	4334      	orrs	r4, r6
 80011f6:	fa23 f000 	lsr.w	r0, r3, r0
 80011fa:	4304      	orrs	r4, r0
 80011fc:	fa23 f501 	lsr.w	r5, r3, r1
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3301      	adds	r3, #1
 8001204:	b2e1      	uxtb	r1, r4
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < payloadsize; i++){ 				//fill the packet
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	7efb      	ldrb	r3, [r7, #27]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbde      	blt.n	80011d6 <AD9910_WriteReg+0x7e>
	}

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <AD9910_WriteReg+0xf8>)
 800121e:	f000 ffef 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, packet, payloadsize + 1, HAL_MAX_DELAY);
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	7efb      	ldrb	r3, [r7, #27]
 8001226:	b29b      	uxth	r3, r3
 8001228:	3301      	adds	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <AD9910_WriteReg+0x100>)
 8001232:	f001 fccf 	bl	8002bd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <AD9910_WriteReg+0xf8>)
 800123c:	f000 ffe0 	bl	8002200 <HAL_GPIO_WritePin>

	return PASS; //TODO - read the contents of the register out again to check for pass/fail
 8001240:	2300      	movs	r3, #0
 8001242:	46c5      	mov	sp, r8
}
 8001244:	4618      	mov	r0, r3
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800124e:	bf00      	nop
 8001250:	40020800 	.word	0x40020800
 8001254:	20000000 	.word	0x20000000
 8001258:	200000b0 	.word	0x200000b0

0800125c <AD9910_ReadReg32>:
			(uint64_t) res[5] << 16 |
			(uint64_t) res[6] << 8 |
			(uint64_t) res[7]);
}

uint32_t AD9910_ReadReg32(uint8_t reg){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2140      	movs	r1, #64	; 0x40
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <AD9910_ReadReg32+0x7c>)
 800126c:	f000 ffc8 	bl	8002200 <HAL_GPIO_WritePin>

	if(nbytes[reg] != 4) return FAIL;
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <AD9910_ReadReg32+0x80>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d001      	beq.n	800127e <AD9910_ReadReg32+0x22>
 800127a:	2301      	movs	r3, #1
 800127c:	e028      	b.n	80012d0 <AD9910_ReadReg32+0x74>
	uint8_t res[4];
	uint8_t readreg = reg | 0x80;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <AD9910_ReadReg32+0x7c>)
 800128e:	f000 ffb7 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &readreg, 1, HAL_MAX_DELAY);
 8001292:	f107 010b 	add.w	r1, r7, #11
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	2201      	movs	r2, #1
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <AD9910_ReadReg32+0x84>)
 800129e:	f001 fc99 	bl	8002bd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, res, 4, HAL_MAX_DELAY);
 80012a2:	f107 010c 	add.w	r1, r7, #12
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2204      	movs	r2, #4
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <AD9910_ReadReg32+0x84>)
 80012ae:	f001 fdc5 	bl	8002e3c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <AD9910_ReadReg32+0x7c>)
 80012b8:	f000 ffa2 	bl	8002200 <HAL_GPIO_WritePin>

	return ((uint64_t) res[0] << 24 |
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	061a      	lsls	r2, r3, #24
			(uint64_t) res[1] << 16 |
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	041b      	lsls	r3, r3, #16
	return ((uint64_t) res[0] << 24 |
 80012c4:	431a      	orrs	r2, r3
			(uint64_t) res[2] << 8 |
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	021b      	lsls	r3, r3, #8
			(uint64_t) res[1] << 16 |
 80012ca:	4313      	orrs	r3, r2
			(uint64_t) res[3]);
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
			(uint64_t) res[2] << 8 |
 80012ce:	4313      	orrs	r3, r2
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020800 	.word	0x40020800
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200000b0 	.word	0x200000b0

080012e4 <AD9910_IO_Update>:

	return ((uint64_t) res[0] << 8 |
			(uint64_t) res[1]);
}

state AD9910_IO_Update(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9910_IO_UPDATE_GPIO_Port, AD9910_IO_UPDATE_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2104      	movs	r1, #4
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <AD9910_IO_Update+0x2c>)
 80012ee:	f000 ff87 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fcde 	bl	8001cb4 <HAL_Delay>
	HAL_GPIO_WritePin(AD9910_IO_UPDATE_GPIO_Port, AD9910_IO_UPDATE_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2104      	movs	r1, #4
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <AD9910_IO_Update+0x2c>)
 80012fe:	f000 ff7f 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f000 fcd6 	bl	8001cb4 <HAL_Delay>
	return PASS;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020c00 	.word	0x40020c00

08001314 <AD9910_SetProfile>:

state AD9910_SetProfile(uint8_t pf){												//TODO: should this be synchronous?
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AD9910_PF0_GPIO_Port, AD9910_PF0_Pin, pf & 0x01);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	480f      	ldr	r0, [pc, #60]	; (800136c <AD9910_SetProfile+0x58>)
 800132e:	f000 ff67 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9910_PF1_GPIO_Port, AD9910_PF1_Pin, (pf >> 1) & 0x01);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <AD9910_SetProfile+0x58>)
 8001346:	f000 ff5b 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9910_PF2_GPIO_Port, AD9910_PF2_Pin, (pf >> 2) & 0x01);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <AD9910_SetProfile+0x5c>)
 800135e:	f000 ff4f 	bl	8002200 <HAL_GPIO_WritePin>
	return PASS;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020000 	.word	0x40020000
 8001370:	40020800 	.word	0x40020800

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fc2a 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f82e 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 f8f6 	bl	8001570 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001384:	f000 f894 	bl	80014b0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001388:	f000 f8c8 	bl	800151c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); //set up debug printf
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <main+0x58>)
 800138e:	f000 f9dd 	bl	800174c <RetargetInit>
  AD9910_Init();
 8001392:	f7ff fd09 	bl	8000da8 <AD9910_Init>

  //Create a single tone
  AD9910_SingleTone(PF0, 10E6, 0.5);
 8001396:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800139a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80013d0 <main+0x5c>
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fe4a 	bl	8001038 <AD9910_SingleTone>
  HAL_Delay(10);
 80013a4:	200a      	movs	r0, #10
 80013a6:	f000 fc85 	bl	8001cb4 <HAL_Delay>
  AD9910_ConfigureRamp(10E6, 20E6, 2);
 80013aa:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80013ae:	eddf 0a09 	vldr	s1, [pc, #36]	; 80013d4 <main+0x60>
 80013b2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80013d0 <main+0x5c>
 80013b6:	f7ff fd5d 	bl	8000e74 <AD9910_ConfigureRamp>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f000 fc79 	bl	8001cb4 <HAL_Delay>
	  printf("Hi!\n\r");
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <main+0x64>)
 80013c4:	f002 fe9a 	bl	80040fc <iprintf>
	  HAL_Delay(1000);
 80013c8:	e7f7      	b.n	80013ba <main+0x46>
 80013ca:	bf00      	nop
 80013cc:	20000208 	.word	0x20000208
 80013d0:	4b189680 	.word	0x4b189680
 80013d4:	4b989680 	.word	0x4b989680
 80013d8:	080051b4 	.word	0x080051b4

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fe7e 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <SystemClock_Config+0xcc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <SystemClock_Config+0xcc>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <SystemClock_Config+0xcc>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <SystemClock_Config+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <SystemClock_Config+0xd0>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <SystemClock_Config+0xd0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800144c:	2308      	movs	r3, #8
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001450:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800145a:	2307      	movs	r3, #7
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fee6 	bl	8002234 <HAL_RCC_OscConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800146e:	f000 f965 	bl	800173c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2105      	movs	r1, #5
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f93f 	bl	8002714 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800149c:	f000 f94e 	bl	800173c <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	; 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_SPI2_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_SPI2_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI2_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI2_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI2_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI2_Init+0x64>)
 80014e4:	2230      	movs	r2, #48	; 0x30
 80014e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_SPI2_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI2_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_SPI2_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI2_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_SPI2_Init+0x64>)
 8001502:	f001 fb03 	bl	8002b0c <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 f916 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000b0 	.word	0x200000b0
 8001518:	40003800 	.word	0x40003800

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f002 f82e 	bl	80035b4 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f8ed 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000208 	.word	0x20000208
 800156c:	40004400 	.word	0x40004400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b66      	ldr	r3, [pc, #408]	; (8001724 <MX_GPIO_Init+0x1b4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a65      	ldr	r2, [pc, #404]	; (8001724 <MX_GPIO_Init+0x1b4>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <MX_GPIO_Init+0x1b4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a57      	ldr	r2, [pc, #348]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b55      	ldr	r3, [pc, #340]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a50      	ldr	r2, [pc, #320]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <MX_GPIO_Init+0x1b4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a49      	ldr	r2, [pc, #292]	; (8001724 <MX_GPIO_Init+0x1b4>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <MX_GPIO_Init+0x1b4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|AD9910_OSK_Pin
 8001612:	2200      	movs	r2, #0
 8001614:	f247 0155 	movw	r1, #28757	; 0x7055
 8001618:	4843      	ldr	r0, [pc, #268]	; (8001728 <MX_GPIO_Init+0x1b8>)
 800161a:	f000 fdf1 	bl	8002200 <HAL_GPIO_WritePin>
                          |AD9910_IO_UPDATE_Pin|AD9910_TXE_Pin|AD9910_F0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD9910_CS_Pin|AD9910_RST_Pin|AD9910_IO_RST_Pin|AD9910_PWRDN_Pin
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 8001624:	4841      	ldr	r0, [pc, #260]	; (800172c <MX_GPIO_Init+0x1bc>)
 8001626:	f000 fdeb 	bl	8002200 <HAL_GPIO_WritePin>
                          |AD9910_PF2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9910_PF0_Pin|AD9910_PF1_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 8001630:	483f      	ldr	r0, [pc, #252]	; (8001730 <MX_GPIO_Init+0x1c0>)
 8001632:	f000 fde5 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AD9910_F1_Pin|AD9910_DRCTL_Pin|AD9910_DRHOLD_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	21a8      	movs	r1, #168	; 0xa8
 800163a:	483e      	ldr	r0, [pc, #248]	; (8001734 <MX_GPIO_Init+0x1c4>)
 800163c:	f000 fde0 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001640:	2301      	movs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <MX_GPIO_Init+0x1c8>)
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4837      	ldr	r0, [pc, #220]	; (8001730 <MX_GPIO_Init+0x1c0>)
 8001654:	f000 fc38 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin AD9910_OSK_Pin
                           AD9910_IO_UPDATE_Pin AD9910_TXE_Pin AD9910_F0_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|AD9910_OSK_Pin
 8001658:	f247 0355 	movw	r3, #28757	; 0x7055
 800165c:	617b      	str	r3, [r7, #20]
                          |AD9910_IO_UPDATE_Pin|AD9910_TXE_Pin|AD9910_F0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <MX_GPIO_Init+0x1b8>)
 8001672:	f000 fc29 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_CS_Pin AD9910_RST_Pin AD9910_IO_RST_Pin AD9910_PWRDN_Pin
                           AD9910_PF2_Pin */
  GPIO_InitStruct.Pin = AD9910_CS_Pin|AD9910_RST_Pin|AD9910_IO_RST_Pin|AD9910_PWRDN_Pin
 8001676:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800167a:	617b      	str	r3, [r7, #20]
                          |AD9910_PF2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4827      	ldr	r0, [pc, #156]	; (800172c <MX_GPIO_Init+0x1bc>)
 8001690:	f000 fc1a 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_ERR_Pin AD9910_RSOVER_Pin */
  GPIO_InitStruct.Pin = SYNC_ERR_Pin|AD9910_RSOVER_Pin;
 8001694:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <MX_GPIO_Init+0x1c0>)
 80016aa:	f000 fc0d 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_PF0_Pin AD9910_PF1_Pin */
  GPIO_InitStruct.Pin = AD9910_PF0_Pin|AD9910_PF1_Pin;
 80016ae:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <MX_GPIO_Init+0x1c0>)
 80016c8:	f000 fbfe 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_DROVER_Pin AD9910_PDCLK_Pin */
  GPIO_InitStruct.Pin = AD9910_DROVER_Pin|AD9910_PDCLK_Pin;
 80016cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4812      	ldr	r0, [pc, #72]	; (800172c <MX_GPIO_Init+0x1bc>)
 80016e2:	f000 fbf1 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_PLLLOCK_Pin AD9910_SYNC_CLK_Pin */
  GPIO_InitStruct.Pin = AD9910_PLLLOCK_Pin|AD9910_SYNC_CLK_Pin;
 80016e6:	230a      	movs	r3, #10
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <MX_GPIO_Init+0x1b8>)
 80016fa:	f000 fbe5 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_F1_Pin AD9910_DRCTL_Pin AD9910_DRHOLD_Pin */
  GPIO_InitStruct.Pin = AD9910_F1_Pin|AD9910_DRCTL_Pin|AD9910_DRHOLD_Pin;
 80016fe:	23a8      	movs	r3, #168	; 0xa8
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_GPIO_Init+0x1c4>)
 8001716:	f000 fbd7 	bl	8001ec8 <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020c00 	.word	0x40020c00
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	10120000 	.word	0x10120000

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <RetargetInit+0x28>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <RetargetInit+0x2c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	2300      	movs	r3, #0
 8001762:	2202      	movs	r2, #2
 8001764:	2100      	movs	r1, #0
 8001766:	f002 fce1 	bl	800412c <setvbuf>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000248 	.word	0x20000248
 8001778:	20000024 	.word	0x20000024

0800177c <_isatty>:

int _isatty(int fd) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db04      	blt.n	8001794 <_isatty+0x18>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b02      	cmp	r3, #2
 800178e:	dc01      	bgt.n	8001794 <_isatty+0x18>
    return 1;
 8001790:	2301      	movs	r3, #1
 8001792:	e005      	b.n	80017a0 <_isatty+0x24>

  errno = EBADF;
 8001794:	f002 fc80 	bl	8004098 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	2209      	movs	r2, #9
 800179c:	601a      	str	r2, [r3, #0]
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_write>:

int _write(int fd, char* ptr, int len) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d002      	beq.n	80017c0 <_write+0x18>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d111      	bne.n	80017e4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <_write+0x54>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	f001 ff3e 	bl	800364e <HAL_UART_Transmit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <_write+0x38>
      return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	e008      	b.n	80017f2 <_write+0x4a>
    else
      return EIO;
 80017e0:	2305      	movs	r3, #5
 80017e2:	e006      	b.n	80017f2 <_write+0x4a>
  }
  errno = EBADF;
 80017e4:	f002 fc58 	bl	8004098 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2209      	movs	r2, #9
 80017ec:	601a      	str	r2, [r3, #0]
  return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000248 	.word	0x20000248

08001800 <_close>:

int _close(int fd) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db04      	blt.n	8001818 <_close+0x18>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	dc01      	bgt.n	8001818 <_close+0x18>
    return 0;
 8001814:	2300      	movs	r3, #0
 8001816:	e006      	b.n	8001826 <_close+0x26>

  errno = EBADF;
 8001818:	f002 fc3e 	bl	8004098 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	2209      	movs	r2, #9
 8001820:	601a      	str	r2, [r3, #0]
  return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800183a:	f002 fc2d 	bl	8004098 <__errno>
 800183e:	4603      	mov	r3, r0
 8001840:	2209      	movs	r2, #9
 8001842:	601a      	str	r2, [r3, #0]
  return -1;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_read>:

int _read(int fd, char* ptr, int len) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d110      	bne.n	8001884 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <_read+0x4c>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	2201      	movs	r2, #1
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	f001 ff87 	bl	8003780 <HAL_UART_Receive>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <_read+0x30>
      return 1;
 800187c:	2301      	movs	r3, #1
 800187e:	e008      	b.n	8001892 <_read+0x42>
    else
      return EIO;
 8001880:	2305      	movs	r3, #5
 8001882:	e006      	b.n	8001892 <_read+0x42>
  }
  errno = EBADF;
 8001884:	f002 fc08 	bl	8004098 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	2209      	movs	r2, #9
 800188c:	601a      	str	r2, [r3, #0]
  return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000248 	.word	0x20000248

080018a0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db08      	blt.n	80018c2 <_fstat+0x22>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	dc05      	bgt.n	80018c2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018bc:	605a      	str	r2, [r3, #4]
    return 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	e005      	b.n	80018ce <_fstat+0x2e>
  }

  errno = EBADF;
 80018c2:	f002 fbe9 	bl	8004098 <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2209      	movs	r2, #9
 80018ca:	601a      	str	r2, [r3, #0]
  return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001916:	2007      	movs	r0, #7
 8001918:	f000 faa2 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_SPI_MspInit+0xc0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d14a      	bne.n	80019e0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800199e:	230c      	movs	r3, #12
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <HAL_SPI_MspInit+0xc8>)
 80019ba:	f000 fa85 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d0:	2305      	movs	r3, #5
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <HAL_SPI_MspInit+0xcc>)
 80019dc:	f000 fa74 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40003800 	.word	0x40003800
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_UART_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a52:	230c      	movs	r3, #12
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a62:	2307      	movs	r3, #7
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a6e:	f000 fa2b 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40004400 	.word	0x40004400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f8ca 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f002 fac0 	bl	8004098 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20020000 	.word	0x20020000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	200000a4 	.word	0x200000a4
 8001b4c:	20000260 	.word	0x20000260

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <SystemInit+0x28>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <SystemInit+0x28>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SystemInit+0x28>)
 8001b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b82:	e003      	b.n	8001b8c <LoopCopyDataInit>

08001b84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b8a:	3104      	adds	r1, #4

08001b8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b94:	d3f6      	bcc.n	8001b84 <CopyDataInit>
  ldr  r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b98:	e002      	b.n	8001ba0 <LoopFillZerobss>

08001b9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b9c:	f842 3b04 	str.w	r3, [r2], #4

08001ba0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ba4:	d3f9      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ba6:	f7ff ffd3 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f002 fa7b 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff fbe1 	bl	8001374 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bb8:	0800527c 	.word	0x0800527c
  ldr  r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc0:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001bc4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001bc8:	20000260 	.word	0x20000260

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_Init+0x40>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_Init+0x40>)
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x40>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f931 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fe68 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f93b 	bl	8001eae <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f911 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000018 	.word	0x20000018
 8001c6c:	20000020 	.word	0x20000020
 8001c70:	2000001c 	.word	0x2000001c

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000020 	.word	0x20000020
 8001c98:	2000024c 	.word	0x2000024c

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000024c 	.word	0x2000024c

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000020 	.word	0x20000020

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff47 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff5c 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffb0 	bl	8001e1c <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e16b      	b.n	80021bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 815a 	bne.w	80021b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d00b      	beq.n	8001f22 <HAL_GPIO_Init+0x5a>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f16:	2b11      	cmp	r3, #17
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b12      	cmp	r3, #18
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0xfc>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b12      	cmp	r3, #18
 8001fc2:	d123      	bne.n	800200c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80b4 	beq.w	80021b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b60      	ldr	r3, [pc, #384]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_GPIO_Init+0x310>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x314>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <HAL_GPIO_Init+0x318>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d025      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_GPIO_Init+0x31c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01f      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_GPIO_Init+0x320>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4e      	ldr	r2, [pc, #312]	; (80021ec <HAL_GPIO_Init+0x324>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <HAL_GPIO_Init+0x328>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00d      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00e      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00c      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00a      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020da:	2305      	movs	r3, #5
 80020dc:	e008      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020de:	2304      	movs	r3, #4
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e004      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_GPIO_Init+0x228>
 80020ee:	2300      	movs	r3, #0
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f002 0203 	and.w	r2, r2, #3
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	4093      	lsls	r3, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002100:	4935      	ldr	r1, [pc, #212]	; (80021d8 <HAL_GPIO_Init+0x310>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002132:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_GPIO_Init+0x334>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_GPIO_Init+0x334>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_GPIO_Init+0x334>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_GPIO_Init+0x334>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_GPIO_Init+0x334>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	f67f ae90 	bls.w	8001ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e25b      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d075      	beq.n	800233e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	4ba3      	ldr	r3, [pc, #652]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d00c      	beq.n	8002278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225e:	4ba0      	ldr	r3, [pc, #640]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d112      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226a:	4b9d      	ldr	r3, [pc, #628]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	4b99      	ldr	r3, [pc, #612]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d05b      	beq.n	800233c <HAL_RCC_OscConfig+0x108>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d157      	bne.n	800233c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e236      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x74>
 800229a:	4b91      	ldr	r3, [pc, #580]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a90      	ldr	r2, [pc, #576]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xb0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b8b      	ldr	r3, [pc, #556]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a8a      	ldr	r2, [pc, #552]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b88      	ldr	r3, [pc, #544]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a87      	ldr	r2, [pc, #540]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xb0>
 80022cc:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a83      	ldr	r2, [pc, #524]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b81      	ldr	r3, [pc, #516]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a80      	ldr	r2, [pc, #512]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fcd6 	bl	8001c9c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fcd2 	bl	8001c9c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1fb      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xc0>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fcc2 	bl	8001c9c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fcbe 	bl	8001c9c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1e7      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0xe8>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b62      	ldr	r3, [pc, #392]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x152>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1bb      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4952      	ldr	r1, [pc, #328]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b4f      	ldr	r3, [pc, #316]	; (80024e4 <HAL_RCC_OscConfig+0x2b0>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff fc77 	bl	8001c9c <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fc73 	bl	8001c9c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e19c      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4940      	ldr	r1, [pc, #256]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_RCC_OscConfig+0x2b0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fc56 	bl	8001c9c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc52 	bl	8001c9c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e17b      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d030      	beq.n	8002480 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_OscConfig+0x2b4>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff fc36 	bl	8001c9c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f7ff fc32 	bl	8001c9c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e15b      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x200>
 8002452:	e015      	b.n	8002480 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0x2b4>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fc1f 	bl	8001c9c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002462:	f7ff fc1b 	bl	8001c9c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e144      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a0 	beq.w	80025ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x2b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d121      	bne.n	800250e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCC_OscConfig+0x2b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_RCC_OscConfig+0x2b8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fbe1 	bl	8001c9c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e011      	b.n	8002502 <HAL_RCC_OscConfig+0x2ce>
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	42470000 	.word	0x42470000
 80024e8:	42470e80 	.word	0x42470e80
 80024ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7ff fbd4 	bl	8001c9c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0fd      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_OscConfig+0x4d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x2f0>
 8002516:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	4a7c      	ldr	r2, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6713      	str	r3, [r2, #112]	; 0x70
 8002522:	e01c      	b.n	800255e <HAL_RCC_OscConfig+0x32a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 800252c:	4b77      	ldr	r3, [pc, #476]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a76      	ldr	r2, [pc, #472]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b74      	ldr	r3, [pc, #464]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a73      	ldr	r2, [pc, #460]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x32a>
 8002546:	4b71      	ldr	r3, [pc, #452]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a70      	ldr	r2, [pc, #448]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	4b6e      	ldr	r3, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	4a6d      	ldr	r2, [pc, #436]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d015      	beq.n	8002592 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff fb99 	bl	8001c9c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff fb95 	bl	8001c9c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0bc      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCC_OscConfig+0x33a>
 8002590:	e014      	b.n	80025bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff fb83 	bl	8001c9c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff fb7f 	bl	8001c9c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0a6      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8092 	beq.w	80026fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d05c      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d141      	bne.n	8002670 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <HAL_RCC_OscConfig+0x4dc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fb53 	bl	8001c9c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff fb4f 	bl	8001c9c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e078      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	019b      	lsls	r3, r3, #6
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	4933      	ldr	r1, [pc, #204]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_RCC_OscConfig+0x4dc>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fb28 	bl	8001c9c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fb24 	bl	8001c9c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e04d      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x41c>
 800266e:	e045      	b.n	80026fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x4dc>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff fb11 	bl	8001c9c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267e:	f7ff fb0d 	bl	8001c9c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e036      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x44a>
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e029      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x4d8>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40007000 	.word	0x40007000
 800270c:	40023800 	.word	0x40023800
 8002710:	42470060 	.word	0x42470060

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7ff fa4a 	bl	8001c9c <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7ff fa46 	bl	8001c9c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f9aa 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	080051bc 	.word	0x080051bc
 80028d8:	20000018 	.word	0x20000018
 80028dc:	2000001c 	.word	0x2000001c

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80bd 	bhi.w	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0b7      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002916:	60bb      	str	r3, [r7, #8]
       break;
 8002918:	e0b7      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800291c:	60bb      	str	r3, [r7, #8]
      break;
 800291e:	e0b4      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002928:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04d      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	461a      	mov	r2, r3
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	ea02 0800 	and.w	r8, r2, r0
 800294e:	ea03 0901 	and.w	r9, r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	014b      	lsls	r3, r1, #5
 8002960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002964:	0142      	lsls	r2, r0, #5
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	ebb0 0008 	subs.w	r0, r0, r8
 800296e:	eb61 0109 	sbc.w	r1, r1, r9
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	018b      	lsls	r3, r1, #6
 800297c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002980:	0182      	lsls	r2, r0, #6
 8002982:	1a12      	subs	r2, r2, r0
 8002984:	eb63 0301 	sbc.w	r3, r3, r1
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	00d9      	lsls	r1, r3, #3
 8002992:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002996:	00d0      	lsls	r0, r2, #3
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	eb12 0208 	adds.w	r2, r2, r8
 80029a0:	eb43 0309 	adc.w	r3, r3, r9
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0259      	lsls	r1, r3, #9
 80029ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029b2:	0250      	lsls	r0, r2, #9
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f7fe f872 	bl	8000aac <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e04a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	ea02 0400 	and.w	r4, r2, r0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	014b      	lsls	r3, r1, #5
 80029fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a00:	0142      	lsls	r2, r0, #5
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	1b00      	subs	r0, r0, r4
 8002a08:	eb61 0105 	sbc.w	r1, r1, r5
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	018b      	lsls	r3, r1, #6
 8002a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a1a:	0182      	lsls	r2, r0, #6
 8002a1c:	1a12      	subs	r2, r2, r0
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	00d9      	lsls	r1, r3, #3
 8002a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a30:	00d0      	lsls	r0, r2, #3
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1912      	adds	r2, r2, r4
 8002a38:	eb45 0303 	adc.w	r3, r5, r3
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0299      	lsls	r1, r3, #10
 8002a46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a4a:	0290      	lsls	r0, r2, #10
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f7fe f826 	bl	8000aac <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	60bb      	str	r3, [r7, #8]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a86:	60bb      	str	r3, [r7, #8]
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000018 	.word	0x20000018

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	080051cc 	.word	0x080051cc

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	f7ff ffdc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0b5b      	lsrs	r3, r3, #13
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	080051cc 	.word	0x080051cc

08002b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e056      	b.n	8002bcc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fef5 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	f003 0104 	and.w	r1, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Transmit+0x22>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e11e      	b.n	8002e34 <HAL_SPI_Transmit+0x260>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bfe:	f7ff f84d 	bl	8001c9c <HAL_GetTick>
 8002c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d002      	beq.n	8002c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c18:	e103      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_Transmit+0x52>
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c2a:	e0fa      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d107      	bne.n	8002c84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d007      	beq.n	8002ca2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002caa:	d14b      	bne.n	8002d44 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Transmit+0xe6>
 8002cb4:	8afb      	ldrh	r3, [r7, #22]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d13e      	bne.n	8002d38 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cde:	e02b      	b.n	8002d38 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d112      	bne.n	8002d14 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	1c9a      	adds	r2, r3, #2
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d12:	e011      	b.n	8002d38 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d14:	f7fe ffc2 	bl	8001c9c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d803      	bhi.n	8002d2c <HAL_SPI_Transmit+0x158>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d102      	bne.n	8002d32 <HAL_SPI_Transmit+0x15e>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d36:	e074      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ce      	bne.n	8002ce0 <HAL_SPI_Transmit+0x10c>
 8002d42:	e04c      	b.n	8002dde <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_SPI_Transmit+0x17e>
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d140      	bne.n	8002dd4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d78:	e02c      	b.n	8002dd4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d113      	bne.n	8002db0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dae:	e011      	b.n	8002dd4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db0:	f7fe ff74 	bl	8001c9c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d803      	bhi.n	8002dc8 <HAL_SPI_Transmit+0x1f4>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d102      	bne.n	8002dce <HAL_SPI_Transmit+0x1fa>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dd2:	e026      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cd      	bne.n	8002d7a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fba4 	bl	8003530 <SPI_EndRxTxTransaction>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e000      	b.n	8002e22 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e58:	d112      	bne.n	8002e80 <HAL_SPI_Receive+0x44>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2204      	movs	r2, #4
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8e9 	bl	800304e <HAL_SPI_TransmitReceive>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	e0e2      	b.n	8003046 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_SPI_Receive+0x52>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0db      	b.n	8003046 <HAL_SPI_Receive+0x20a>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e96:	f7fe ff01 	bl	8001c9c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eac:	e0c2      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Receive+0x7e>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ebe:	e0b9      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f06:	d107      	bne.n	8002f18 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d007      	beq.n	8002f36 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d162      	bne.n	8003004 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f3e:	e02e      	b.n	8002f9e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d115      	bne.n	8002f7a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f103 020c 	add.w	r2, r3, #12
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f78:	e011      	b.n	8002f9e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fe fe8f 	bl	8001c9c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Receive+0x156>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Receive+0x15c>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f9c:	e04a      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cb      	bne.n	8002f40 <HAL_SPI_Receive+0x104>
 8002fa8:	e031      	b.n	800300e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d113      	bne.n	8002fe0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fde:	e011      	b.n	8003004 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7fe fe5c 	bl	8001c9c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Receive+0x1bc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Receive+0x1c2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003002:	e017      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1cd      	bne.n	8002faa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa27 	bl	8003466 <SPI_EndRxTransaction>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
 8003030:	e000      	b.n	8003034 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08c      	sub	sp, #48	; 0x30
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x26>
 8003070:	2302      	movs	r3, #2
 8003072:	e18a      	b.n	800338a <HAL_SPI_TransmitReceive+0x33c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307c:	f7fe fe0e 	bl	8001c9c <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800309a:	2b01      	cmp	r3, #1
 800309c:	d00f      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a4:	d107      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x68>
 80030ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030bc:	e15b      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x82>
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030d6:	e14e      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d003      	beq.n	80030ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2205      	movs	r2, #5
 80030e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d007      	beq.n	8003140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d178      	bne.n	800323c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x10a>
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d166      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	e053      	b.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	b292      	uxth	r2, r2
 80031e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003202:	2301      	movs	r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003206:	f7fe fd49 	bl	8001c9c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003212:	429a      	cmp	r2, r3
 8003214:	d807      	bhi.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d003      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003224:	e0a7      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1a6      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1a1      	bne.n	800317e <HAL_SPI_TransmitReceive+0x130>
 800323a:	e07c      	b.n	8003336 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_SPI_TransmitReceive+0x1fc>
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d16b      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003270:	e057      	b.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d11c      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d114      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d119      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032fc:	f7fe fcce 	bl	8001c9c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003308:	429a      	cmp	r2, r3
 800330a:	d803      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x2c6>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d102      	bne.n	800331a <HAL_SPI_TransmitReceive+0x2cc>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003320:	e029      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1a2      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d19d      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f8f8 	bl	8003530 <SPI_EndRxTxTransaction>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003352:	e010      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	e000      	b.n	8003376 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800338a:	4618      	mov	r0, r3
 800338c:	3730      	adds	r7, #48	; 0x30
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a2:	e04c      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d048      	beq.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ac:	f7fe fc76 	bl	8001c9c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d13d      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d111      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d004      	beq.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d107      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d10f      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d1a3      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af02      	add	r7, sp, #8
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d111      	bne.n	80034a0 <SPI_EndRxTransaction+0x3a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d004      	beq.n	8003490 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d107      	bne.n	80034a0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a8:	d12a      	bne.n	8003500 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d012      	beq.n	80034da <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff67 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02d      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e026      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2101      	movs	r1, #1
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ff54 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01a      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e013      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	2101      	movs	r1, #1
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ff41 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e000      	b.n	8003528 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <SPI_EndRxTxTransaction+0x7c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <SPI_EndRxTxTransaction+0x80>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0d5b      	lsrs	r3, r3, #21
 8003548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d112      	bne.n	8003582 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2200      	movs	r2, #0
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff13 	bl	8003392 <SPI_WaitFlagStateUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3b01      	subs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d0f2      	beq.n	8003582 <SPI_EndRxTxTransaction+0x52>
 800359c:	e000      	b.n	80035a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800359e:	bf00      	nop
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000018 	.word	0x20000018
 80035b0:	165e9f81 	.word	0x165e9f81

080035b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e03f      	b.n	8003646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fa0c 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f9b1 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b088      	sub	sp, #32
 8003652:	af02      	add	r7, sp, #8
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 8083 	bne.w	8003776 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Transmit+0x2e>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e07b      	b.n	8003778 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_UART_Transmit+0x40>
 800368a:	2302      	movs	r3, #2
 800368c:	e074      	b.n	8003778 <HAL_UART_Transmit+0x12a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2221      	movs	r2, #33	; 0x21
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036a4:	f7fe fafa 	bl	8001c9c <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036be:	e042      	b.n	8003746 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d6:	d122      	bne.n	800371e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f8f2 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e042      	b.n	8003778 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3302      	adds	r3, #2
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	e017      	b.n	8003746 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e013      	b.n	8003746 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f8cf 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e01f      	b.n	8003778 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	60ba      	str	r2, [r7, #8]
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1b7      	bne.n	80036c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f8b6 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e006      	b.n	8003778 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	f040 8090 	bne.w	80038c2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_UART_Receive+0x2e>
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e088      	b.n	80038c4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Receive+0x40>
 80037bc:	2302      	movs	r3, #2
 80037be:	e081      	b.n	80038c4 <HAL_UART_Receive+0x144>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2222      	movs	r2, #34	; 0x22
 80037d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037d6:	f7fe fa61 	bl	8001c9c <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037f0:	e05c      	b.n	80038ac <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d12b      	bne.n	8003862 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2120      	movs	r1, #32
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f859 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e04f      	b.n	80038c4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10c      	bne.n	800384a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383c:	b29a      	uxth	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3302      	adds	r3, #2
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	e030      	b.n	80038ac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	b29b      	uxth	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	b29a      	uxth	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	e024      	b.n	80038ac <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2120      	movs	r1, #32
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f82d 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e023      	b.n	80038c4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	60ba      	str	r2, [r7, #8]
 8003890:	b2ca      	uxtb	r2, r1
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e00a      	b.n	80038ac <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d19d      	bne.n	80037f2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038dc:	e02c      	b.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d028      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <UART_WaitOnFlagUntilTimeout+0x30>
 80038ec:	f7fe f9d6 	bl	8001c9c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d21d      	bcs.n	8003938 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800390a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00f      	b.n	8003958 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d0c3      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	b0bd      	sub	sp, #244	; 0xf4
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039b8:	f021 010c 	bic.w	r1, r1, #12
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039c6:	430b      	orrs	r3, r1
 80039c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	ea40 0301 	orr.w	r3, r0, r1
 80039e6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	f040 81a5 	bne.w	8003d40 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4bcd      	ldr	r3, [pc, #820]	; (8003d34 <UART_SetConfig+0x3d4>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d006      	beq.n	8003a10 <UART_SetConfig+0xb0>
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4bcb      	ldr	r3, [pc, #812]	; (8003d38 <UART_SetConfig+0x3d8>)
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	f040 80cb 	bne.w	8003ba6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff f868 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003a14:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a1c:	461c      	mov	r4, r3
 8003a1e:	f04f 0500 	mov.w	r5, #0
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	1891      	adds	r1, r2, r2
 8003a28:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a36:	1912      	adds	r2, r2, r4
 8003a38:	eb45 0303 	adc.w	r3, r5, r3
 8003a3c:	f04f 0000 	mov.w	r0, #0
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	00d9      	lsls	r1, r3, #3
 8003a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a4a:	00d0      	lsls	r0, r2, #3
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	1911      	adds	r1, r2, r4
 8003a52:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003a56:	416b      	adcs	r3, r5
 8003a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003a78:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003a7c:	f7fd f816 	bl	8000aac <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4bad      	ldr	r3, [pc, #692]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	011e      	lsls	r6, r3, #4
 8003a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a92:	461c      	mov	r4, r3
 8003a94:	f04f 0500 	mov.w	r5, #0
 8003a98:	4622      	mov	r2, r4
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	67b9      	str	r1, [r7, #120]	; 0x78
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003aa8:	1912      	adds	r2, r2, r4
 8003aaa:	eb45 0303 	adc.w	r3, r5, r3
 8003aae:	f04f 0000 	mov.w	r0, #0
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	00d9      	lsls	r1, r3, #3
 8003ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003abc:	00d0      	lsls	r0, r2, #3
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	1911      	adds	r1, r2, r4
 8003ac4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003ac8:	416b      	adcs	r3, r5
 8003aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	1891      	adds	r1, r2, r2
 8003adc:	6739      	str	r1, [r7, #112]	; 0x70
 8003ade:	415b      	adcs	r3, r3
 8003ae0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ae6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003aea:	f7fc ffdf 	bl	8000aac <__aeabi_uldivmod>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003af4:	fba3 1302 	umull	r1, r3, r3, r2
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	2164      	movs	r1, #100	; 0x64
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	3332      	adds	r3, #50	; 0x32
 8003b06:	4a8d      	ldr	r2, [pc, #564]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b14:	441e      	add	r6, r3
 8003b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	1894      	adds	r4, r2, r2
 8003b26:	66bc      	str	r4, [r7, #104]	; 0x68
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003b30:	1812      	adds	r2, r2, r0
 8003b32:	eb41 0303 	adc.w	r3, r1, r3
 8003b36:	f04f 0400 	mov.w	r4, #0
 8003b3a:	f04f 0500 	mov.w	r5, #0
 8003b3e:	00dd      	lsls	r5, r3, #3
 8003b40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b44:	00d4      	lsls	r4, r2, #3
 8003b46:	4622      	mov	r2, r4
 8003b48:	462b      	mov	r3, r5
 8003b4a:	1814      	adds	r4, r2, r0
 8003b4c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003b50:	414b      	adcs	r3, r1
 8003b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	1891      	adds	r1, r2, r2
 8003b64:	6639      	str	r1, [r7, #96]	; 0x60
 8003b66:	415b      	adcs	r3, r3
 8003b68:	667b      	str	r3, [r7, #100]	; 0x64
 8003b6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b72:	f7fc ff9b 	bl	8000aac <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a6b      	ldr	r2, [pc, #428]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4432      	add	r2, r6
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	e26d      	b.n	8004082 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba6:	f7fe ff89 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8003baa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bb2:	461c      	mov	r4, r3
 8003bb4:	f04f 0500 	mov.w	r5, #0
 8003bb8:	4622      	mov	r2, r4
 8003bba:	462b      	mov	r3, r5
 8003bbc:	1891      	adds	r1, r2, r2
 8003bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bc0:	415b      	adcs	r3, r3
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bc8:	1912      	adds	r2, r2, r4
 8003bca:	eb45 0303 	adc.w	r3, r5, r3
 8003bce:	f04f 0000 	mov.w	r0, #0
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	00d9      	lsls	r1, r3, #3
 8003bd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bdc:	00d0      	lsls	r0, r2, #3
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	1911      	adds	r1, r2, r4
 8003be4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003be8:	416b      	adcs	r3, r5
 8003bea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	6539      	str	r1, [r7, #80]	; 0x50
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	657b      	str	r3, [r7, #84]	; 0x54
 8003c02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003c0a:	f7fc ff4f 	bl	8000aac <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003c14:	fba3 2302 	umull	r2, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	011e      	lsls	r6, r3, #4
 8003c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c20:	461c      	mov	r4, r3
 8003c22:	f04f 0500 	mov.w	r5, #0
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c36:	1912      	adds	r2, r2, r4
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	f04f 0000 	mov.w	r0, #0
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	00d9      	lsls	r1, r3, #3
 8003c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4a:	00d0      	lsls	r0, r2, #3
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	1911      	adds	r1, r2, r4
 8003c52:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003c56:	416b      	adcs	r3, r5
 8003c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	6439      	str	r1, [r7, #64]	; 0x40
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003c78:	f7fc ff18 	bl	8000aac <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003c82:	fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca2:	441e      	add	r6, r3
 8003ca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	1894      	adds	r4, r2, r2
 8003cb4:	63bc      	str	r4, [r7, #56]	; 0x38
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cbe:	1812      	adds	r2, r2, r0
 8003cc0:	eb41 0303 	adc.w	r3, r1, r3
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f04f 0500 	mov.w	r5, #0
 8003ccc:	00dd      	lsls	r5, r3, #3
 8003cce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd2:	00d4      	lsls	r4, r2, #3
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	1814      	adds	r4, r2, r0
 8003cda:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003cde:	414b      	adcs	r3, r1
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	1891      	adds	r1, r2, r2
 8003cf2:	6339      	str	r1, [r7, #48]	; 0x30
 8003cf4:	415b      	adcs	r3, r3
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003cfc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d00:	f7fc fed4 	bl	8000aac <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2164      	movs	r1, #100	; 0x64
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	3332      	adds	r3, #50	; 0x32
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <UART_SetConfig+0x3dc>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	f003 0207 	and.w	r2, r3, #7
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4432      	add	r2, r6
 8003d30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d32:	e1a6      	b.n	8004082 <UART_SetConfig+0x722>
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4bd1      	ldr	r3, [pc, #836]	; (800408c <UART_SetConfig+0x72c>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d006      	beq.n	8003d5a <UART_SetConfig+0x3fa>
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4bcf      	ldr	r3, [pc, #828]	; (8004090 <UART_SetConfig+0x730>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 80ca 	bne.w	8003eee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d5a:	f7fe fec3 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8003d5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d66:	461c      	mov	r4, r3
 8003d68:	f04f 0500 	mov.w	r5, #0
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	462b      	mov	r3, r5
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d74:	415b      	adcs	r3, r3
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d7c:	1912      	adds	r2, r2, r4
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d90:	00d0      	lsls	r0, r2, #3
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	eb12 0a04 	adds.w	sl, r2, r4
 8003d9a:	eb43 0b05 	adc.w	fp, r3, r5
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003db8:	0082      	lsls	r2, r0, #2
 8003dba:	4650      	mov	r0, sl
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	f7fc fe75 	bl	8000aac <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4bb3      	ldr	r3, [pc, #716]	; (8004094 <UART_SetConfig+0x734>)
 8003dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	011e      	lsls	r6, r3, #4
 8003dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1894      	adds	r4, r2, r2
 8003de0:	623c      	str	r4, [r7, #32]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dea:	1812      	adds	r2, r2, r0
 8003dec:	eb41 0303 	adc.w	r3, r1, r3
 8003df0:	f04f 0400 	mov.w	r4, #0
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	00dd      	lsls	r5, r3, #3
 8003dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dfe:	00d4      	lsls	r4, r2, #3
 8003e00:	4622      	mov	r2, r4
 8003e02:	462b      	mov	r3, r5
 8003e04:	1814      	adds	r4, r2, r0
 8003e06:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003e0a:	414b      	adcs	r3, r1
 8003e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e2a:	0082      	lsls	r2, r0, #2
 8003e2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003e30:	f7fc fe3c 	bl	8000aac <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4b96      	ldr	r3, [pc, #600]	; (8004094 <UART_SetConfig+0x734>)
 8003e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2164      	movs	r1, #100	; 0x64
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a91      	ldr	r2, [pc, #580]	; (8004094 <UART_SetConfig+0x734>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	441e      	add	r6, r3
 8003e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	1894      	adds	r4, r2, r2
 8003e6a:	61bc      	str	r4, [r7, #24]
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e74:	1812      	adds	r2, r2, r0
 8003e76:	eb41 0303 	adc.w	r3, r1, r3
 8003e7a:	f04f 0400 	mov.w	r4, #0
 8003e7e:	f04f 0500 	mov.w	r5, #0
 8003e82:	00dd      	lsls	r5, r3, #3
 8003e84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e88:	00d4      	lsls	r4, r2, #3
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	1814      	adds	r4, r2, r0
 8003e90:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003e94:	414b      	adcs	r3, r1
 8003e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb4:	0082      	lsls	r2, r0, #2
 8003eb6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003eba:	f7fc fdf7 	bl	8000aac <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b74      	ldr	r3, [pc, #464]	; (8004094 <UART_SetConfig+0x734>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	; 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <UART_SetConfig+0x734>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4432      	add	r2, r6
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	e0c9      	b.n	8004082 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe fde5 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8003ef2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003efa:	461c      	mov	r4, r3
 8003efc:	f04f 0500 	mov.w	r5, #0
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	6139      	str	r1, [r7, #16]
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f10:	1912      	adds	r2, r2, r4
 8003f12:	eb45 0303 	adc.w	r3, r5, r3
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f24:	00d0      	lsls	r0, r2, #3
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	eb12 0804 	adds.w	r8, r2, r4
 8003f2e:	eb43 0905 	adc.w	r9, r3, r5
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	008b      	lsls	r3, r1, #2
 8003f48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f4c:	0082      	lsls	r2, r0, #2
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc fdab 	bl	8000aac <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <UART_SetConfig+0x734>)
 8003f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	011e      	lsls	r6, r3, #4
 8003f64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	1894      	adds	r4, r2, r2
 8003f74:	60bc      	str	r4, [r7, #8]
 8003f76:	415b      	adcs	r3, r3
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f7e:	1812      	adds	r2, r2, r0
 8003f80:	eb41 0303 	adc.w	r3, r1, r3
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	f04f 0500 	mov.w	r5, #0
 8003f8c:	00dd      	lsls	r5, r3, #3
 8003f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f92:	00d4      	lsls	r4, r2, #3
 8003f94:	4622      	mov	r2, r4
 8003f96:	462b      	mov	r3, r5
 8003f98:	1814      	adds	r4, r2, r0
 8003f9a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003f9e:	414b      	adcs	r3, r1
 8003fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	008b      	lsls	r3, r1, #2
 8003fba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fbe:	0082      	lsls	r2, r0, #2
 8003fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fc4:	f7fc fd72 	bl	8000aac <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <UART_SetConfig+0x734>)
 8003fce:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <UART_SetConfig+0x734>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	441e      	add	r6, r3
 8003fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	1894      	adds	r4, r2, r2
 8003ffe:	603c      	str	r4, [r7, #0]
 8004000:	415b      	adcs	r3, r3
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004008:	1812      	adds	r2, r2, r0
 800400a:	eb41 0303 	adc.w	r3, r1, r3
 800400e:	f04f 0400 	mov.w	r4, #0
 8004012:	f04f 0500 	mov.w	r5, #0
 8004016:	00dd      	lsls	r5, r3, #3
 8004018:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800401c:	00d4      	lsls	r4, r2, #3
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	1814      	adds	r4, r2, r0
 8004024:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004028:	414b      	adcs	r3, r1
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4618      	mov	r0, r3
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	008b      	lsls	r3, r1, #2
 8004044:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004048:	0082      	lsls	r2, r0, #2
 800404a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800404e:	f7fc fd2d 	bl	8000aac <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <UART_SetConfig+0x734>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <UART_SetConfig+0x734>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4432      	add	r2, r6
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	e7ff      	b.n	8004082 <UART_SetConfig+0x722>
 8004082:	bf00      	nop
 8004084:	37f4      	adds	r7, #244	; 0xf4
 8004086:	46bd      	mov	sp, r7
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	40011000 	.word	0x40011000
 8004090:	40011400 	.word	0x40011400
 8004094:	51eb851f 	.word	0x51eb851f

08004098 <__errno>:
 8004098:	4b01      	ldr	r3, [pc, #4]	; (80040a0 <__errno+0x8>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000024 	.word	0x20000024

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	; (80040dc <__libc_init_array+0x38>)
 80040a8:	4c0d      	ldr	r4, [pc, #52]	; (80040e0 <__libc_init_array+0x3c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	2600      	movs	r6, #0
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	; (80040e4 <__libc_init_array+0x40>)
 80040b6:	4c0c      	ldr	r4, [pc, #48]	; (80040e8 <__libc_init_array+0x44>)
 80040b8:	f001 f870 	bl	800519c <_init>
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	2600      	movs	r6, #0
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08005274 	.word	0x08005274
 80040e0:	08005274 	.word	0x08005274
 80040e4:	08005274 	.word	0x08005274
 80040e8:	08005278 	.word	0x08005278

080040ec <memset>:
 80040ec:	4402      	add	r2, r0
 80040ee:	4603      	mov	r3, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <iprintf>:
 80040fc:	b40f      	push	{r0, r1, r2, r3}
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <iprintf+0x2c>)
 8004100:	b513      	push	{r0, r1, r4, lr}
 8004102:	681c      	ldr	r4, [r3, #0]
 8004104:	b124      	cbz	r4, 8004110 <iprintf+0x14>
 8004106:	69a3      	ldr	r3, [r4, #24]
 8004108:	b913      	cbnz	r3, 8004110 <iprintf+0x14>
 800410a:	4620      	mov	r0, r4
 800410c:	f000 f9ee 	bl	80044ec <__sinit>
 8004110:	ab05      	add	r3, sp, #20
 8004112:	9a04      	ldr	r2, [sp, #16]
 8004114:	68a1      	ldr	r1, [r4, #8]
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	4620      	mov	r0, r4
 800411a:	f000 fbc7 	bl	80048ac <_vfiprintf_r>
 800411e:	b002      	add	sp, #8
 8004120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004124:	b004      	add	sp, #16
 8004126:	4770      	bx	lr
 8004128:	20000024 	.word	0x20000024

0800412c <setvbuf>:
 800412c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004130:	461d      	mov	r5, r3
 8004132:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <setvbuf+0x17c>)
 8004134:	681f      	ldr	r7, [r3, #0]
 8004136:	4604      	mov	r4, r0
 8004138:	460e      	mov	r6, r1
 800413a:	4690      	mov	r8, r2
 800413c:	b127      	cbz	r7, 8004148 <setvbuf+0x1c>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	b913      	cbnz	r3, 8004148 <setvbuf+0x1c>
 8004142:	4638      	mov	r0, r7
 8004144:	f000 f9d2 	bl	80044ec <__sinit>
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <setvbuf+0x180>)
 800414a:	429c      	cmp	r4, r3
 800414c:	d167      	bne.n	800421e <setvbuf+0xf2>
 800414e:	687c      	ldr	r4, [r7, #4]
 8004150:	f1b8 0f02 	cmp.w	r8, #2
 8004154:	d006      	beq.n	8004164 <setvbuf+0x38>
 8004156:	f1b8 0f01 	cmp.w	r8, #1
 800415a:	f200 809f 	bhi.w	800429c <setvbuf+0x170>
 800415e:	2d00      	cmp	r5, #0
 8004160:	f2c0 809c 	blt.w	800429c <setvbuf+0x170>
 8004164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004166:	07db      	lsls	r3, r3, #31
 8004168:	d405      	bmi.n	8004176 <setvbuf+0x4a>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	0598      	lsls	r0, r3, #22
 800416e:	d402      	bmi.n	8004176 <setvbuf+0x4a>
 8004170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004172:	f000 fa59 	bl	8004628 <__retarget_lock_acquire_recursive>
 8004176:	4621      	mov	r1, r4
 8004178:	4638      	mov	r0, r7
 800417a:	f000 f923 	bl	80043c4 <_fflush_r>
 800417e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004180:	b141      	cbz	r1, 8004194 <setvbuf+0x68>
 8004182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004186:	4299      	cmp	r1, r3
 8004188:	d002      	beq.n	8004190 <setvbuf+0x64>
 800418a:	4638      	mov	r0, r7
 800418c:	f000 faba 	bl	8004704 <_free_r>
 8004190:	2300      	movs	r3, #0
 8004192:	6363      	str	r3, [r4, #52]	; 0x34
 8004194:	2300      	movs	r3, #0
 8004196:	61a3      	str	r3, [r4, #24]
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	0619      	lsls	r1, r3, #24
 800419e:	d503      	bpl.n	80041a8 <setvbuf+0x7c>
 80041a0:	6921      	ldr	r1, [r4, #16]
 80041a2:	4638      	mov	r0, r7
 80041a4:	f000 faae 	bl	8004704 <_free_r>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	f1b8 0f02 	cmp.w	r8, #2
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	d06c      	beq.n	8004294 <setvbuf+0x168>
 80041ba:	ab01      	add	r3, sp, #4
 80041bc:	466a      	mov	r2, sp
 80041be:	4621      	mov	r1, r4
 80041c0:	4638      	mov	r0, r7
 80041c2:	f000 fa33 	bl	800462c <__swhatbuf_r>
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	4318      	orrs	r0, r3
 80041ca:	81a0      	strh	r0, [r4, #12]
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	d130      	bne.n	8004232 <setvbuf+0x106>
 80041d0:	9d00      	ldr	r5, [sp, #0]
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 fa8e 	bl	80046f4 <malloc>
 80041d8:	4606      	mov	r6, r0
 80041da:	2800      	cmp	r0, #0
 80041dc:	d155      	bne.n	800428a <setvbuf+0x15e>
 80041de:	f8dd 9000 	ldr.w	r9, [sp]
 80041e2:	45a9      	cmp	r9, r5
 80041e4:	d14a      	bne.n	800427c <setvbuf+0x150>
 80041e6:	f04f 35ff 	mov.w	r5, #4294967295
 80041ea:	2200      	movs	r2, #0
 80041ec:	60a2      	str	r2, [r4, #8]
 80041ee:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80041f2:	6022      	str	r2, [r4, #0]
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041fc:	6162      	str	r2, [r4, #20]
 80041fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	07d2      	lsls	r2, r2, #31
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	d405      	bmi.n	8004216 <setvbuf+0xea>
 800420a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800420e:	d102      	bne.n	8004216 <setvbuf+0xea>
 8004210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004212:	f000 fa0a 	bl	800462a <__retarget_lock_release_recursive>
 8004216:	4628      	mov	r0, r5
 8004218:	b003      	add	sp, #12
 800421a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <setvbuf+0x184>)
 8004220:	429c      	cmp	r4, r3
 8004222:	d101      	bne.n	8004228 <setvbuf+0xfc>
 8004224:	68bc      	ldr	r4, [r7, #8]
 8004226:	e793      	b.n	8004150 <setvbuf+0x24>
 8004228:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <setvbuf+0x188>)
 800422a:	429c      	cmp	r4, r3
 800422c:	bf08      	it	eq
 800422e:	68fc      	ldreq	r4, [r7, #12]
 8004230:	e78e      	b.n	8004150 <setvbuf+0x24>
 8004232:	2e00      	cmp	r6, #0
 8004234:	d0cd      	beq.n	80041d2 <setvbuf+0xa6>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	b913      	cbnz	r3, 8004240 <setvbuf+0x114>
 800423a:	4638      	mov	r0, r7
 800423c:	f000 f956 	bl	80044ec <__sinit>
 8004240:	f1b8 0f01 	cmp.w	r8, #1
 8004244:	bf08      	it	eq
 8004246:	89a3      	ldrheq	r3, [r4, #12]
 8004248:	6026      	str	r6, [r4, #0]
 800424a:	bf04      	itt	eq
 800424c:	f043 0301 	orreq.w	r3, r3, #1
 8004250:	81a3      	strheq	r3, [r4, #12]
 8004252:	89a2      	ldrh	r2, [r4, #12]
 8004254:	f012 0308 	ands.w	r3, r2, #8
 8004258:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800425c:	d01c      	beq.n	8004298 <setvbuf+0x16c>
 800425e:	07d3      	lsls	r3, r2, #31
 8004260:	bf41      	itttt	mi
 8004262:	2300      	movmi	r3, #0
 8004264:	426d      	negmi	r5, r5
 8004266:	60a3      	strmi	r3, [r4, #8]
 8004268:	61a5      	strmi	r5, [r4, #24]
 800426a:	bf58      	it	pl
 800426c:	60a5      	strpl	r5, [r4, #8]
 800426e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004270:	f015 0501 	ands.w	r5, r5, #1
 8004274:	d115      	bne.n	80042a2 <setvbuf+0x176>
 8004276:	f412 7f00 	tst.w	r2, #512	; 0x200
 800427a:	e7c8      	b.n	800420e <setvbuf+0xe2>
 800427c:	4648      	mov	r0, r9
 800427e:	f000 fa39 	bl	80046f4 <malloc>
 8004282:	4606      	mov	r6, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	d0ae      	beq.n	80041e6 <setvbuf+0xba>
 8004288:	464d      	mov	r5, r9
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	e7d0      	b.n	8004236 <setvbuf+0x10a>
 8004294:	2500      	movs	r5, #0
 8004296:	e7a8      	b.n	80041ea <setvbuf+0xbe>
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	e7e8      	b.n	800426e <setvbuf+0x142>
 800429c:	f04f 35ff 	mov.w	r5, #4294967295
 80042a0:	e7b9      	b.n	8004216 <setvbuf+0xea>
 80042a2:	2500      	movs	r5, #0
 80042a4:	e7b7      	b.n	8004216 <setvbuf+0xea>
 80042a6:	bf00      	nop
 80042a8:	20000024 	.word	0x20000024
 80042ac:	080051f8 	.word	0x080051f8
 80042b0:	08005218 	.word	0x08005218
 80042b4:	080051d8 	.word	0x080051d8

080042b8 <__sflush_r>:
 80042b8:	898a      	ldrh	r2, [r1, #12]
 80042ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	4605      	mov	r5, r0
 80042c0:	0710      	lsls	r0, r2, #28
 80042c2:	460c      	mov	r4, r1
 80042c4:	d458      	bmi.n	8004378 <__sflush_r+0xc0>
 80042c6:	684b      	ldr	r3, [r1, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dc05      	bgt.n	80042d8 <__sflush_r+0x20>
 80042cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	dc02      	bgt.n	80042d8 <__sflush_r+0x20>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d0f9      	beq.n	80042d2 <__sflush_r+0x1a>
 80042de:	2300      	movs	r3, #0
 80042e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042e4:	682f      	ldr	r7, [r5, #0]
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	d032      	beq.n	8004350 <__sflush_r+0x98>
 80042ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	075a      	lsls	r2, r3, #29
 80042f0:	d505      	bpl.n	80042fe <__sflush_r+0x46>
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	1ac0      	subs	r0, r0, r3
 80042f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042f8:	b10b      	cbz	r3, 80042fe <__sflush_r+0x46>
 80042fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042fc:	1ac0      	subs	r0, r0, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	4602      	mov	r2, r0
 8004302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004304:	6a21      	ldr	r1, [r4, #32]
 8004306:	4628      	mov	r0, r5
 8004308:	47b0      	blx	r6
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	d106      	bne.n	800431e <__sflush_r+0x66>
 8004310:	6829      	ldr	r1, [r5, #0]
 8004312:	291d      	cmp	r1, #29
 8004314:	d82c      	bhi.n	8004370 <__sflush_r+0xb8>
 8004316:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <__sflush_r+0x108>)
 8004318:	40ca      	lsrs	r2, r1
 800431a:	07d6      	lsls	r6, r2, #31
 800431c:	d528      	bpl.n	8004370 <__sflush_r+0xb8>
 800431e:	2200      	movs	r2, #0
 8004320:	6062      	str	r2, [r4, #4]
 8004322:	04d9      	lsls	r1, r3, #19
 8004324:	6922      	ldr	r2, [r4, #16]
 8004326:	6022      	str	r2, [r4, #0]
 8004328:	d504      	bpl.n	8004334 <__sflush_r+0x7c>
 800432a:	1c42      	adds	r2, r0, #1
 800432c:	d101      	bne.n	8004332 <__sflush_r+0x7a>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	b903      	cbnz	r3, 8004334 <__sflush_r+0x7c>
 8004332:	6560      	str	r0, [r4, #84]	; 0x54
 8004334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004336:	602f      	str	r7, [r5, #0]
 8004338:	2900      	cmp	r1, #0
 800433a:	d0ca      	beq.n	80042d2 <__sflush_r+0x1a>
 800433c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004340:	4299      	cmp	r1, r3
 8004342:	d002      	beq.n	800434a <__sflush_r+0x92>
 8004344:	4628      	mov	r0, r5
 8004346:	f000 f9dd 	bl	8004704 <_free_r>
 800434a:	2000      	movs	r0, #0
 800434c:	6360      	str	r0, [r4, #52]	; 0x34
 800434e:	e7c1      	b.n	80042d4 <__sflush_r+0x1c>
 8004350:	6a21      	ldr	r1, [r4, #32]
 8004352:	2301      	movs	r3, #1
 8004354:	4628      	mov	r0, r5
 8004356:	47b0      	blx	r6
 8004358:	1c41      	adds	r1, r0, #1
 800435a:	d1c7      	bne.n	80042ec <__sflush_r+0x34>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0c4      	beq.n	80042ec <__sflush_r+0x34>
 8004362:	2b1d      	cmp	r3, #29
 8004364:	d001      	beq.n	800436a <__sflush_r+0xb2>
 8004366:	2b16      	cmp	r3, #22
 8004368:	d101      	bne.n	800436e <__sflush_r+0xb6>
 800436a:	602f      	str	r7, [r5, #0]
 800436c:	e7b1      	b.n	80042d2 <__sflush_r+0x1a>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	e7ad      	b.n	80042d4 <__sflush_r+0x1c>
 8004378:	690f      	ldr	r7, [r1, #16]
 800437a:	2f00      	cmp	r7, #0
 800437c:	d0a9      	beq.n	80042d2 <__sflush_r+0x1a>
 800437e:	0793      	lsls	r3, r2, #30
 8004380:	680e      	ldr	r6, [r1, #0]
 8004382:	bf08      	it	eq
 8004384:	694b      	ldreq	r3, [r1, #20]
 8004386:	600f      	str	r7, [r1, #0]
 8004388:	bf18      	it	ne
 800438a:	2300      	movne	r3, #0
 800438c:	eba6 0807 	sub.w	r8, r6, r7
 8004390:	608b      	str	r3, [r1, #8]
 8004392:	f1b8 0f00 	cmp.w	r8, #0
 8004396:	dd9c      	ble.n	80042d2 <__sflush_r+0x1a>
 8004398:	6a21      	ldr	r1, [r4, #32]
 800439a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800439c:	4643      	mov	r3, r8
 800439e:	463a      	mov	r2, r7
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b0      	blx	r6
 80043a4:	2800      	cmp	r0, #0
 80043a6:	dc06      	bgt.n	80043b6 <__sflush_r+0xfe>
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e78e      	b.n	80042d4 <__sflush_r+0x1c>
 80043b6:	4407      	add	r7, r0
 80043b8:	eba8 0800 	sub.w	r8, r8, r0
 80043bc:	e7e9      	b.n	8004392 <__sflush_r+0xda>
 80043be:	bf00      	nop
 80043c0:	20400001 	.word	0x20400001

080043c4 <_fflush_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	b913      	cbnz	r3, 80043d4 <_fflush_r+0x10>
 80043ce:	2500      	movs	r5, #0
 80043d0:	4628      	mov	r0, r5
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	b118      	cbz	r0, 80043de <_fflush_r+0x1a>
 80043d6:	6983      	ldr	r3, [r0, #24]
 80043d8:	b90b      	cbnz	r3, 80043de <_fflush_r+0x1a>
 80043da:	f000 f887 	bl	80044ec <__sinit>
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <_fflush_r+0x6c>)
 80043e0:	429c      	cmp	r4, r3
 80043e2:	d11b      	bne.n	800441c <_fflush_r+0x58>
 80043e4:	686c      	ldr	r4, [r5, #4]
 80043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <_fflush_r+0xa>
 80043ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043f0:	07d0      	lsls	r0, r2, #31
 80043f2:	d404      	bmi.n	80043fe <_fflush_r+0x3a>
 80043f4:	0599      	lsls	r1, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_fflush_r+0x3a>
 80043f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fa:	f000 f915 	bl	8004628 <__retarget_lock_acquire_recursive>
 80043fe:	4628      	mov	r0, r5
 8004400:	4621      	mov	r1, r4
 8004402:	f7ff ff59 	bl	80042b8 <__sflush_r>
 8004406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004408:	07da      	lsls	r2, r3, #31
 800440a:	4605      	mov	r5, r0
 800440c:	d4e0      	bmi.n	80043d0 <_fflush_r+0xc>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	059b      	lsls	r3, r3, #22
 8004412:	d4dd      	bmi.n	80043d0 <_fflush_r+0xc>
 8004414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004416:	f000 f908 	bl	800462a <__retarget_lock_release_recursive>
 800441a:	e7d9      	b.n	80043d0 <_fflush_r+0xc>
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <_fflush_r+0x70>)
 800441e:	429c      	cmp	r4, r3
 8004420:	d101      	bne.n	8004426 <_fflush_r+0x62>
 8004422:	68ac      	ldr	r4, [r5, #8]
 8004424:	e7df      	b.n	80043e6 <_fflush_r+0x22>
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <_fflush_r+0x74>)
 8004428:	429c      	cmp	r4, r3
 800442a:	bf08      	it	eq
 800442c:	68ec      	ldreq	r4, [r5, #12]
 800442e:	e7da      	b.n	80043e6 <_fflush_r+0x22>
 8004430:	080051f8 	.word	0x080051f8
 8004434:	08005218 	.word	0x08005218
 8004438:	080051d8 	.word	0x080051d8

0800443c <std>:
 800443c:	2300      	movs	r3, #0
 800443e:	b510      	push	{r4, lr}
 8004440:	4604      	mov	r4, r0
 8004442:	e9c0 3300 	strd	r3, r3, [r0]
 8004446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800444a:	6083      	str	r3, [r0, #8]
 800444c:	8181      	strh	r1, [r0, #12]
 800444e:	6643      	str	r3, [r0, #100]	; 0x64
 8004450:	81c2      	strh	r2, [r0, #14]
 8004452:	6183      	str	r3, [r0, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	2208      	movs	r2, #8
 8004458:	305c      	adds	r0, #92	; 0x5c
 800445a:	f7ff fe47 	bl	80040ec <memset>
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <std+0x38>)
 8004460:	6263      	str	r3, [r4, #36]	; 0x24
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <std+0x3c>)
 8004464:	62a3      	str	r3, [r4, #40]	; 0x28
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <std+0x40>)
 8004468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <std+0x44>)
 800446c:	6224      	str	r4, [r4, #32]
 800446e:	6323      	str	r3, [r4, #48]	; 0x30
 8004470:	bd10      	pop	{r4, pc}
 8004472:	bf00      	nop
 8004474:	08004e55 	.word	0x08004e55
 8004478:	08004e77 	.word	0x08004e77
 800447c:	08004eaf 	.word	0x08004eaf
 8004480:	08004ed3 	.word	0x08004ed3

08004484 <_cleanup_r>:
 8004484:	4901      	ldr	r1, [pc, #4]	; (800448c <_cleanup_r+0x8>)
 8004486:	f000 b8af 	b.w	80045e8 <_fwalk_reent>
 800448a:	bf00      	nop
 800448c:	080043c5 	.word	0x080043c5

08004490 <__sfmoreglue>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	1e4a      	subs	r2, r1, #1
 8004494:	2568      	movs	r5, #104	; 0x68
 8004496:	4355      	muls	r5, r2
 8004498:	460e      	mov	r6, r1
 800449a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800449e:	f000 f981 	bl	80047a4 <_malloc_r>
 80044a2:	4604      	mov	r4, r0
 80044a4:	b140      	cbz	r0, 80044b8 <__sfmoreglue+0x28>
 80044a6:	2100      	movs	r1, #0
 80044a8:	e9c0 1600 	strd	r1, r6, [r0]
 80044ac:	300c      	adds	r0, #12
 80044ae:	60a0      	str	r0, [r4, #8]
 80044b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044b4:	f7ff fe1a 	bl	80040ec <memset>
 80044b8:	4620      	mov	r0, r4
 80044ba:	bd70      	pop	{r4, r5, r6, pc}

080044bc <__sfp_lock_acquire>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__sfp_lock_acquire+0x8>)
 80044be:	f000 b8b3 	b.w	8004628 <__retarget_lock_acquire_recursive>
 80044c2:	bf00      	nop
 80044c4:	20000258 	.word	0x20000258

080044c8 <__sfp_lock_release>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__sfp_lock_release+0x8>)
 80044ca:	f000 b8ae 	b.w	800462a <__retarget_lock_release_recursive>
 80044ce:	bf00      	nop
 80044d0:	20000258 	.word	0x20000258

080044d4 <__sinit_lock_acquire>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__sinit_lock_acquire+0x8>)
 80044d6:	f000 b8a7 	b.w	8004628 <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	20000253 	.word	0x20000253

080044e0 <__sinit_lock_release>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__sinit_lock_release+0x8>)
 80044e2:	f000 b8a2 	b.w	800462a <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	20000253 	.word	0x20000253

080044ec <__sinit>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	f7ff fff0 	bl	80044d4 <__sinit_lock_acquire>
 80044f4:	69a3      	ldr	r3, [r4, #24]
 80044f6:	b11b      	cbz	r3, 8004500 <__sinit+0x14>
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fc:	f7ff bff0 	b.w	80044e0 <__sinit_lock_release>
 8004500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004504:	6523      	str	r3, [r4, #80]	; 0x50
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <__sinit+0x68>)
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <__sinit+0x6c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	62a2      	str	r2, [r4, #40]	; 0x28
 800450e:	42a3      	cmp	r3, r4
 8004510:	bf04      	itt	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	61a3      	streq	r3, [r4, #24]
 8004516:	4620      	mov	r0, r4
 8004518:	f000 f820 	bl	800455c <__sfp>
 800451c:	6060      	str	r0, [r4, #4]
 800451e:	4620      	mov	r0, r4
 8004520:	f000 f81c 	bl	800455c <__sfp>
 8004524:	60a0      	str	r0, [r4, #8]
 8004526:	4620      	mov	r0, r4
 8004528:	f000 f818 	bl	800455c <__sfp>
 800452c:	2200      	movs	r2, #0
 800452e:	60e0      	str	r0, [r4, #12]
 8004530:	2104      	movs	r1, #4
 8004532:	6860      	ldr	r0, [r4, #4]
 8004534:	f7ff ff82 	bl	800443c <std>
 8004538:	68a0      	ldr	r0, [r4, #8]
 800453a:	2201      	movs	r2, #1
 800453c:	2109      	movs	r1, #9
 800453e:	f7ff ff7d 	bl	800443c <std>
 8004542:	68e0      	ldr	r0, [r4, #12]
 8004544:	2202      	movs	r2, #2
 8004546:	2112      	movs	r1, #18
 8004548:	f7ff ff78 	bl	800443c <std>
 800454c:	2301      	movs	r3, #1
 800454e:	61a3      	str	r3, [r4, #24]
 8004550:	e7d2      	b.n	80044f8 <__sinit+0xc>
 8004552:	bf00      	nop
 8004554:	080051d4 	.word	0x080051d4
 8004558:	08004485 	.word	0x08004485

0800455c <__sfp>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	4607      	mov	r7, r0
 8004560:	f7ff ffac 	bl	80044bc <__sfp_lock_acquire>
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <__sfp+0x84>)
 8004566:	681e      	ldr	r6, [r3, #0]
 8004568:	69b3      	ldr	r3, [r6, #24]
 800456a:	b913      	cbnz	r3, 8004572 <__sfp+0x16>
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff ffbd 	bl	80044ec <__sinit>
 8004572:	3648      	adds	r6, #72	; 0x48
 8004574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004578:	3b01      	subs	r3, #1
 800457a:	d503      	bpl.n	8004584 <__sfp+0x28>
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	b30b      	cbz	r3, 80045c4 <__sfp+0x68>
 8004580:	6836      	ldr	r6, [r6, #0]
 8004582:	e7f7      	b.n	8004574 <__sfp+0x18>
 8004584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004588:	b9d5      	cbnz	r5, 80045c0 <__sfp+0x64>
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <__sfp+0x88>)
 800458c:	60e3      	str	r3, [r4, #12]
 800458e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004592:	6665      	str	r5, [r4, #100]	; 0x64
 8004594:	f000 f847 	bl	8004626 <__retarget_lock_init_recursive>
 8004598:	f7ff ff96 	bl	80044c8 <__sfp_lock_release>
 800459c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045a4:	6025      	str	r5, [r4, #0]
 80045a6:	61a5      	str	r5, [r4, #24]
 80045a8:	2208      	movs	r2, #8
 80045aa:	4629      	mov	r1, r5
 80045ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045b0:	f7ff fd9c 	bl	80040ec <memset>
 80045b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045bc:	4620      	mov	r0, r4
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c0:	3468      	adds	r4, #104	; 0x68
 80045c2:	e7d9      	b.n	8004578 <__sfp+0x1c>
 80045c4:	2104      	movs	r1, #4
 80045c6:	4638      	mov	r0, r7
 80045c8:	f7ff ff62 	bl	8004490 <__sfmoreglue>
 80045cc:	4604      	mov	r4, r0
 80045ce:	6030      	str	r0, [r6, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1d5      	bne.n	8004580 <__sfp+0x24>
 80045d4:	f7ff ff78 	bl	80044c8 <__sfp_lock_release>
 80045d8:	230c      	movs	r3, #12
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	e7ee      	b.n	80045bc <__sfp+0x60>
 80045de:	bf00      	nop
 80045e0:	080051d4 	.word	0x080051d4
 80045e4:	ffff0001 	.word	0xffff0001

080045e8 <_fwalk_reent>:
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ec:	4606      	mov	r6, r0
 80045ee:	4688      	mov	r8, r1
 80045f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045f4:	2700      	movs	r7, #0
 80045f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045fa:	f1b9 0901 	subs.w	r9, r9, #1
 80045fe:	d505      	bpl.n	800460c <_fwalk_reent+0x24>
 8004600:	6824      	ldr	r4, [r4, #0]
 8004602:	2c00      	cmp	r4, #0
 8004604:	d1f7      	bne.n	80045f6 <_fwalk_reent+0xe>
 8004606:	4638      	mov	r0, r7
 8004608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460c:	89ab      	ldrh	r3, [r5, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d907      	bls.n	8004622 <_fwalk_reent+0x3a>
 8004612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004616:	3301      	adds	r3, #1
 8004618:	d003      	beq.n	8004622 <_fwalk_reent+0x3a>
 800461a:	4629      	mov	r1, r5
 800461c:	4630      	mov	r0, r6
 800461e:	47c0      	blx	r8
 8004620:	4307      	orrs	r7, r0
 8004622:	3568      	adds	r5, #104	; 0x68
 8004624:	e7e9      	b.n	80045fa <_fwalk_reent+0x12>

08004626 <__retarget_lock_init_recursive>:
 8004626:	4770      	bx	lr

08004628 <__retarget_lock_acquire_recursive>:
 8004628:	4770      	bx	lr

0800462a <__retarget_lock_release_recursive>:
 800462a:	4770      	bx	lr

0800462c <__swhatbuf_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	2900      	cmp	r1, #0
 8004636:	b096      	sub	sp, #88	; 0x58
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
 800463c:	da07      	bge.n	800464e <__swhatbuf_r+0x22>
 800463e:	2300      	movs	r3, #0
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	89b3      	ldrh	r3, [r6, #12]
 8004644:	061a      	lsls	r2, r3, #24
 8004646:	d410      	bmi.n	800466a <__swhatbuf_r+0x3e>
 8004648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464c:	e00e      	b.n	800466c <__swhatbuf_r+0x40>
 800464e:	466a      	mov	r2, sp
 8004650:	f000 fd26 	bl	80050a0 <_fstat_r>
 8004654:	2800      	cmp	r0, #0
 8004656:	dbf2      	blt.n	800463e <__swhatbuf_r+0x12>
 8004658:	9a01      	ldr	r2, [sp, #4]
 800465a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800465e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004662:	425a      	negs	r2, r3
 8004664:	415a      	adcs	r2, r3
 8004666:	602a      	str	r2, [r5, #0]
 8004668:	e7ee      	b.n	8004648 <__swhatbuf_r+0x1c>
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	2000      	movs	r0, #0
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	b016      	add	sp, #88	; 0x58
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <__smakebuf_r>:
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004678:	079d      	lsls	r5, r3, #30
 800467a:	4606      	mov	r6, r0
 800467c:	460c      	mov	r4, r1
 800467e:	d507      	bpl.n	8004690 <__smakebuf_r+0x1c>
 8004680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	2301      	movs	r3, #1
 800468a:	6163      	str	r3, [r4, #20]
 800468c:	b002      	add	sp, #8
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	ab01      	add	r3, sp, #4
 8004692:	466a      	mov	r2, sp
 8004694:	f7ff ffca 	bl	800462c <__swhatbuf_r>
 8004698:	9900      	ldr	r1, [sp, #0]
 800469a:	4605      	mov	r5, r0
 800469c:	4630      	mov	r0, r6
 800469e:	f000 f881 	bl	80047a4 <_malloc_r>
 80046a2:	b948      	cbnz	r0, 80046b8 <__smakebuf_r+0x44>
 80046a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a8:	059a      	lsls	r2, r3, #22
 80046aa:	d4ef      	bmi.n	800468c <__smakebuf_r+0x18>
 80046ac:	f023 0303 	bic.w	r3, r3, #3
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	e7e3      	b.n	8004680 <__smakebuf_r+0xc>
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <__smakebuf_r+0x7c>)
 80046ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	6020      	str	r0, [r4, #0]
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	6163      	str	r3, [r4, #20]
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	6120      	str	r0, [r4, #16]
 80046ce:	b15b      	cbz	r3, 80046e8 <__smakebuf_r+0x74>
 80046d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 fcf5 	bl	80050c4 <_isatty_r>
 80046da:	b128      	cbz	r0, 80046e8 <__smakebuf_r+0x74>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	89a0      	ldrh	r0, [r4, #12]
 80046ea:	4305      	orrs	r5, r0
 80046ec:	81a5      	strh	r5, [r4, #12]
 80046ee:	e7cd      	b.n	800468c <__smakebuf_r+0x18>
 80046f0:	08004485 	.word	0x08004485

080046f4 <malloc>:
 80046f4:	4b02      	ldr	r3, [pc, #8]	; (8004700 <malloc+0xc>)
 80046f6:	4601      	mov	r1, r0
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	f000 b853 	b.w	80047a4 <_malloc_r>
 80046fe:	bf00      	nop
 8004700:	20000024 	.word	0x20000024

08004704 <_free_r>:
 8004704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004706:	2900      	cmp	r1, #0
 8004708:	d048      	beq.n	800479c <_free_r+0x98>
 800470a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800470e:	9001      	str	r0, [sp, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f1a1 0404 	sub.w	r4, r1, #4
 8004716:	bfb8      	it	lt
 8004718:	18e4      	addlt	r4, r4, r3
 800471a:	f000 fcf5 	bl	8005108 <__malloc_lock>
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <_free_r+0x9c>)
 8004720:	9801      	ldr	r0, [sp, #4]
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	4615      	mov	r5, r2
 8004726:	b933      	cbnz	r3, 8004736 <_free_r+0x32>
 8004728:	6063      	str	r3, [r4, #4]
 800472a:	6014      	str	r4, [r2, #0]
 800472c:	b003      	add	sp, #12
 800472e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004732:	f000 bcef 	b.w	8005114 <__malloc_unlock>
 8004736:	42a3      	cmp	r3, r4
 8004738:	d90b      	bls.n	8004752 <_free_r+0x4e>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	1862      	adds	r2, r4, r1
 800473e:	4293      	cmp	r3, r2
 8004740:	bf04      	itt	eq
 8004742:	681a      	ldreq	r2, [r3, #0]
 8004744:	685b      	ldreq	r3, [r3, #4]
 8004746:	6063      	str	r3, [r4, #4]
 8004748:	bf04      	itt	eq
 800474a:	1852      	addeq	r2, r2, r1
 800474c:	6022      	streq	r2, [r4, #0]
 800474e:	602c      	str	r4, [r5, #0]
 8004750:	e7ec      	b.n	800472c <_free_r+0x28>
 8004752:	461a      	mov	r2, r3
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b10b      	cbz	r3, 800475c <_free_r+0x58>
 8004758:	42a3      	cmp	r3, r4
 800475a:	d9fa      	bls.n	8004752 <_free_r+0x4e>
 800475c:	6811      	ldr	r1, [r2, #0]
 800475e:	1855      	adds	r5, r2, r1
 8004760:	42a5      	cmp	r5, r4
 8004762:	d10b      	bne.n	800477c <_free_r+0x78>
 8004764:	6824      	ldr	r4, [r4, #0]
 8004766:	4421      	add	r1, r4
 8004768:	1854      	adds	r4, r2, r1
 800476a:	42a3      	cmp	r3, r4
 800476c:	6011      	str	r1, [r2, #0]
 800476e:	d1dd      	bne.n	800472c <_free_r+0x28>
 8004770:	681c      	ldr	r4, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	6053      	str	r3, [r2, #4]
 8004776:	4421      	add	r1, r4
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	e7d7      	b.n	800472c <_free_r+0x28>
 800477c:	d902      	bls.n	8004784 <_free_r+0x80>
 800477e:	230c      	movs	r3, #12
 8004780:	6003      	str	r3, [r0, #0]
 8004782:	e7d3      	b.n	800472c <_free_r+0x28>
 8004784:	6825      	ldr	r5, [r4, #0]
 8004786:	1961      	adds	r1, r4, r5
 8004788:	428b      	cmp	r3, r1
 800478a:	bf04      	itt	eq
 800478c:	6819      	ldreq	r1, [r3, #0]
 800478e:	685b      	ldreq	r3, [r3, #4]
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	bf04      	itt	eq
 8004794:	1949      	addeq	r1, r1, r5
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	6054      	str	r4, [r2, #4]
 800479a:	e7c7      	b.n	800472c <_free_r+0x28>
 800479c:	b003      	add	sp, #12
 800479e:	bd30      	pop	{r4, r5, pc}
 80047a0:	200000a8 	.word	0x200000a8

080047a4 <_malloc_r>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	1ccd      	adds	r5, r1, #3
 80047a8:	f025 0503 	bic.w	r5, r5, #3
 80047ac:	3508      	adds	r5, #8
 80047ae:	2d0c      	cmp	r5, #12
 80047b0:	bf38      	it	cc
 80047b2:	250c      	movcc	r5, #12
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	4606      	mov	r6, r0
 80047b8:	db01      	blt.n	80047be <_malloc_r+0x1a>
 80047ba:	42a9      	cmp	r1, r5
 80047bc:	d903      	bls.n	80047c6 <_malloc_r+0x22>
 80047be:	230c      	movs	r3, #12
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	2000      	movs	r0, #0
 80047c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c6:	f000 fc9f 	bl	8005108 <__malloc_lock>
 80047ca:	4921      	ldr	r1, [pc, #132]	; (8004850 <_malloc_r+0xac>)
 80047cc:	680a      	ldr	r2, [r1, #0]
 80047ce:	4614      	mov	r4, r2
 80047d0:	b99c      	cbnz	r4, 80047fa <_malloc_r+0x56>
 80047d2:	4f20      	ldr	r7, [pc, #128]	; (8004854 <_malloc_r+0xb0>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	b923      	cbnz	r3, 80047e2 <_malloc_r+0x3e>
 80047d8:	4621      	mov	r1, r4
 80047da:	4630      	mov	r0, r6
 80047dc:	f000 fb2a 	bl	8004e34 <_sbrk_r>
 80047e0:	6038      	str	r0, [r7, #0]
 80047e2:	4629      	mov	r1, r5
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fb25 	bl	8004e34 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d123      	bne.n	8004836 <_malloc_r+0x92>
 80047ee:	230c      	movs	r3, #12
 80047f0:	6033      	str	r3, [r6, #0]
 80047f2:	4630      	mov	r0, r6
 80047f4:	f000 fc8e 	bl	8005114 <__malloc_unlock>
 80047f8:	e7e3      	b.n	80047c2 <_malloc_r+0x1e>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	1b5b      	subs	r3, r3, r5
 80047fe:	d417      	bmi.n	8004830 <_malloc_r+0x8c>
 8004800:	2b0b      	cmp	r3, #11
 8004802:	d903      	bls.n	800480c <_malloc_r+0x68>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	441c      	add	r4, r3
 8004808:	6025      	str	r5, [r4, #0]
 800480a:	e004      	b.n	8004816 <_malloc_r+0x72>
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	42a2      	cmp	r2, r4
 8004810:	bf0c      	ite	eq
 8004812:	600b      	streq	r3, [r1, #0]
 8004814:	6053      	strne	r3, [r2, #4]
 8004816:	4630      	mov	r0, r6
 8004818:	f000 fc7c 	bl	8005114 <__malloc_unlock>
 800481c:	f104 000b 	add.w	r0, r4, #11
 8004820:	1d23      	adds	r3, r4, #4
 8004822:	f020 0007 	bic.w	r0, r0, #7
 8004826:	1ac2      	subs	r2, r0, r3
 8004828:	d0cc      	beq.n	80047c4 <_malloc_r+0x20>
 800482a:	1a1b      	subs	r3, r3, r0
 800482c:	50a3      	str	r3, [r4, r2]
 800482e:	e7c9      	b.n	80047c4 <_malloc_r+0x20>
 8004830:	4622      	mov	r2, r4
 8004832:	6864      	ldr	r4, [r4, #4]
 8004834:	e7cc      	b.n	80047d0 <_malloc_r+0x2c>
 8004836:	1cc4      	adds	r4, r0, #3
 8004838:	f024 0403 	bic.w	r4, r4, #3
 800483c:	42a0      	cmp	r0, r4
 800483e:	d0e3      	beq.n	8004808 <_malloc_r+0x64>
 8004840:	1a21      	subs	r1, r4, r0
 8004842:	4630      	mov	r0, r6
 8004844:	f000 faf6 	bl	8004e34 <_sbrk_r>
 8004848:	3001      	adds	r0, #1
 800484a:	d1dd      	bne.n	8004808 <_malloc_r+0x64>
 800484c:	e7cf      	b.n	80047ee <_malloc_r+0x4a>
 800484e:	bf00      	nop
 8004850:	200000a8 	.word	0x200000a8
 8004854:	200000ac 	.word	0x200000ac

08004858 <__sfputc_r>:
 8004858:	6893      	ldr	r3, [r2, #8]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	b410      	push	{r4}
 8004860:	6093      	str	r3, [r2, #8]
 8004862:	da08      	bge.n	8004876 <__sfputc_r+0x1e>
 8004864:	6994      	ldr	r4, [r2, #24]
 8004866:	42a3      	cmp	r3, r4
 8004868:	db01      	blt.n	800486e <__sfputc_r+0x16>
 800486a:	290a      	cmp	r1, #10
 800486c:	d103      	bne.n	8004876 <__sfputc_r+0x1e>
 800486e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004872:	f000 bb33 	b.w	8004edc <__swbuf_r>
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	1c58      	adds	r0, r3, #1
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	7019      	strb	r1, [r3, #0]
 800487e:	4608      	mov	r0, r1
 8004880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004884:	4770      	bx	lr

08004886 <__sfputs_r>:
 8004886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004888:	4606      	mov	r6, r0
 800488a:	460f      	mov	r7, r1
 800488c:	4614      	mov	r4, r2
 800488e:	18d5      	adds	r5, r2, r3
 8004890:	42ac      	cmp	r4, r5
 8004892:	d101      	bne.n	8004898 <__sfputs_r+0x12>
 8004894:	2000      	movs	r0, #0
 8004896:	e007      	b.n	80048a8 <__sfputs_r+0x22>
 8004898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800489c:	463a      	mov	r2, r7
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff ffda 	bl	8004858 <__sfputc_r>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d1f3      	bne.n	8004890 <__sfputs_r+0xa>
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048ac <_vfiprintf_r>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	460d      	mov	r5, r1
 80048b2:	b09d      	sub	sp, #116	; 0x74
 80048b4:	4614      	mov	r4, r2
 80048b6:	4698      	mov	r8, r3
 80048b8:	4606      	mov	r6, r0
 80048ba:	b118      	cbz	r0, 80048c4 <_vfiprintf_r+0x18>
 80048bc:	6983      	ldr	r3, [r0, #24]
 80048be:	b90b      	cbnz	r3, 80048c4 <_vfiprintf_r+0x18>
 80048c0:	f7ff fe14 	bl	80044ec <__sinit>
 80048c4:	4b89      	ldr	r3, [pc, #548]	; (8004aec <_vfiprintf_r+0x240>)
 80048c6:	429d      	cmp	r5, r3
 80048c8:	d11b      	bne.n	8004902 <_vfiprintf_r+0x56>
 80048ca:	6875      	ldr	r5, [r6, #4]
 80048cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ce:	07d9      	lsls	r1, r3, #31
 80048d0:	d405      	bmi.n	80048de <_vfiprintf_r+0x32>
 80048d2:	89ab      	ldrh	r3, [r5, #12]
 80048d4:	059a      	lsls	r2, r3, #22
 80048d6:	d402      	bmi.n	80048de <_vfiprintf_r+0x32>
 80048d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048da:	f7ff fea5 	bl	8004628 <__retarget_lock_acquire_recursive>
 80048de:	89ab      	ldrh	r3, [r5, #12]
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	d501      	bpl.n	80048e8 <_vfiprintf_r+0x3c>
 80048e4:	692b      	ldr	r3, [r5, #16]
 80048e6:	b9eb      	cbnz	r3, 8004924 <_vfiprintf_r+0x78>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 fb5a 	bl	8004fa4 <__swsetup_r>
 80048f0:	b1c0      	cbz	r0, 8004924 <_vfiprintf_r+0x78>
 80048f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048f4:	07dc      	lsls	r4, r3, #31
 80048f6:	d50e      	bpl.n	8004916 <_vfiprintf_r+0x6a>
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	b01d      	add	sp, #116	; 0x74
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	4b7b      	ldr	r3, [pc, #492]	; (8004af0 <_vfiprintf_r+0x244>)
 8004904:	429d      	cmp	r5, r3
 8004906:	d101      	bne.n	800490c <_vfiprintf_r+0x60>
 8004908:	68b5      	ldr	r5, [r6, #8]
 800490a:	e7df      	b.n	80048cc <_vfiprintf_r+0x20>
 800490c:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <_vfiprintf_r+0x248>)
 800490e:	429d      	cmp	r5, r3
 8004910:	bf08      	it	eq
 8004912:	68f5      	ldreq	r5, [r6, #12]
 8004914:	e7da      	b.n	80048cc <_vfiprintf_r+0x20>
 8004916:	89ab      	ldrh	r3, [r5, #12]
 8004918:	0598      	lsls	r0, r3, #22
 800491a:	d4ed      	bmi.n	80048f8 <_vfiprintf_r+0x4c>
 800491c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800491e:	f7ff fe84 	bl	800462a <__retarget_lock_release_recursive>
 8004922:	e7e9      	b.n	80048f8 <_vfiprintf_r+0x4c>
 8004924:	2300      	movs	r3, #0
 8004926:	9309      	str	r3, [sp, #36]	; 0x24
 8004928:	2320      	movs	r3, #32
 800492a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800492e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004932:	2330      	movs	r3, #48	; 0x30
 8004934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004af8 <_vfiprintf_r+0x24c>
 8004938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800493c:	f04f 0901 	mov.w	r9, #1
 8004940:	4623      	mov	r3, r4
 8004942:	469a      	mov	sl, r3
 8004944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004948:	b10a      	cbz	r2, 800494e <_vfiprintf_r+0xa2>
 800494a:	2a25      	cmp	r2, #37	; 0x25
 800494c:	d1f9      	bne.n	8004942 <_vfiprintf_r+0x96>
 800494e:	ebba 0b04 	subs.w	fp, sl, r4
 8004952:	d00b      	beq.n	800496c <_vfiprintf_r+0xc0>
 8004954:	465b      	mov	r3, fp
 8004956:	4622      	mov	r2, r4
 8004958:	4629      	mov	r1, r5
 800495a:	4630      	mov	r0, r6
 800495c:	f7ff ff93 	bl	8004886 <__sfputs_r>
 8004960:	3001      	adds	r0, #1
 8004962:	f000 80aa 	beq.w	8004aba <_vfiprintf_r+0x20e>
 8004966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004968:	445a      	add	r2, fp
 800496a:	9209      	str	r2, [sp, #36]	; 0x24
 800496c:	f89a 3000 	ldrb.w	r3, [sl]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a2 	beq.w	8004aba <_vfiprintf_r+0x20e>
 8004976:	2300      	movs	r3, #0
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004980:	f10a 0a01 	add.w	sl, sl, #1
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	9307      	str	r3, [sp, #28]
 8004988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800498c:	931a      	str	r3, [sp, #104]	; 0x68
 800498e:	4654      	mov	r4, sl
 8004990:	2205      	movs	r2, #5
 8004992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004996:	4858      	ldr	r0, [pc, #352]	; (8004af8 <_vfiprintf_r+0x24c>)
 8004998:	f7fb fc1a 	bl	80001d0 <memchr>
 800499c:	9a04      	ldr	r2, [sp, #16]
 800499e:	b9d8      	cbnz	r0, 80049d8 <_vfiprintf_r+0x12c>
 80049a0:	06d1      	lsls	r1, r2, #27
 80049a2:	bf44      	itt	mi
 80049a4:	2320      	movmi	r3, #32
 80049a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049aa:	0713      	lsls	r3, r2, #28
 80049ac:	bf44      	itt	mi
 80049ae:	232b      	movmi	r3, #43	; 0x2b
 80049b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b4:	f89a 3000 	ldrb.w	r3, [sl]
 80049b8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ba:	d015      	beq.n	80049e8 <_vfiprintf_r+0x13c>
 80049bc:	9a07      	ldr	r2, [sp, #28]
 80049be:	4654      	mov	r4, sl
 80049c0:	2000      	movs	r0, #0
 80049c2:	f04f 0c0a 	mov.w	ip, #10
 80049c6:	4621      	mov	r1, r4
 80049c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049cc:	3b30      	subs	r3, #48	; 0x30
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	d94e      	bls.n	8004a70 <_vfiprintf_r+0x1c4>
 80049d2:	b1b0      	cbz	r0, 8004a02 <_vfiprintf_r+0x156>
 80049d4:	9207      	str	r2, [sp, #28]
 80049d6:	e014      	b.n	8004a02 <_vfiprintf_r+0x156>
 80049d8:	eba0 0308 	sub.w	r3, r0, r8
 80049dc:	fa09 f303 	lsl.w	r3, r9, r3
 80049e0:	4313      	orrs	r3, r2
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	46a2      	mov	sl, r4
 80049e6:	e7d2      	b.n	800498e <_vfiprintf_r+0xe2>
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	1d19      	adds	r1, r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	9103      	str	r1, [sp, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bfbb      	ittet	lt
 80049f4:	425b      	neglt	r3, r3
 80049f6:	f042 0202 	orrlt.w	r2, r2, #2
 80049fa:	9307      	strge	r3, [sp, #28]
 80049fc:	9307      	strlt	r3, [sp, #28]
 80049fe:	bfb8      	it	lt
 8004a00:	9204      	strlt	r2, [sp, #16]
 8004a02:	7823      	ldrb	r3, [r4, #0]
 8004a04:	2b2e      	cmp	r3, #46	; 0x2e
 8004a06:	d10c      	bne.n	8004a22 <_vfiprintf_r+0x176>
 8004a08:	7863      	ldrb	r3, [r4, #1]
 8004a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0c:	d135      	bne.n	8004a7a <_vfiprintf_r+0x1ce>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	9203      	str	r2, [sp, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfb8      	it	lt
 8004a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a1e:	3402      	adds	r4, #2
 8004a20:	9305      	str	r3, [sp, #20]
 8004a22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b08 <_vfiprintf_r+0x25c>
 8004a26:	7821      	ldrb	r1, [r4, #0]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	f7fb fbd0 	bl	80001d0 <memchr>
 8004a30:	b140      	cbz	r0, 8004a44 <_vfiprintf_r+0x198>
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	eba0 000a 	sub.w	r0, r0, sl
 8004a38:	fa03 f000 	lsl.w	r0, r3, r0
 8004a3c:	9b04      	ldr	r3, [sp, #16]
 8004a3e:	4303      	orrs	r3, r0
 8004a40:	3401      	adds	r4, #1
 8004a42:	9304      	str	r3, [sp, #16]
 8004a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a48:	482c      	ldr	r0, [pc, #176]	; (8004afc <_vfiprintf_r+0x250>)
 8004a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a4e:	2206      	movs	r2, #6
 8004a50:	f7fb fbbe 	bl	80001d0 <memchr>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d03f      	beq.n	8004ad8 <_vfiprintf_r+0x22c>
 8004a58:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <_vfiprintf_r+0x254>)
 8004a5a:	bb1b      	cbnz	r3, 8004aa4 <_vfiprintf_r+0x1f8>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	3307      	adds	r3, #7
 8004a60:	f023 0307 	bic.w	r3, r3, #7
 8004a64:	3308      	adds	r3, #8
 8004a66:	9303      	str	r3, [sp, #12]
 8004a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6a:	443b      	add	r3, r7
 8004a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6e:	e767      	b.n	8004940 <_vfiprintf_r+0x94>
 8004a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a74:	460c      	mov	r4, r1
 8004a76:	2001      	movs	r0, #1
 8004a78:	e7a5      	b.n	80049c6 <_vfiprintf_r+0x11a>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	3401      	adds	r4, #1
 8004a7e:	9305      	str	r3, [sp, #20]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f04f 0c0a 	mov.w	ip, #10
 8004a86:	4620      	mov	r0, r4
 8004a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a8c:	3a30      	subs	r2, #48	; 0x30
 8004a8e:	2a09      	cmp	r2, #9
 8004a90:	d903      	bls.n	8004a9a <_vfiprintf_r+0x1ee>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0c5      	beq.n	8004a22 <_vfiprintf_r+0x176>
 8004a96:	9105      	str	r1, [sp, #20]
 8004a98:	e7c3      	b.n	8004a22 <_vfiprintf_r+0x176>
 8004a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e7f0      	b.n	8004a86 <_vfiprintf_r+0x1da>
 8004aa4:	ab03      	add	r3, sp, #12
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	462a      	mov	r2, r5
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <_vfiprintf_r+0x258>)
 8004aac:	a904      	add	r1, sp, #16
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f3af 8000 	nop.w
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	1c78      	adds	r0, r7, #1
 8004ab8:	d1d6      	bne.n	8004a68 <_vfiprintf_r+0x1bc>
 8004aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004abc:	07d9      	lsls	r1, r3, #31
 8004abe:	d405      	bmi.n	8004acc <_vfiprintf_r+0x220>
 8004ac0:	89ab      	ldrh	r3, [r5, #12]
 8004ac2:	059a      	lsls	r2, r3, #22
 8004ac4:	d402      	bmi.n	8004acc <_vfiprintf_r+0x220>
 8004ac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ac8:	f7ff fdaf 	bl	800462a <__retarget_lock_release_recursive>
 8004acc:	89ab      	ldrh	r3, [r5, #12]
 8004ace:	065b      	lsls	r3, r3, #25
 8004ad0:	f53f af12 	bmi.w	80048f8 <_vfiprintf_r+0x4c>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	e711      	b.n	80048fc <_vfiprintf_r+0x50>
 8004ad8:	ab03      	add	r3, sp, #12
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	462a      	mov	r2, r5
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <_vfiprintf_r+0x258>)
 8004ae0:	a904      	add	r1, sp, #16
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f880 	bl	8004be8 <_printf_i>
 8004ae8:	e7e4      	b.n	8004ab4 <_vfiprintf_r+0x208>
 8004aea:	bf00      	nop
 8004aec:	080051f8 	.word	0x080051f8
 8004af0:	08005218 	.word	0x08005218
 8004af4:	080051d8 	.word	0x080051d8
 8004af8:	08005238 	.word	0x08005238
 8004afc:	08005242 	.word	0x08005242
 8004b00:	00000000 	.word	0x00000000
 8004b04:	08004887 	.word	0x08004887
 8004b08:	0800523e 	.word	0x0800523e

08004b0c <_printf_common>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4616      	mov	r6, r2
 8004b12:	4699      	mov	r9, r3
 8004b14:	688a      	ldr	r2, [r1, #8]
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bfb8      	it	lt
 8004b20:	4613      	movlt	r3, r2
 8004b22:	6033      	str	r3, [r6, #0]
 8004b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b10a      	cbz	r2, 8004b32 <_printf_common+0x26>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	0699      	lsls	r1, r3, #26
 8004b36:	bf42      	ittt	mi
 8004b38:	6833      	ldrmi	r3, [r6, #0]
 8004b3a:	3302      	addmi	r3, #2
 8004b3c:	6033      	strmi	r3, [r6, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	f015 0506 	ands.w	r5, r5, #6
 8004b44:	d106      	bne.n	8004b54 <_printf_common+0x48>
 8004b46:	f104 0a19 	add.w	sl, r4, #25
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	6832      	ldr	r2, [r6, #0]
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dc26      	bgt.n	8004ba2 <_printf_common+0x96>
 8004b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b58:	1e13      	subs	r3, r2, #0
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	bf18      	it	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	0692      	lsls	r2, r2, #26
 8004b62:	d42b      	bmi.n	8004bbc <_printf_common+0xb0>
 8004b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d01e      	beq.n	8004bb0 <_printf_common+0xa4>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	68e5      	ldr	r5, [r4, #12]
 8004b76:	6832      	ldr	r2, [r6, #0]
 8004b78:	f003 0306 	and.w	r3, r3, #6
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	bf08      	it	eq
 8004b80:	1aad      	subeq	r5, r5, r2
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	6922      	ldr	r2, [r4, #16]
 8004b86:	bf0c      	ite	eq
 8004b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b8c:	2500      	movne	r5, #0
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bfc4      	itt	gt
 8004b92:	1a9b      	subgt	r3, r3, r2
 8004b94:	18ed      	addgt	r5, r5, r3
 8004b96:	2600      	movs	r6, #0
 8004b98:	341a      	adds	r4, #26
 8004b9a:	42b5      	cmp	r5, r6
 8004b9c:	d11a      	bne.n	8004bd4 <_printf_common+0xc8>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e008      	b.n	8004bb4 <_printf_common+0xa8>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4638      	mov	r0, r7
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d103      	bne.n	8004bb8 <_printf_common+0xac>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	3501      	adds	r5, #1
 8004bba:	e7c6      	b.n	8004b4a <_printf_common+0x3e>
 8004bbc:	18e1      	adds	r1, r4, r3
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	2030      	movs	r0, #48	; 0x30
 8004bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bc6:	4422      	add	r2, r4
 8004bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	e7c7      	b.n	8004b64 <_printf_common+0x58>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c0      	blx	r8
 8004bde:	3001      	adds	r0, #1
 8004be0:	d0e6      	beq.n	8004bb0 <_printf_common+0xa4>
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7d9      	b.n	8004b9a <_printf_common+0x8e>
	...

08004be8 <_printf_i>:
 8004be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	4691      	mov	r9, r2
 8004bf0:	7e27      	ldrb	r7, [r4, #24]
 8004bf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bf4:	2f78      	cmp	r7, #120	; 0x78
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	469a      	mov	sl, r3
 8004bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfe:	d807      	bhi.n	8004c10 <_printf_i+0x28>
 8004c00:	2f62      	cmp	r7, #98	; 0x62
 8004c02:	d80a      	bhi.n	8004c1a <_printf_i+0x32>
 8004c04:	2f00      	cmp	r7, #0
 8004c06:	f000 80d8 	beq.w	8004dba <_printf_i+0x1d2>
 8004c0a:	2f58      	cmp	r7, #88	; 0x58
 8004c0c:	f000 80a3 	beq.w	8004d56 <_printf_i+0x16e>
 8004c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c18:	e03a      	b.n	8004c90 <_printf_i+0xa8>
 8004c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c1e:	2b15      	cmp	r3, #21
 8004c20:	d8f6      	bhi.n	8004c10 <_printf_i+0x28>
 8004c22:	a001      	add	r0, pc, #4	; (adr r0, 8004c28 <_printf_i+0x40>)
 8004c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c11 	.word	0x08004c11
 8004c34:	08004c11 	.word	0x08004c11
 8004c38:	08004c11 	.word	0x08004c11
 8004c3c:	08004c11 	.word	0x08004c11
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004c11 	.word	0x08004c11
 8004c48:	08004c11 	.word	0x08004c11
 8004c4c:	08004c11 	.word	0x08004c11
 8004c50:	08004c11 	.word	0x08004c11
 8004c54:	08004da1 	.word	0x08004da1
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004d83 	.word	0x08004d83
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004c11 	.word	0x08004c11
 8004c68:	08004dc3 	.word	0x08004dc3
 8004c6c:	08004c11 	.word	0x08004c11
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004c11 	.word	0x08004c11
 8004c78:	08004c11 	.word	0x08004c11
 8004c7c:	08004d8b 	.word	0x08004d8b
 8004c80:	680b      	ldr	r3, [r1, #0]
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	600a      	str	r2, [r1, #0]
 8004c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0a3      	b.n	8004ddc <_printf_i+0x1f4>
 8004c94:	6825      	ldr	r5, [r4, #0]
 8004c96:	6808      	ldr	r0, [r1, #0]
 8004c98:	062e      	lsls	r6, r5, #24
 8004c9a:	f100 0304 	add.w	r3, r0, #4
 8004c9e:	d50a      	bpl.n	8004cb6 <_printf_i+0xce>
 8004ca0:	6805      	ldr	r5, [r0, #0]
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	da03      	bge.n	8004cb0 <_printf_i+0xc8>
 8004ca8:	232d      	movs	r3, #45	; 0x2d
 8004caa:	426d      	negs	r5, r5
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	485e      	ldr	r0, [pc, #376]	; (8004e2c <_printf_i+0x244>)
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	e019      	b.n	8004cea <_printf_i+0x102>
 8004cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cba:	6805      	ldr	r5, [r0, #0]
 8004cbc:	600b      	str	r3, [r1, #0]
 8004cbe:	bf18      	it	ne
 8004cc0:	b22d      	sxthne	r5, r5
 8004cc2:	e7ef      	b.n	8004ca4 <_printf_i+0xbc>
 8004cc4:	680b      	ldr	r3, [r1, #0]
 8004cc6:	6825      	ldr	r5, [r4, #0]
 8004cc8:	1d18      	adds	r0, r3, #4
 8004cca:	6008      	str	r0, [r1, #0]
 8004ccc:	0628      	lsls	r0, r5, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xec>
 8004cd0:	681d      	ldr	r5, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0xf2>
 8004cd4:	0669      	lsls	r1, r5, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xe8>
 8004cd8:	881d      	ldrh	r5, [r3, #0]
 8004cda:	4854      	ldr	r0, [pc, #336]	; (8004e2c <_printf_i+0x244>)
 8004cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8004cde:	bf0c      	ite	eq
 8004ce0:	2308      	moveq	r3, #8
 8004ce2:	230a      	movne	r3, #10
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cea:	6866      	ldr	r6, [r4, #4]
 8004cec:	60a6      	str	r6, [r4, #8]
 8004cee:	2e00      	cmp	r6, #0
 8004cf0:	bfa2      	ittt	ge
 8004cf2:	6821      	ldrge	r1, [r4, #0]
 8004cf4:	f021 0104 	bicge.w	r1, r1, #4
 8004cf8:	6021      	strge	r1, [r4, #0]
 8004cfa:	b90d      	cbnz	r5, 8004d00 <_printf_i+0x118>
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	d04d      	beq.n	8004d9c <_printf_i+0x1b4>
 8004d00:	4616      	mov	r6, r2
 8004d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d06:	fb03 5711 	mls	r7, r3, r1, r5
 8004d0a:	5dc7      	ldrb	r7, [r0, r7]
 8004d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d10:	462f      	mov	r7, r5
 8004d12:	42bb      	cmp	r3, r7
 8004d14:	460d      	mov	r5, r1
 8004d16:	d9f4      	bls.n	8004d02 <_printf_i+0x11a>
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d10b      	bne.n	8004d34 <_printf_i+0x14c>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07df      	lsls	r7, r3, #31
 8004d20:	d508      	bpl.n	8004d34 <_printf_i+0x14c>
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	4299      	cmp	r1, r3
 8004d28:	bfde      	ittt	le
 8004d2a:	2330      	movle	r3, #48	; 0x30
 8004d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d34:	1b92      	subs	r2, r2, r6
 8004d36:	6122      	str	r2, [r4, #16]
 8004d38:	f8cd a000 	str.w	sl, [sp]
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	aa03      	add	r2, sp, #12
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fee2 	bl	8004b0c <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d14c      	bne.n	8004de6 <_printf_i+0x1fe>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b004      	add	sp, #16
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	4835      	ldr	r0, [pc, #212]	; (8004e2c <_printf_i+0x244>)
 8004d58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	680e      	ldr	r6, [r1, #0]
 8004d60:	061f      	lsls	r7, r3, #24
 8004d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d66:	600e      	str	r6, [r1, #0]
 8004d68:	d514      	bpl.n	8004d94 <_printf_i+0x1ac>
 8004d6a:	07d9      	lsls	r1, r3, #31
 8004d6c:	bf44      	itt	mi
 8004d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d72:	6023      	strmi	r3, [r4, #0]
 8004d74:	b91d      	cbnz	r5, 8004d7e <_printf_i+0x196>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f023 0320 	bic.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	2310      	movs	r3, #16
 8004d80:	e7b0      	b.n	8004ce4 <_printf_i+0xfc>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f043 0320 	orr.w	r3, r3, #32
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	2378      	movs	r3, #120	; 0x78
 8004d8c:	4828      	ldr	r0, [pc, #160]	; (8004e30 <_printf_i+0x248>)
 8004d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d92:	e7e3      	b.n	8004d5c <_printf_i+0x174>
 8004d94:	065e      	lsls	r6, r3, #25
 8004d96:	bf48      	it	mi
 8004d98:	b2ad      	uxthmi	r5, r5
 8004d9a:	e7e6      	b.n	8004d6a <_printf_i+0x182>
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	e7bb      	b.n	8004d18 <_printf_i+0x130>
 8004da0:	680b      	ldr	r3, [r1, #0]
 8004da2:	6826      	ldr	r6, [r4, #0]
 8004da4:	6960      	ldr	r0, [r4, #20]
 8004da6:	1d1d      	adds	r5, r3, #4
 8004da8:	600d      	str	r5, [r1, #0]
 8004daa:	0635      	lsls	r5, r6, #24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	d501      	bpl.n	8004db4 <_printf_i+0x1cc>
 8004db0:	6018      	str	r0, [r3, #0]
 8004db2:	e002      	b.n	8004dba <_printf_i+0x1d2>
 8004db4:	0671      	lsls	r1, r6, #25
 8004db6:	d5fb      	bpl.n	8004db0 <_printf_i+0x1c8>
 8004db8:	8018      	strh	r0, [r3, #0]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	4616      	mov	r6, r2
 8004dc0:	e7ba      	b.n	8004d38 <_printf_i+0x150>
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	1d1a      	adds	r2, r3, #4
 8004dc6:	600a      	str	r2, [r1, #0]
 8004dc8:	681e      	ldr	r6, [r3, #0]
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7fb f9fe 	bl	80001d0 <memchr>
 8004dd4:	b108      	cbz	r0, 8004dda <_printf_i+0x1f2>
 8004dd6:	1b80      	subs	r0, r0, r6
 8004dd8:	6060      	str	r0, [r4, #4]
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	2300      	movs	r3, #0
 8004de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de4:	e7a8      	b.n	8004d38 <_printf_i+0x150>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	4632      	mov	r2, r6
 8004dea:	4649      	mov	r1, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	47d0      	blx	sl
 8004df0:	3001      	adds	r0, #1
 8004df2:	d0ab      	beq.n	8004d4c <_printf_i+0x164>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	079b      	lsls	r3, r3, #30
 8004df8:	d413      	bmi.n	8004e22 <_printf_i+0x23a>
 8004dfa:	68e0      	ldr	r0, [r4, #12]
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	4298      	cmp	r0, r3
 8004e00:	bfb8      	it	lt
 8004e02:	4618      	movlt	r0, r3
 8004e04:	e7a4      	b.n	8004d50 <_printf_i+0x168>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4632      	mov	r2, r6
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	47d0      	blx	sl
 8004e10:	3001      	adds	r0, #1
 8004e12:	d09b      	beq.n	8004d4c <_printf_i+0x164>
 8004e14:	3501      	adds	r5, #1
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	9903      	ldr	r1, [sp, #12]
 8004e1a:	1a5b      	subs	r3, r3, r1
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dcf2      	bgt.n	8004e06 <_printf_i+0x21e>
 8004e20:	e7eb      	b.n	8004dfa <_printf_i+0x212>
 8004e22:	2500      	movs	r5, #0
 8004e24:	f104 0619 	add.w	r6, r4, #25
 8004e28:	e7f5      	b.n	8004e16 <_printf_i+0x22e>
 8004e2a:	bf00      	nop
 8004e2c:	08005249 	.word	0x08005249
 8004e30:	0800525a 	.word	0x0800525a

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fc fe50 	bl	8001ae4 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000025c 	.word	0x2000025c

08004e54 <__sread>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	460c      	mov	r4, r1
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	f000 f960 	bl	8005120 <_read_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	bfab      	itete	ge
 8004e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e66:	89a3      	ldrhlt	r3, [r4, #12]
 8004e68:	181b      	addge	r3, r3, r0
 8004e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e6e:	bfac      	ite	ge
 8004e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e72:	81a3      	strhlt	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__swrite>:
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	898b      	ldrh	r3, [r1, #12]
 8004e7e:	05db      	lsls	r3, r3, #23
 8004e80:	4605      	mov	r5, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4616      	mov	r6, r2
 8004e86:	d505      	bpl.n	8004e94 <__swrite+0x1e>
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f000 f928 	bl	80050e4 <_lseek_r>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	f000 b869 	b.w	8004f80 <_write_r>

08004eae <__sseek>:
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 f915 	bl	80050e4 <_lseek_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	bf15      	itete	ne
 8004ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eca:	81a3      	strheq	r3, [r4, #12]
 8004ecc:	bf18      	it	ne
 8004ece:	81a3      	strhne	r3, [r4, #12]
 8004ed0:	bd10      	pop	{r4, pc}

08004ed2 <__sclose>:
 8004ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed6:	f000 b8d3 	b.w	8005080 <_close_r>
	...

08004edc <__swbuf_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	460e      	mov	r6, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	b118      	cbz	r0, 8004eee <__swbuf_r+0x12>
 8004ee6:	6983      	ldr	r3, [r0, #24]
 8004ee8:	b90b      	cbnz	r3, 8004eee <__swbuf_r+0x12>
 8004eea:	f7ff faff 	bl	80044ec <__sinit>
 8004eee:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <__swbuf_r+0x98>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d12b      	bne.n	8004f4c <__swbuf_r+0x70>
 8004ef4:	686c      	ldr	r4, [r5, #4]
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	071a      	lsls	r2, r3, #28
 8004efe:	d52f      	bpl.n	8004f60 <__swbuf_r+0x84>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	b36b      	cbz	r3, 8004f60 <__swbuf_r+0x84>
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	1ac0      	subs	r0, r0, r3
 8004f0a:	6963      	ldr	r3, [r4, #20]
 8004f0c:	b2f6      	uxtb	r6, r6
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	4637      	mov	r7, r6
 8004f12:	dc04      	bgt.n	8004f1e <__swbuf_r+0x42>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff fa54 	bl	80043c4 <_fflush_r>
 8004f1c:	bb30      	cbnz	r0, 8004f6c <__swbuf_r+0x90>
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60a3      	str	r3, [r4, #8]
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	701e      	strb	r6, [r3, #0]
 8004f2c:	6963      	ldr	r3, [r4, #20]
 8004f2e:	3001      	adds	r0, #1
 8004f30:	4283      	cmp	r3, r0
 8004f32:	d004      	beq.n	8004f3e <__swbuf_r+0x62>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	07db      	lsls	r3, r3, #31
 8004f38:	d506      	bpl.n	8004f48 <__swbuf_r+0x6c>
 8004f3a:	2e0a      	cmp	r6, #10
 8004f3c:	d104      	bne.n	8004f48 <__swbuf_r+0x6c>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fa3f 	bl	80043c4 <_fflush_r>
 8004f46:	b988      	cbnz	r0, 8004f6c <__swbuf_r+0x90>
 8004f48:	4638      	mov	r0, r7
 8004f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <__swbuf_r+0x9c>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d101      	bne.n	8004f56 <__swbuf_r+0x7a>
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	e7cf      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <__swbuf_r+0xa0>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	bf08      	it	eq
 8004f5c:	68ec      	ldreq	r4, [r5, #12]
 8004f5e:	e7ca      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f81e 	bl	8004fa4 <__swsetup_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d0cb      	beq.n	8004f04 <__swbuf_r+0x28>
 8004f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f70:	e7ea      	b.n	8004f48 <__swbuf_r+0x6c>
 8004f72:	bf00      	nop
 8004f74:	080051f8 	.word	0x080051f8
 8004f78:	08005218 	.word	0x08005218
 8004f7c:	080051d8 	.word	0x080051d8

08004f80 <_write_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d07      	ldr	r5, [pc, #28]	; (8004fa0 <_write_r+0x20>)
 8004f84:	4604      	mov	r4, r0
 8004f86:	4608      	mov	r0, r1
 8004f88:	4611      	mov	r1, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	602a      	str	r2, [r5, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7fc fc0a 	bl	80017a8 <_write>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_write_r+0x1e>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_write_r+0x1e>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	2000025c 	.word	0x2000025c

08004fa4 <__swsetup_r>:
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <__swsetup_r+0xcc>)
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	4606      	mov	r6, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	b125      	cbz	r5, 8004fba <__swsetup_r+0x16>
 8004fb0:	69ab      	ldr	r3, [r5, #24]
 8004fb2:	b913      	cbnz	r3, 8004fba <__swsetup_r+0x16>
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f7ff fa99 	bl	80044ec <__sinit>
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <__swsetup_r+0xd0>)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d10f      	bne.n	8004fe0 <__swsetup_r+0x3c>
 8004fc0:	686c      	ldr	r4, [r5, #4]
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fc8:	0719      	lsls	r1, r3, #28
 8004fca:	d42c      	bmi.n	8005026 <__swsetup_r+0x82>
 8004fcc:	06dd      	lsls	r5, r3, #27
 8004fce:	d411      	bmi.n	8004ff4 <__swsetup_r+0x50>
 8004fd0:	2309      	movs	r3, #9
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	f04f 30ff 	mov.w	r0, #4294967295
 8004fde:	e03e      	b.n	800505e <__swsetup_r+0xba>
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <__swsetup_r+0xd4>)
 8004fe2:	429c      	cmp	r4, r3
 8004fe4:	d101      	bne.n	8004fea <__swsetup_r+0x46>
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	e7eb      	b.n	8004fc2 <__swsetup_r+0x1e>
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <__swsetup_r+0xd8>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	bf08      	it	eq
 8004ff0:	68ec      	ldreq	r4, [r5, #12]
 8004ff2:	e7e6      	b.n	8004fc2 <__swsetup_r+0x1e>
 8004ff4:	0758      	lsls	r0, r3, #29
 8004ff6:	d512      	bpl.n	800501e <__swsetup_r+0x7a>
 8004ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffa:	b141      	cbz	r1, 800500e <__swsetup_r+0x6a>
 8004ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005000:	4299      	cmp	r1, r3
 8005002:	d002      	beq.n	800500a <__swsetup_r+0x66>
 8005004:	4630      	mov	r0, r6
 8005006:	f7ff fb7d 	bl	8004704 <_free_r>
 800500a:	2300      	movs	r3, #0
 800500c:	6363      	str	r3, [r4, #52]	; 0x34
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	2300      	movs	r3, #0
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f043 0308 	orr.w	r3, r3, #8
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	b94b      	cbnz	r3, 800503e <__swsetup_r+0x9a>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005034:	d003      	beq.n	800503e <__swsetup_r+0x9a>
 8005036:	4621      	mov	r1, r4
 8005038:	4630      	mov	r0, r6
 800503a:	f7ff fb1b 	bl	8004674 <__smakebuf_r>
 800503e:	89a0      	ldrh	r0, [r4, #12]
 8005040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005044:	f010 0301 	ands.w	r3, r0, #1
 8005048:	d00a      	beq.n	8005060 <__swsetup_r+0xbc>
 800504a:	2300      	movs	r3, #0
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	425b      	negs	r3, r3
 8005052:	61a3      	str	r3, [r4, #24]
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	b943      	cbnz	r3, 800506a <__swsetup_r+0xc6>
 8005058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800505c:	d1ba      	bne.n	8004fd4 <__swsetup_r+0x30>
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	0781      	lsls	r1, r0, #30
 8005062:	bf58      	it	pl
 8005064:	6963      	ldrpl	r3, [r4, #20]
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	e7f4      	b.n	8005054 <__swsetup_r+0xb0>
 800506a:	2000      	movs	r0, #0
 800506c:	e7f7      	b.n	800505e <__swsetup_r+0xba>
 800506e:	bf00      	nop
 8005070:	20000024 	.word	0x20000024
 8005074:	080051f8 	.word	0x080051f8
 8005078:	08005218 	.word	0x08005218
 800507c:	080051d8 	.word	0x080051d8

08005080 <_close_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d06      	ldr	r5, [pc, #24]	; (800509c <_close_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fc fbb8 	bl	8001800 <_close>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_close_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_close_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	2000025c 	.word	0x2000025c

080050a0 <_fstat_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4d07      	ldr	r5, [pc, #28]	; (80050c0 <_fstat_r+0x20>)
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	f7fc fbf7 	bl	80018a0 <_fstat>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d102      	bne.n	80050bc <_fstat_r+0x1c>
 80050b6:	682b      	ldr	r3, [r5, #0]
 80050b8:	b103      	cbz	r3, 80050bc <_fstat_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	2000025c 	.word	0x2000025c

080050c4 <_isatty_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4d06      	ldr	r5, [pc, #24]	; (80050e0 <_isatty_r+0x1c>)
 80050c8:	2300      	movs	r3, #0
 80050ca:	4604      	mov	r4, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	602b      	str	r3, [r5, #0]
 80050d0:	f7fc fb54 	bl	800177c <_isatty>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d102      	bne.n	80050de <_isatty_r+0x1a>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	b103      	cbz	r3, 80050de <_isatty_r+0x1a>
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	bd38      	pop	{r3, r4, r5, pc}
 80050e0:	2000025c 	.word	0x2000025c

080050e4 <_lseek_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d07      	ldr	r5, [pc, #28]	; (8005104 <_lseek_r+0x20>)
 80050e8:	4604      	mov	r4, r0
 80050ea:	4608      	mov	r0, r1
 80050ec:	4611      	mov	r1, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	602a      	str	r2, [r5, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f7fc fb9b 	bl	800182e <_lseek>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_lseek_r+0x1e>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_lseek_r+0x1e>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	2000025c 	.word	0x2000025c

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f7ff ba8d 	b.w	8004628 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	20000254 	.word	0x20000254

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f7ff ba88 	b.w	800462a <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	20000254 	.word	0x20000254

08005120 <_read_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d07      	ldr	r5, [pc, #28]	; (8005140 <_read_r+0x20>)
 8005124:	4604      	mov	r4, r0
 8005126:	4608      	mov	r0, r1
 8005128:	4611      	mov	r1, r2
 800512a:	2200      	movs	r2, #0
 800512c:	602a      	str	r2, [r5, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	f7fc fb8e 	bl	8001850 <_read>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_read_r+0x1e>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_read_r+0x1e>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	2000025c 	.word	0x2000025c

08005144 <lroundf>:
 8005144:	ee10 3a10 	vmov	r3, s0
 8005148:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8005152:	bfb4      	ite	lt
 8005154:	f04f 30ff 	movlt.w	r0, #4294967295
 8005158:	2001      	movge	r0, #1
 800515a:	291e      	cmp	r1, #30
 800515c:	b510      	push	{r4, lr}
 800515e:	dc18      	bgt.n	8005192 <lroundf+0x4e>
 8005160:	2900      	cmp	r1, #0
 8005162:	da03      	bge.n	800516c <lroundf+0x28>
 8005164:	3101      	adds	r1, #1
 8005166:	bf18      	it	ne
 8005168:	2000      	movne	r0, #0
 800516a:	bd10      	pop	{r4, pc}
 800516c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005170:	2916      	cmp	r1, #22
 8005172:	f443 0400 	orr.w	r4, r3, #8388608	; 0x800000
 8005176:	bfdd      	ittte	le
 8005178:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800517c:	410b      	asrle	r3, r1
 800517e:	191b      	addle	r3, r3, r4
 8005180:	3a96      	subgt	r2, #150	; 0x96
 8005182:	bfd6      	itet	le
 8005184:	f1c1 0117 	rsble	r1, r1, #23
 8005188:	fa04 f302 	lslgt.w	r3, r4, r2
 800518c:	40cb      	lsrle	r3, r1
 800518e:	4358      	muls	r0, r3
 8005190:	e7eb      	b.n	800516a <lroundf+0x26>
 8005192:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005196:	ee17 0a90 	vmov	r0, s15
 800519a:	e7e6      	b.n	800516a <lroundf+0x26>

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
