
hs2-gpr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08006c40  08006c40  00016c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a4  080072a4  000209f4  2**0
                  CONTENTS
  4 .ARM          00000008  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072ac  080072ac  000209f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072b0  080072b0  000172b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009f4  20000000  080072b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200009f4  08007ca8  000209f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd0  08007ca8  00020bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d428  00000000  00000000  00020a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5f  00000000  00000000  0002de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221e0  00000000  00000000  00030bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4cf  00000000  00000000  00052db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70ef  00000000  00000000  0005e287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000350c  00000000  00000000  001253cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001288d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00128914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009f4 	.word	0x200009f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c28 	.word	0x08006c28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009f8 	.word	0x200009f8
 80001cc:	08006c28 	.word	0x08006c28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AD9910_Init>:
#define DEBUG_PRINTING

//Addresses ---------------0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,10,11,12,13,14,15,16
static uint8_t nbytes[] = {4,4,4,4,4,4,4,4,2,4,4,8,8,4,8,8,8, 8, 8, 8, 8, 8, 4}; //register lengths in bytes

state AD9910_Init(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET); //deselect SPI
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	482f      	ldr	r0, [pc, #188]	; (8000f68 <AD9910_Init+0xc8>)
 8000eac:	f001 fab0 	bl	8002410 <HAL_GPIO_WritePin>

	#ifdef DEBUG_PRINTING
	printf("Initializing AD9910\n\r");
 8000eb0:	482e      	ldr	r0, [pc, #184]	; (8000f6c <AD9910_Init+0xcc>)
 8000eb2:	f003 fd37 	bl	8004924 <iprintf>
	#endif

	state rs = PASS;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_Reset(); //reset the AD9910
 8000eba:	f000 f9df 	bl	800127c <AD9910_Reset>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR1, (SDIO_INPUT_ONLY));
 8000ec8:	f04f 0202 	mov.w	r2, #2
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f9ed 	bl	80012b0 <AD9910_WriteReg>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000ee0:	f000 facc 	bl	800147c <AD9910_IO_Update>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR2, (SYNC_TIM_V_DIS | A_FROM_STP));
 8000eee:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <AD9910_Init+0xd0>)
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 f9db 	bl	80012b0 <AD9910_WriteReg>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000f04:	f000 faba 	bl	800147c <AD9910_IO_Update>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_WriteReg(CFR3, (VCO5 | CP_387 | INP_DIV_RST | PLL_EN | (PLL_MULT << 1))); //refclk off
 8000f12:	a313      	add	r3, pc, #76	; (adr r3, 8000f60 <AD9910_Init+0xc0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f000 f9c9 	bl	80012b0 <AD9910_WriteReg>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_IO_Update();
 8000f28:	f000 faa8 	bl	800147c <AD9910_IO_Update>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]

	rs |= AD9910_SetProfile(PF0); //set profile
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 fabc 	bl	80014b4 <AD9910_SetProfile>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(AD9910_TXE_GPIO_Port, AD9910_TXE_Pin, GPIO_PIN_SET);  //enable TX
 8000f46:	2201      	movs	r2, #1
 8000f48:	2110      	movs	r1, #16
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <AD9910_Init+0xd4>)
 8000f4c:	f001 fa60 	bl	8002410 <HAL_GPIO_WritePin>

	return rs;
 8000f50:	79fb      	ldrb	r3, [r7, #7]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	f3af 8000 	nop.w
 8000f60:	05384150 	.word	0x05384150
 8000f64:	00000000 	.word	0x00000000
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	08006c40 	.word	0x08006c40
 8000f70:	01000020 	.word	0x01000020
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <AD9910_StartRAMRamp>:

state AD9910_StartRAMRamp(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	#ifdef DEBUG_PRINTING
	printf("Starting a RAM Ramp\n\r");
 8000f7e:	481f      	ldr	r0, [pc, #124]	; (8000ffc <AD9910_StartRAMRamp+0x84>)
 8000f80:	f003 fcd0 	bl	8004924 <iprintf>
	#endif

	state rs = PASS;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]
	rs |= AD9910_SetProfile(PF0); 	//set the profile to PF0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fa93 	bl	80014b4 <AD9910_SetProfile>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	71fb      	strb	r3, [r7, #7]
	//enable the RAM
	uint32_t cfr1 = AD9910_ReadReg32(CFR1);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fa1b 	bl	80013d4 <AD9910_ReadReg32>
 8000f9e:	6038      	str	r0, [r7, #0]
	rs |= AD9910_WriteReg(CFR1, (cfr1 | RAM_ENABLE));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 f97f 	bl	80012b0 <AD9910_WriteReg>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET); //let the system know we're about to ramp
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <AD9910_StartRAMRamp+0x88>)
 8000fc2:	f001 fa25 	bl	8002410 <HAL_GPIO_WritePin>
	rs |= AD9910_IO_Update(); //this causes the ramp to start
 8000fc6:	f000 fa59 	bl	800147c <AD9910_IO_Update>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(AD9910_RSOVER_GPIO_Port, AD9910_RSOVER_Pin)); //wait for ramp to finish
 8000fd4:	bf00      	nop
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <AD9910_StartRAMRamp+0x8c>)
 8000fdc:	f001 fa00 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f7      	beq.n	8000fd6 <AD9910_StartRAMRamp+0x5e>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <AD9910_StartRAMRamp+0x88>)
 8000fec:	f001 fa10 	bl	8002410 <HAL_GPIO_WritePin>

	return rs;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	08006c58 	.word	0x08006c58
 8001000:	40021000 	.word	0x40021000
 8001004:	40020000 	.word	0x40020000

08001008 <AD9910_ConfigureRAM>:

//loads the predistorted Hann window into RAM, and sets up the RAM for playback
state AD9910_ConfigureRAM(float ramptime){
 8001008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800100c:	b088      	sub	sp, #32
 800100e:	af00      	add	r7, sp, #0
 8001010:	ed87 0a01 	vstr	s0, [r7, #4]
	#ifdef DEBUG_PRINTING
	printf("Configuring RAM with a %f second predistorted Hann window\n\r", ramptime);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	486d      	ldr	r0, [pc, #436]	; (80011d4 <AD9910_ConfigureRAM+0x1cc>)
 8001020:	f003 fc80 	bl	8004924 <iprintf>
	#endif

	state rs= PASS;
 8001024:	2300      	movs	r3, #0
 8001026:	75fb      	strb	r3, [r7, #23]
	AD9910_SetProfile(PF0); //Set the profile to something that isn't PF0 //TODO - is this necessary?
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fa43 	bl	80014b4 <AD9910_SetProfile>

	//calculate the address step rate
	uint16_t M0 = (ramptime / RAM_LENGTH) * FSYSCLK / 4;
 800102e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001032:	eddf 6a69 	vldr	s13, [pc, #420]	; 80011d8 <AD9910_ConfigureRAM+0x1d0>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80011dc <AD9910_ConfigureRAM+0x1d4>
 800103e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001042:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104e:	ee17 3a90 	vmov	r3, s15
 8001052:	83fb      	strh	r3, [r7, #30]
	uint16_t pf_end_addr = RAM_LENGTH-1;
 8001054:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001058:	83bb      	strh	r3, [r7, #28]

	if(M0 < 1) {  //not enough time to step through the whole RAM
 800105a:	8bfb      	ldrh	r3, [r7, #30]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10c      	bne.n	800107a <AD9910_ConfigureRAM+0x72>
		M0 = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	83fb      	strh	r3, [r7, #30]
		pf_end_addr = (uint16_t) (ramptime * (FSYSCLK / 4));
 8001064:	edd7 7a01 	vldr	s15, [r7, #4]
 8001068:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80011e0 <AD9910_ConfigureRAM+0x1d8>
 800106c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	83bb      	strh	r3, [r7, #28]
	}

	#ifdef DEBUG_PRINTING
	printf("\tAddress Step Rate: %d\n\r\tAddress Range: 0 to %d\n\r", M0, pf_end_addr);
 800107a:	8bfb      	ldrh	r3, [r7, #30]
 800107c:	8bba      	ldrh	r2, [r7, #28]
 800107e:	4619      	mov	r1, r3
 8001080:	4858      	ldr	r0, [pc, #352]	; (80011e4 <AD9910_ConfigureRAM+0x1dc>)
 8001082:	f003 fc4f 	bl	8004924 <iprintf>
	#endif

	//program RP0, addresses span the entire RAM, ramp-up mode, no zero crossing, dwell-high
	rs |= AD9910_WriteReg(RP0, ((((uint64_t) M0) << 40) | (((uint64_t) pf_end_addr) << 30) | RPMC_RAMP_UP));
 8001086:	8bf8      	ldrh	r0, [r7, #30]
 8001088:	f04f 0100 	mov.w	r1, #0
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	0203      	lsls	r3, r0, #8
 8001096:	2200      	movs	r2, #0
 8001098:	8bb8      	ldrh	r0, [r7, #28]
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	ea4f 0990 	mov.w	r9, r0, lsr #2
 80010a2:	ea4f 7880 	mov.w	r8, r0, lsl #30
 80010a6:	ea42 0408 	orr.w	r4, r2, r8
 80010aa:	ea43 0509 	orr.w	r5, r3, r9
 80010ae:	f04f 0201 	mov.w	r2, #1
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	ea44 0a02 	orr.w	sl, r4, r2
 80010ba:	ea45 0b03 	orr.w	fp, r5, r3
 80010be:	4652      	mov	r2, sl
 80010c0:	465b      	mov	r3, fp
 80010c2:	200e      	movs	r0, #14
 80010c4:	f000 f8f4 	bl	80012b0 <AD9910_WriteReg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	75fb      	strb	r3, [r7, #23]

	rs |= AD9910_IO_Update(); //TODO do I want this here?
 80010d2:	f000 f9d3 	bl	800147c <AD9910_IO_Update>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	4313      	orrs	r3, r2
 80010de:	75fb      	strb	r3, [r7, #23]

	//fill in the RAM
	uint8_t ram_addr = RAM;
 80010e0:	2316      	movs	r3, #22
 80010e2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	483f      	ldr	r0, [pc, #252]	; (80011e8 <AD9910_ConfigureRAM+0x1e0>)
 80010ea:	f001 f991 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &ram_addr, 1, HAL_MAX_DELAY);
 80010ee:	f107 010f 	add.w	r1, r7, #15
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2201      	movs	r2, #1
 80010f8:	483c      	ldr	r0, [pc, #240]	; (80011ec <AD9910_ConfigureRAM+0x1e4>)
 80010fa:	f001 fea0 	bl	8002e3e <HAL_SPI_Transmit>
	for(int i = 0; i < RAM_LENGTH; i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	e035      	b.n	8001170 <AD9910_ConfigureRAM+0x168>
		uint8_t byte1 = (window[i] >> 6) & 0xFF;
 8001104:	4a3a      	ldr	r2, [pc, #232]	; (80011f0 <AD9910_ConfigureRAM+0x1e8>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	b29b      	uxth	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73bb      	strb	r3, [r7, #14]
		uint8_t byte2 = (window[i] << 2) & 0xFF;
 8001114:	4a36      	ldr	r2, [pc, #216]	; (80011f0 <AD9910_ConfigureRAM+0x1e8>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	b2db      	uxtb	r3, r3
 8001120:	737b      	strb	r3, [r7, #13]
		uint8_t byte3 = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	733b      	strb	r3, [r7, #12]
		uint8_t byte4 = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	72fb      	strb	r3, [r7, #11]
		HAL_SPI_Transmit(&hspi2, &byte1, 1, HAL_MAX_DELAY);
 800112a:	f107 010e 	add.w	r1, r7, #14
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	2201      	movs	r2, #1
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <AD9910_ConfigureRAM+0x1e4>)
 8001136:	f001 fe82 	bl	8002e3e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &byte2, 1, HAL_MAX_DELAY);
 800113a:	f107 010d 	add.w	r1, r7, #13
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	2201      	movs	r2, #1
 8001144:	4829      	ldr	r0, [pc, #164]	; (80011ec <AD9910_ConfigureRAM+0x1e4>)
 8001146:	f001 fe7a 	bl	8002e3e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &byte3, 1, HAL_MAX_DELAY);
 800114a:	f107 010c 	add.w	r1, r7, #12
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2201      	movs	r2, #1
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <AD9910_ConfigureRAM+0x1e4>)
 8001156:	f001 fe72 	bl	8002e3e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &byte4, 1, HAL_MAX_DELAY);
 800115a:	f107 010b 	add.w	r1, r7, #11
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <AD9910_ConfigureRAM+0x1e4>)
 8001166:	f001 fe6a 	bl	8002e3e <HAL_SPI_Transmit>
	for(int i = 0; i < RAM_LENGTH; i++){
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	3301      	adds	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001176:	dbc5      	blt.n	8001104 <AD9910_ConfigureRAM+0xfc>
	}
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	481a      	ldr	r0, [pc, #104]	; (80011e8 <AD9910_ConfigureRAM+0x1e0>)
 800117e:	f001 f947 	bl	8002410 <HAL_GPIO_WritePin>

	rs |= AD9910_IO_Update();
 8001182:	f000 f97b 	bl	800147c <AD9910_IO_Update>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	4313      	orrs	r3, r2
 800118e:	75fb      	strb	r3, [r7, #23]

	//set the RAM destination to amplitude
	uint32_t cfr1 = AD9910_ReadReg32(CFR1);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f91f 	bl	80013d4 <AD9910_ReadReg32>
 8001196:	6138      	str	r0, [r7, #16]
	rs |= AD9910_WriteReg(CFR1, ((cfr1 & ~(0b11 << 29)) | RAM_DEST_AMP));
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800119e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011a2:	461a      	mov	r2, r3
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f881 	bl	80012b0 <AD9910_WriteReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	75fb      	strb	r3, [r7, #23]
	rs |= AD9910_IO_Update();
 80011b8:	f000 f960 	bl	800147c <AD9910_IO_Update>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	75fb      	strb	r3, [r7, #23]

	return rs;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011d2:	bf00      	nop
 80011d4:	08006c70 	.word	0x08006c70
 80011d8:	44800000 	.word	0x44800000
 80011dc:	4e6e6b28 	.word	0x4e6e6b28
 80011e0:	4d6e6b28 	.word	0x4d6e6b28
 80011e4:	08006cac 	.word	0x08006cac
 80011e8:	40020800 	.word	0x40020800
 80011ec:	20000a1c 	.word	0x20000a1c
 80011f0:	20000000 	.word	0x20000000

080011f4 <AD9910_ConfigureDefaultFreq>:

state AD9910_ConfigureDefaultFreq(float frequency){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	ed87 0a01 	vstr	s0, [r7, #4]
	#ifdef DEBUG_PRINTING
	printf("Setting up defaults with %fHz\n\r", frequency);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <AD9910_ConfigureDefaultFreq+0x78>)
 800120a:	f003 fb8b 	bl	8004924 <iprintf>
	#endif

	//TODO, check bounds for frequency and amplitude
	state rs = PASS;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
	uint32_t ftw = FREQ_TO_FTW(frequency);                             //compute the frequency tuning word
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001270 <AD9910_ConfigureDefaultFreq+0x7c>
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001274 <AD9910_ConfigureDefaultFreq+0x80>
 8001222:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	f005 fcbf 	bl	8006bac <lroundf>
 800122e:	4603      	mov	r3, r0
 8001230:	60bb      	str	r3, [r7, #8]

	#ifdef DEBUG_PRINTING
	printf("\tFTW: %d\n\r",(int) ftw);
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4619      	mov	r1, r3
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <AD9910_ConfigureDefaultFreq+0x84>)
 8001238:	f003 fb74 	bl	8004924 <iprintf>
	#endif

	rs |= AD9910_WriteReg(FTW, ftw);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	461a      	mov	r2, r3
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	2007      	movs	r0, #7
 8001246:	f000 f833 	bl	80012b0 <AD9910_WriteReg>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	4313      	orrs	r3, r2
 8001252:	73fb      	strb	r3, [r7, #15]
	rs |= AD9910_IO_Update(); //issue an IO update to latch the data
 8001254:	f000 f912 	bl	800147c <AD9910_IO_Update>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4313      	orrs	r3, r2
 8001260:	73fb      	strb	r3, [r7, #15]

	return rs;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08006ce0 	.word	0x08006ce0
 8001270:	4f800000 	.word	0x4f800000
 8001274:	4e6e6b28 	.word	0x4e6e6b28
 8001278:	08006d00 	.word	0x08006d00

0800127c <AD9910_Reset>:
	rs |= AD9910_SetProfile(profile); //set profile

	return rs;
}

state AD9910_Reset(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	#ifdef DEBUG_PRINTING
	printf("AD9910 Master Reset\n\r");
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <AD9910_Reset+0x2c>)
 8001282:	f003 fb4f 	bl	8004924 <iprintf>
	#endif

	HAL_GPIO_WritePin(AD9910_RST_GPIO_Port, AD9910_RST_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <AD9910_Reset+0x30>)
 800128c:	f001 f8c0 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f000 fdff 	bl	8001e94 <HAL_Delay>
	HAL_GPIO_WritePin(AD9910_RST_GPIO_Port, AD9910_RST_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <AD9910_Reset+0x30>)
 800129c:	f001 f8b8 	bl	8002410 <HAL_GPIO_WritePin>
	return PASS;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08006df0 	.word	0x08006df0
 80012ac:	40020800 	.word	0x40020800

080012b0 <AD9910_WriteReg>:

state AD9910_WriteReg(uint8_t reg, uint64_t value){
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	b088      	sub	sp, #32
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4601      	mov	r1, r0
 80012ba:	e9c7 2300 	strd	r2, r3, [r7]
 80012be:	460b      	mov	r3, r1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	466b      	mov	r3, sp
 80012c4:	4698      	mov	r8, r3

	#ifdef DEBUG_PRINTING
	printf("Writing value  0x%x%x to register 0x%x\n\r", (unsigned int) (value >> 32), (unsigned int) (value & 0xFFFFFFFF), (unsigned int) reg);
 80012c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	000a      	movs	r2, r1
 80012d4:	2300      	movs	r3, #0
 80012d6:	4611      	mov	r1, r2
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4839      	ldr	r0, [pc, #228]	; (80013c4 <AD9910_WriteReg+0x114>)
 80012de:	f003 fb21 	bl	8004924 <iprintf>
	#endif

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4838      	ldr	r0, [pc, #224]	; (80013c8 <AD9910_WriteReg+0x118>)
 80012e8:	f001 f892 	bl	8002410 <HAL_GPIO_WritePin>
	uint8_t payloadsize = nbytes[reg];
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <AD9910_WriteReg+0x11c>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	76fb      	strb	r3, [r7, #27]
	uint8_t packet[payloadsize + 1];
 80012f4:	7efb      	ldrb	r3, [r7, #27]
 80012f6:	1c5e      	adds	r6, r3, #1
 80012f8:	1e73      	subs	r3, r6, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	4633      	mov	r3, r6
 80012fe:	4618      	mov	r0, r3
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	00cb      	lsls	r3, r1, #3
 800130e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001312:	00c2      	lsls	r2, r0, #3
 8001314:	4633      	mov	r3, r6
 8001316:	4618      	mov	r0, r3
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	00cb      	lsls	r3, r1, #3
 8001326:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800132a:	00c2      	lsls	r2, r0, #3
 800132c:	4633      	mov	r3, r6
 800132e:	3307      	adds	r3, #7
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	ebad 0d03 	sub.w	sp, sp, r3
 8001338:	466b      	mov	r3, sp
 800133a:	3300      	adds	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
	packet[0] = reg;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < payloadsize; i++){ 				//fill the packet
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e01c      	b.n	8001384 <AD9910_WriteReg+0xd4>
		packet[i+1] = ((value >> ((payloadsize - 1 - i) * 8)) & 0xFF);
 800134a:	7efb      	ldrb	r3, [r7, #27]
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	00d9      	lsls	r1, r3, #3
 8001354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001358:	f1c1 0620 	rsb	r6, r1, #32
 800135c:	f1a1 0020 	sub.w	r0, r1, #32
 8001360:	fa22 f401 	lsr.w	r4, r2, r1
 8001364:	fa03 f606 	lsl.w	r6, r3, r6
 8001368:	4334      	orrs	r4, r6
 800136a:	fa23 f000 	lsr.w	r0, r3, r0
 800136e:	4304      	orrs	r4, r0
 8001370:	fa23 f501 	lsr.w	r5, r3, r1
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	b2e1      	uxtb	r1, r4
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < payloadsize; i++){ 				//fill the packet
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbde      	blt.n	800134a <AD9910_WriteReg+0x9a>
	}

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <AD9910_WriteReg+0x118>)
 8001392:	f001 f83d 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, packet, payloadsize + 1, HAL_MAX_DELAY);
 8001396:	6939      	ldr	r1, [r7, #16]
 8001398:	7efb      	ldrb	r3, [r7, #27]
 800139a:	b29b      	uxth	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <AD9910_WriteReg+0x120>)
 80013a6:	f001 fd4a 	bl	8002e3e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <AD9910_WriteReg+0x118>)
 80013b0:	f001 f82e 	bl	8002410 <HAL_GPIO_WritePin>
//
//	#ifdef DEBUG_PRINTING
//	printf("\tWrite pass\n\r");
//	#endif

	return PASS;
 80013b4:	2300      	movs	r3, #0
 80013b6:	46c5      	mov	sp, r8
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c2:	bf00      	nop
 80013c4:	08006e08 	.word	0x08006e08
 80013c8:	40020800 	.word	0x40020800
 80013cc:	20000800 	.word	0x20000800
 80013d0:	20000a1c 	.word	0x20000a1c

080013d4 <AD9910_ReadReg32>:
	#endif

	return result;
}

uint32_t AD9910_ReadReg32(uint8_t reg){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	#ifdef DEBUG_PRINTING
	printf("Reading from register 0x%x, ", reg);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <AD9910_ReadReg32+0x94>)
 80013e4:	f003 fa9e 	bl	8004924 <iprintf>
	#endif

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	481f      	ldr	r0, [pc, #124]	; (800146c <AD9910_ReadReg32+0x98>)
 80013ee:	f001 f80f 	bl	8002410 <HAL_GPIO_WritePin>

	if(nbytes[reg] != 4) return FAIL;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <AD9910_ReadReg32+0x9c>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d001      	beq.n	8001400 <AD9910_ReadReg32+0x2c>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e02e      	b.n	800145e <AD9910_ReadReg32+0x8a>
	uint8_t res[4];
	uint8_t readreg = reg | 0x80;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001406:	b2db      	uxtb	r3, r3
 8001408:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <AD9910_ReadReg32+0x98>)
 8001410:	f000 fffe 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &readreg, 1, HAL_MAX_DELAY);
 8001414:	f107 010f 	add.w	r1, r7, #15
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	2201      	movs	r2, #1
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <AD9910_ReadReg32+0xa0>)
 8001420:	f001 fd0d 	bl	8002e3e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, res, 4, HAL_MAX_DELAY);
 8001424:	f107 0110 	add.w	r1, r7, #16
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2204      	movs	r2, #4
 800142e:	4811      	ldr	r0, [pc, #68]	; (8001474 <AD9910_ReadReg32+0xa0>)
 8001430:	f001 fe41 	bl	80030b6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(AD9910_CS_GPIO_Port, AD9910_CS_Pin, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <AD9910_ReadReg32+0x98>)
 800143a:	f000 ffe9 	bl	8002410 <HAL_GPIO_WritePin>

	uint32_t result = ((uint32_t) res[0] << 24 |
 800143e:	7c3b      	ldrb	r3, [r7, #16]
 8001440:	061a      	lsls	r2, r3, #24
			(uint32_t) res[1] << 16 |
 8001442:	7c7b      	ldrb	r3, [r7, #17]
 8001444:	041b      	lsls	r3, r3, #16
	uint32_t result = ((uint32_t) res[0] << 24 |
 8001446:	431a      	orrs	r2, r3
			(uint32_t) res[2] << 8 |
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	021b      	lsls	r3, r3, #8
			(uint32_t) res[1] << 16 |
 800144c:	4313      	orrs	r3, r2
			(uint32_t) res[3]);
 800144e:	7cfa      	ldrb	r2, [r7, #19]
	uint32_t result = ((uint32_t) res[0] << 24 |
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]

	#ifdef DEBUG_PRINTING
	printf("Result: 0x%x\n\r", (unsigned int) result);
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <AD9910_ReadReg32+0xa4>)
 8001458:	f003 fa64 	bl	8004924 <iprintf>
	#endif

	return result;
 800145c:	697b      	ldr	r3, [r7, #20]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	08006e34 	.word	0x08006e34
 800146c:	40020800 	.word	0x40020800
 8001470:	20000800 	.word	0x20000800
 8001474:	20000a1c 	.word	0x20000a1c
 8001478:	08006e68 	.word	0x08006e68

0800147c <AD9910_IO_Update>:
	#endif

	return result;
}

state AD9910_IO_Update(){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	#ifdef DEBUG_PRINTING
	printf("-- IO Update --\n\r");
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <AD9910_IO_Update+0x30>)
 8001482:	f003 fa4f 	bl	8004924 <iprintf>
	#endif

	HAL_GPIO_WritePin(AD9910_IO_UPDATE_GPIO_Port, AD9910_IO_UPDATE_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2104      	movs	r1, #4
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <AD9910_IO_Update+0x34>)
 800148c:	f000 ffc0 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fcff 	bl	8001e94 <HAL_Delay>
	HAL_GPIO_WritePin(AD9910_IO_UPDATE_GPIO_Port, AD9910_IO_UPDATE_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2104      	movs	r1, #4
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <AD9910_IO_Update+0x34>)
 800149c:	f000 ffb8 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fcf7 	bl	8001e94 <HAL_Delay>
	return PASS;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08006e78 	.word	0x08006e78
 80014b0:	40020c00 	.word	0x40020c00

080014b4 <AD9910_SetProfile>:

state AD9910_SetProfile(uint8_t pf){												//TODO: should this be synchronous?
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	#ifdef DEBUG_PRINTING
	printf("Setting Profile to PF%d\n\r", pf);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4815      	ldr	r0, [pc, #84]	; (8001518 <AD9910_SetProfile+0x64>)
 80014c4:	f003 fa2e 	bl	8004924 <iprintf>
	#endif

	HAL_GPIO_WritePin(AD9910_PF0_GPIO_Port, AD9910_PF0_Pin, pf & 0x01);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <AD9910_SetProfile+0x68>)
 80014d8:	f000 ff9a 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9910_PF1_GPIO_Port, AD9910_PF1_Pin, (pf >> 1) & 0x01);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <AD9910_SetProfile+0x68>)
 80014f0:	f000 ff8e 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD9910_PF2_GPIO_Port, AD9910_PF2_Pin, (pf >> 2) & 0x01);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <AD9910_SetProfile+0x6c>)
 8001508:	f000 ff82 	bl	8002410 <HAL_GPIO_WritePin>
	return PASS;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08006e8c 	.word	0x08006e8c
 800151c:	40020000 	.word	0x40020000
 8001520:	40020800 	.word	0x40020800

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fc42 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f824 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f000 f8ec 	bl	800170c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001534:	f000 f88a 	bl	800164c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001538:	f000 f8be 	bl	80016b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2); //set up debug printf
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <main+0x48>)
 800153e:	f000 f9f5 	bl	800192c <RetargetInit>
  AD9910_Init();
 8001542:	f7ff fcad 	bl	8000ea0 <AD9910_Init>

  //Create a single tone
  AD9910_ConfigureDefaultFreq(10E6);
 8001546:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001570 <main+0x4c>
 800154a:	f7ff fe53 	bl	80011f4 <AD9910_ConfigureDefaultFreq>
  HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fca0 	bl	8001e94 <HAL_Delay>
  AD9910_ConfigureRAM(10E-6);
 8001554:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001574 <main+0x50>
 8001558:	f7ff fd56 	bl	8001008 <AD9910_ConfigureRAM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AD9910_StartRAMRamp();
 800155c:	f7ff fd0c 	bl	8000f78 <AD9910_StartRAMRamp>
	  HAL_Delay(10000);
 8001560:	f242 7010 	movw	r0, #10000	; 0x2710
 8001564:	f000 fc96 	bl	8001e94 <HAL_Delay>
	  AD9910_StartRAMRamp();
 8001568:	e7f8      	b.n	800155c <main+0x38>
 800156a:	bf00      	nop
 800156c:	20000b74 	.word	0x20000b74
 8001570:	4b189680 	.word	0x4b189680
 8001574:	3727c5ac 	.word	0x3727c5ac

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	; 0x50
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fd5a 	bl	8004040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <SystemClock_Config+0xcc>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <SystemClock_Config+0xcc>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <SystemClock_Config+0xcc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <SystemClock_Config+0xd0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <SystemClock_Config+0xd0>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <SystemClock_Config+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e8:	2308      	movs	r3, #8
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f6:	2307      	movs	r3, #7
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 ff20 	bl	8002444 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800160a:	f000 f987 	bl	800191c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800161a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	2105      	movs	r1, #5
 800162c:	4618      	mov	r0, r3
 800162e:	f001 f981 	bl	8002934 <HAL_RCC_ClockConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001638:	f000 f970 	bl	800191c <Error_Handler>
  }
}
 800163c:	bf00      	nop
 800163e:	3750      	adds	r7, #80	; 0x50
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000

0800164c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <MX_SPI2_Init+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI2_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001680:	2230      	movs	r2, #48	; 0x30
 8001682:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_SPI2_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_SPI2_Init+0x64>)
 800169e:	f001 fb45 	bl	8002d2c <HAL_SPI_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016a8:	f000 f938 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000a1c 	.word	0x20000a1c
 80016b4:	40003800 	.word	0x40003800

080016b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART2_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f002 f8c4 	bl	800387c <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f000 f90f 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000b74 	.word	0x20000b74
 8001708:	40004400 	.word	0x40004400

0800170c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	4b77      	ldr	r3, [pc, #476]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a76      	ldr	r2, [pc, #472]	; (8001904 <MX_GPIO_Init+0x1f8>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b74      	ldr	r3, [pc, #464]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b69      	ldr	r3, [pc, #420]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a68      	ldr	r2, [pc, #416]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b66      	ldr	r3, [pc, #408]	; (8001904 <MX_GPIO_Init+0x1f8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b62      	ldr	r3, [pc, #392]	; (8001904 <MX_GPIO_Init+0x1f8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a61      	ldr	r2, [pc, #388]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <MX_GPIO_Init+0x1f8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a5a      	ldr	r2, [pc, #360]	; (8001904 <MX_GPIO_Init+0x1f8>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b58      	ldr	r3, [pc, #352]	; (8001904 <MX_GPIO_Init+0x1f8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b54      	ldr	r3, [pc, #336]	; (8001904 <MX_GPIO_Init+0x1f8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a53      	ldr	r2, [pc, #332]	; (8001904 <MX_GPIO_Init+0x1f8>)
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <MX_GPIO_Init+0x1f8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|AD9910_OSK_Pin
 80017ca:	2200      	movs	r2, #0
 80017cc:	f247 0155 	movw	r1, #28757	; 0x7055
 80017d0:	484d      	ldr	r0, [pc, #308]	; (8001908 <MX_GPIO_Init+0x1fc>)
 80017d2:	f000 fe1d 	bl	8002410 <HAL_GPIO_WritePin>
                          |AD9910_IO_UPDATE_Pin|AD9910_TXE_Pin|AD9910_F0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD9910_CS_Pin|AD9910_RST_Pin|AD9910_IO_RST_Pin|AD9910_PWRDN_Pin
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 613c 	mov.w	r1, #3008	; 0xbc0
 80017dc:	484b      	ldr	r0, [pc, #300]	; (800190c <MX_GPIO_Init+0x200>)
 80017de:	f000 fe17 	bl	8002410 <HAL_GPIO_WritePin>
                          |AD9910_PF2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD9910_PF0_Pin|AD9910_PF1_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80017e8:	4849      	ldr	r0, [pc, #292]	; (8001910 <MX_GPIO_Init+0x204>)
 80017ea:	f000 fe11 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AD9910_F1_Pin|AD9910_DRCTL_Pin|AD9910_DRHOLD_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	21a8      	movs	r1, #168	; 0xa8
 80017f2:	4848      	ldr	r0, [pc, #288]	; (8001914 <MX_GPIO_Init+0x208>)
 80017f4:	f000 fe0c 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	4846      	ldr	r0, [pc, #280]	; (8001918 <MX_GPIO_Init+0x20c>)
 80017fe:	f000 fe07 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001802:	2301      	movs	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001806:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	483e      	ldr	r0, [pc, #248]	; (8001910 <MX_GPIO_Init+0x204>)
 8001818:	f000 fc46 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin AD9910_OSK_Pin
                           AD9910_IO_UPDATE_Pin AD9910_TXE_Pin AD9910_F0_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|AD9910_OSK_Pin
 800181c:	f247 0355 	movw	r3, #28757	; 0x7055
 8001820:	61fb      	str	r3, [r7, #28]
                          |AD9910_IO_UPDATE_Pin|AD9910_TXE_Pin|AD9910_F0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	4834      	ldr	r0, [pc, #208]	; (8001908 <MX_GPIO_Init+0x1fc>)
 8001836:	f000 fc37 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_CS_Pin AD9910_RST_Pin AD9910_IO_RST_Pin AD9910_PWRDN_Pin
                           AD9910_PF2_Pin */
  GPIO_InitStruct.Pin = AD9910_CS_Pin|AD9910_RST_Pin|AD9910_IO_RST_Pin|AD9910_PWRDN_Pin
 800183a:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800183e:	61fb      	str	r3, [r7, #28]
                          |AD9910_PF2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	482e      	ldr	r0, [pc, #184]	; (800190c <MX_GPIO_Init+0x200>)
 8001854:	f000 fc28 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_ERR_Pin AD9910_RSOVER_Pin */
  GPIO_InitStruct.Pin = SYNC_ERR_Pin|AD9910_RSOVER_Pin;
 8001858:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4828      	ldr	r0, [pc, #160]	; (8001910 <MX_GPIO_Init+0x204>)
 800186e:	f000 fc1b 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_PF0_Pin AD9910_PF1_Pin */
  GPIO_InitStruct.Pin = AD9910_PF0_Pin|AD9910_PF1_Pin;
 8001872:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4821      	ldr	r0, [pc, #132]	; (8001910 <MX_GPIO_Init+0x204>)
 800188c:	f000 fc0c 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_DROVER_Pin AD9910_PDCLK_Pin */
  GPIO_InitStruct.Pin = AD9910_DROVER_Pin|AD9910_PDCLK_Pin;
 8001890:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <MX_GPIO_Init+0x200>)
 80018a6:	f000 fbff 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_PLLLOCK_Pin AD9910_SYNC_CLK_Pin */
  GPIO_InitStruct.Pin = AD9910_PLLLOCK_Pin|AD9910_SYNC_CLK_Pin;
 80018aa:	230a      	movs	r3, #10
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4812      	ldr	r0, [pc, #72]	; (8001908 <MX_GPIO_Init+0x1fc>)
 80018be:	f000 fbf3 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9910_F1_Pin AD9910_DRCTL_Pin AD9910_DRHOLD_Pin */
  GPIO_InitStruct.Pin = AD9910_F1_Pin|AD9910_DRCTL_Pin|AD9910_DRHOLD_Pin;
 80018c2:	23a8      	movs	r3, #168	; 0xa8
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	480e      	ldr	r0, [pc, #56]	; (8001914 <MX_GPIO_Init+0x208>)
 80018da:	f000 fbe5 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80018de:	2302      	movs	r3, #2
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_GPIO_Init+0x20c>)
 80018f6:	f000 fbd7 	bl	80020a8 <HAL_GPIO_Init>

}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40020800 	.word	0x40020800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40021000 	.word	0x40021000

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <RetargetInit+0x28>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <RetargetInit+0x2c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6898      	ldr	r0, [r3, #8]
 8001940:	2300      	movs	r3, #0
 8001942:	2202      	movs	r2, #2
 8001944:	2100      	movs	r1, #0
 8001946:	f003 f805 	bl	8004954 <setvbuf>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000bb8 	.word	0x20000bb8
 8001958:	20000824 	.word	0x20000824

0800195c <_isatty>:

int _isatty(int fd) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db04      	blt.n	8001974 <_isatty+0x18>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	dc01      	bgt.n	8001974 <_isatty+0x18>
    return 1;
 8001970:	2301      	movs	r3, #1
 8001972:	e005      	b.n	8001980 <_isatty+0x24>

  errno = EBADF;
 8001974:	f002 fb3a 	bl	8003fec <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	2209      	movs	r2, #9
 800197c:	601a      	str	r2, [r3, #0]
  return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

int _write(int fd, char* ptr, int len) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d002      	beq.n	80019a0 <_write+0x18>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d111      	bne.n	80019c4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <_write+0x54>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	f001 ffb2 	bl	8003916 <HAL_UART_Transmit>
 80019b2:	4603      	mov	r3, r0
 80019b4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <_write+0x38>
      return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	e008      	b.n	80019d2 <_write+0x4a>
    else
      return EIO;
 80019c0:	2305      	movs	r3, #5
 80019c2:	e006      	b.n	80019d2 <_write+0x4a>
  }
  errno = EBADF;
 80019c4:	f002 fb12 	bl	8003fec <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2209      	movs	r2, #9
 80019cc:	601a      	str	r2, [r3, #0]
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000bb8 	.word	0x20000bb8

080019e0 <_close>:

int _close(int fd) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db04      	blt.n	80019f8 <_close+0x18>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	dc01      	bgt.n	80019f8 <_close+0x18>
    return 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e006      	b.n	8001a06 <_close+0x26>

  errno = EBADF;
 80019f8:	f002 faf8 	bl	8003fec <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2209      	movs	r2, #9
 8001a00:	601a      	str	r2, [r3, #0]
  return -1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001a1a:	f002 fae7 	bl	8003fec <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2209      	movs	r2, #9
 8001a22:	601a      	str	r2, [r3, #0]
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_read>:

int _read(int fd, char* ptr, int len) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d110      	bne.n	8001a64 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <_read+0x4c>)
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	f001 fff4 	bl	8003a3a <HAL_UART_Receive>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <_read+0x30>
      return 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e008      	b.n	8001a72 <_read+0x42>
    else
      return EIO;
 8001a60:	2305      	movs	r3, #5
 8001a62:	e006      	b.n	8001a72 <_read+0x42>
  }
  errno = EBADF;
 8001a64:	f002 fac2 	bl	8003fec <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2209      	movs	r2, #9
 8001a6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000bb8 	.word	0x20000bb8

08001a80 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db08      	blt.n	8001aa2 <_fstat+0x22>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	dc05      	bgt.n	8001aa2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9c:	605a      	str	r2, [r3, #4]
    return 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e005      	b.n	8001aae <_fstat+0x2e>
  }

  errno = EBADF;
 8001aa2:	f002 faa3 	bl	8003fec <__errno>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2209      	movs	r2, #9
 8001aaa:	601a      	str	r2, [r3, #0]
  return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001af6:	2007      	movs	r0, #7
 8001af8:	f000 faa2 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_SPI_MspInit+0xc0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d14a      	bne.n	8001bc0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_SPI_MspInit+0xc4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <HAL_SPI_MspInit+0xc8>)
 8001b9a:	f000 fa85 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_SPI_MspInit+0xcc>)
 8001bbc:	f000 fa74 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40003800 	.word	0x40003800
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_UART_MspInit+0x8c>)
 8001c4e:	f000 fa2b 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 f8ca 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f002 f97a 	bl	8003fec <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20020000 	.word	0x20020000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	20000a10 	.word	0x20000a10
 8001d2c:	20000bd0 	.word	0x20000bd0

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <SystemInit+0x28>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <SystemInit+0x28>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SystemInit+0x28>)
 8001d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d62:	e003      	b.n	8001d6c <LoopCopyDataInit>

08001d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d6a:	3104      	adds	r1, #4

08001d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d74:	d3f6      	bcc.n	8001d64 <CopyDataInit>
  ldr  r2, =_sbss
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d78:	e002      	b.n	8001d80 <LoopFillZerobss>

08001d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d7c:	f842 3b04 	str.w	r3, [r2], #4

08001d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d84:	d3f9      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d86:	f7ff ffd3 	bl	8001d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f002 f935 	bl	8003ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8e:	f7ff fbc9 	bl	8001524 <main>
  bx  lr    
 8001d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d98:	080072b4 	.word	0x080072b4
  ldr  r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001da0:	200009f4 	.word	0x200009f4
  ldr  r2, =_sbss
 8001da4:	200009f4 	.word	0x200009f4
  ldr  r3, = _ebss
 8001da8:	20000bd0 	.word	0x20000bd0

08001dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_Init+0x40>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_Init+0x40>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_Init+0x40>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f931 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fe68 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f93b 	bl	800208e <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 f911 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000818 	.word	0x20000818
 8001e4c:	20000820 	.word	0x20000820
 8001e50:	2000081c 	.word	0x2000081c

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000820 	.word	0x20000820
 8001e78:	20000bbc 	.word	0x20000bbc

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000bbc 	.word	0x20000bbc

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000820 	.word	0x20000820

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff47 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff5c 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffb0 	bl	8001ffc <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e16b      	b.n	800239c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 815a 	bne.w	8002396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80b4 	beq.w	8002396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b60      	ldr	r3, [pc, #384]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a5f      	ldr	r2, [pc, #380]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a5b      	ldr	r2, [pc, #364]	; (80023b8 <HAL_GPIO_Init+0x310>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x314>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_GPIO_Init+0x318>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_GPIO_Init+0x31c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x324>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_GPIO_Init+0x328>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_GPIO_Init+0x32c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_GPIO_Init+0x330>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x20a>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b2:	2308      	movs	r3, #8
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x310>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_GPIO_Init+0x334>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002312:	4a32      	ldr	r2, [pc, #200]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_GPIO_Init+0x334>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_GPIO_Init+0x334>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_GPIO_Init+0x334>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae90 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e264      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d075      	beq.n	800254e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	4ba3      	ldr	r3, [pc, #652]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4ba0      	ldr	r3, [pc, #640]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002476:	2b08      	cmp	r3, #8
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b9d      	ldr	r3, [pc, #628]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b99      	ldr	r3, [pc, #612]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x108>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d157      	bne.n	800254c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e23f      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x74>
 80024aa:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a90      	ldr	r2, [pc, #576]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x98>
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a8a      	ldr	r2, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xb0>
 80024dc:	4b84      	ldr	r3, [pc, #528]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a83      	ldr	r2, [pc, #524]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a80      	ldr	r2, [pc, #512]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fcbe 	bl	8001e7c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff fcba 	bl	8001e7c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e204      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xc0>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fcaa 	bl	8001e7c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fca6 	bl	8001e7c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1f0      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0xe8>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1c4      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4952      	ldr	r1, [pc, #328]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e03a      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_RCC_OscConfig+0x2b0>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff fc5f 	bl	8001e7c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c2:	f7ff fc5b 	bl	8001e7c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1a5      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4940      	ldr	r1, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x2b0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff fc3e 	bl	8001e7c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002604:	f7ff fc3a 	bl	8001e7c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e184      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d030      	beq.n	8002690 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x2b4>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff fc1e 	bl	8001e7c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f7ff fc1a 	bl	8001e7c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e164      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x200>
 8002662:	e015      	b.n	8002690 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x2b4>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7ff fc07 	bl	8001e7c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002672:	f7ff fc03 	bl	8001e7c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e14d      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a0 	beq.w	80027de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d121      	bne.n	800271e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x2b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x2b8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7ff fbc9 	bl	8001e7c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e011      	b.n	8002712 <HAL_RCC_OscConfig+0x2ce>
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470000 	.word	0x42470000
 80026f8:	42470e80 	.word	0x42470e80
 80026fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7ff fbbc 	bl	8001e7c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e106      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b85      	ldr	r3, [pc, #532]	; (8002928 <HAL_RCC_OscConfig+0x4e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x2f0>
 8002726:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x32a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x312>
 800273c:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a7a      	ldr	r2, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x32a>
 8002756:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a74      	ldr	r2, [pc, #464]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff fb81 	bl	8001e7c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff fb7d 	bl	8001e7c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0c5      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x33a>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7ff fb6b 	bl	8001e7c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff fb67 	bl	8001e7c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0af      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b5a      	ldr	r3, [pc, #360]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a55      	ldr	r2, [pc, #340]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 809b 	beq.w	800291e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e8:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d05c      	beq.n	80028ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d141      	bne.n	8002880 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <HAL_RCC_OscConfig+0x4ec>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff fb3b 	bl	8001e7c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff fb37 	bl	8001e7c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e081      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	019b      	lsls	r3, r3, #6
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	3b01      	subs	r3, #1
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	4937      	ldr	r1, [pc, #220]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_OscConfig+0x4ec>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fb10 	bl	8001e7c <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff fb0c 	bl	8001e7c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e056      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x41c>
 800287e:	e04e      	b.n	800291e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_OscConfig+0x4ec>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7ff faf9 	bl	8001e7c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff faf5 	bl	8001e7c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e03f      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x44a>
 80028ac:	e037      	b.n	800291e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e032      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_RCC_OscConfig+0x4e8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d028      	beq.n	800291a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d121      	bne.n	800291a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d11a      	bne.n	800291a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d111      	bne.n	800291a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d107      	bne.n	800291a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40007000 	.word	0x40007000
 800292c:	40023800 	.word	0x40023800
 8002930:	42470060 	.word	0x42470060

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0cc      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d90c      	bls.n	8002970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0b8      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d044      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e067      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 0203 	bic.w	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a24:	f7ff fa2a 	bl	8001e7c <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7ff fa26 	bl	8001e7c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 020c 	and.w	r2, r3, #12
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1eb      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20c      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e032      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4916      	ldr	r1, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	490e      	ldr	r1, [pc, #56]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aba:	f000 f821 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	5ccb      	ldrb	r3, [r1, r3]
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f98a 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08006ea8 	.word	0x08006ea8
 8002af8:	20000818 	.word	0x20000818
 8002afc:	2000081c 	.word	0x2000081c

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	2300      	movs	r3, #0
 8002b12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b18:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d00d      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x40>
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	f200 80bd 	bhi.w	8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b32:	e0b7      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b36:	60bb      	str	r3, [r7, #8]
       break;
 8002b38:	e0b7      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b3c:	60bb      	str	r3, [r7, #8]
      break;
 8002b3e:	e0b4      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b40:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4a:	4b5b      	ldr	r3, [pc, #364]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04d      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	ea02 0800 	and.w	r8, r2, r0
 8002b6e:	ea03 0901 	and.w	r9, r3, r1
 8002b72:	4640      	mov	r0, r8
 8002b74:	4649      	mov	r1, r9
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	014b      	lsls	r3, r1, #5
 8002b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b84:	0142      	lsls	r2, r0, #5
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b8e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ba0:	0182      	lsls	r2, r0, #6
 8002ba2:	1a12      	subs	r2, r2, r0
 8002ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	00d9      	lsls	r1, r3, #3
 8002bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb6:	00d0      	lsls	r0, r2, #3
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	eb12 0208 	adds.w	r2, r2, r8
 8002bc0:	eb43 0309 	adc.w	r3, r3, r9
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	0259      	lsls	r1, r3, #9
 8002bce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bd2:	0250      	lsls	r0, r2, #9
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f7fd ffe0 	bl	8000ba8 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e04a      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	ea02 0400 	and.w	r4, r2, r0
 8002c0a:	ea03 0501 	and.w	r5, r3, r1
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	014b      	lsls	r3, r1, #5
 8002c1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c20:	0142      	lsls	r2, r0, #5
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	1b00      	subs	r0, r0, r4
 8002c28:	eb61 0105 	sbc.w	r1, r1, r5
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	018b      	lsls	r3, r1, #6
 8002c36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c3a:	0182      	lsls	r2, r0, #6
 8002c3c:	1a12      	subs	r2, r2, r0
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f04f 0100 	mov.w	r1, #0
 8002c4a:	00d9      	lsls	r1, r3, #3
 8002c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c50:	00d0      	lsls	r0, r2, #3
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	1912      	adds	r2, r2, r4
 8002c58:	eb45 0303 	adc.w	r3, r5, r3
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	0299      	lsls	r1, r3, #10
 8002c66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c6a:	0290      	lsls	r0, r2, #10
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	f7fd ff94 	bl	8000ba8 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ca6:	60bb      	str	r3, [r7, #8]
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	68bb      	ldr	r3, [r7, #8]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000818 	.word	0x20000818

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08006eb8 	.word	0x08006eb8

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffdc 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08006eb8 	.word	0x08006eb8

08002d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07b      	b.n	8002e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d009      	beq.n	8002d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fec2 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0104 	and.w	r1, r3, #4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0210 	and.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b088      	sub	sp, #32
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_SPI_Transmit+0x22>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e126      	b.n	80030ae <HAL_SPI_Transmit+0x270>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e68:	f7ff f808 	bl	8001e7c <HAL_GetTick>
 8002e6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e82:	e10b      	b.n	800309c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_SPI_Transmit+0x52>
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e94:	e102      	b.n	800309c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	88fa      	ldrh	r2, [r7, #6]
 8002eae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002edc:	d10f      	bne.n	8002efe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002efc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d007      	beq.n	8002f1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f24:	d14b      	bne.n	8002fbe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Transmit+0xf6>
 8002f2e:	8afb      	ldrh	r3, [r7, #22]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d13e      	bne.n	8002fb2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	1c9a      	adds	r2, r3, #2
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f58:	e02b      	b.n	8002fb2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d112      	bne.n	8002f8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f8c:	e011      	b.n	8002fb2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8e:	f7fe ff75 	bl	8001e7c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d803      	bhi.n	8002fa6 <HAL_SPI_Transmit+0x168>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d102      	bne.n	8002fac <HAL_SPI_Transmit+0x16e>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fb0:	e074      	b.n	800309c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ce      	bne.n	8002f5a <HAL_SPI_Transmit+0x11c>
 8002fbc:	e04c      	b.n	8003058 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Transmit+0x18e>
 8002fc6:	8afb      	ldrh	r3, [r7, #22]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d140      	bne.n	800304e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ff2:	e02c      	b.n	800304e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d113      	bne.n	800302a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	; 0x36
 8003028:	e011      	b.n	800304e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fe ff27 	bl	8001e7c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Transmit+0x204>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Transmit+0x20a>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800304c:	e026      	b.n	800309c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1cd      	bne.n	8002ff4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fbcb 	bl	80037f8 <SPI_EndRxTxTransaction>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e000      	b.n	800309c <HAL_SPI_Transmit+0x25e>
  }

error:
 800309a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b088      	sub	sp, #32
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d2:	d112      	bne.n	80030fa <HAL_SPI_Receive+0x44>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10e      	bne.n	80030fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2204      	movs	r2, #4
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8f1 	bl	80032d8 <HAL_SPI_TransmitReceive>
 80030f6:	4603      	mov	r3, r0
 80030f8:	e0ea      	b.n	80032d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_SPI_Receive+0x52>
 8003104:	2302      	movs	r3, #2
 8003106:	e0e3      	b.n	80032d0 <HAL_SPI_Receive+0x21a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003110:	f7fe feb4 	bl	8001e7c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003126:	e0ca      	b.n	80032be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Receive+0x7e>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003138:	e0c1      	b.n	80032be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2204      	movs	r2, #4
 800313e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d10f      	bne.n	80031a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003190:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d162      	bne.n	800328e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031c8:	e02e      	b.n	8003228 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d115      	bne.n	8003204 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f103 020c 	add.w	r2, r3, #12
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003202:	e011      	b.n	8003228 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003204:	f7fe fe3a 	bl	8001e7c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d803      	bhi.n	800321c <HAL_SPI_Receive+0x166>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d102      	bne.n	8003222 <HAL_SPI_Receive+0x16c>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003226:	e04a      	b.n	80032be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1cb      	bne.n	80031ca <HAL_SPI_Receive+0x114>
 8003232:	e031      	b.n	8003298 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d113      	bne.n	800326a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003268:	e011      	b.n	800328e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326a:	f7fe fe07 	bl	8001e7c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d803      	bhi.n	8003282 <HAL_SPI_Receive+0x1cc>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d102      	bne.n	8003288 <HAL_SPI_Receive+0x1d2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800328c:	e017      	b.n	80032be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1cd      	bne.n	8003234 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fa45 	bl	800372c <SPI_EndRxTransaction>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
 80032ba:	e000      	b.n	80032be <HAL_SPI_Receive+0x208>
  }

error :
 80032bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032e6:	2301      	movs	r3, #1
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x26>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e18a      	b.n	8003614 <HAL_SPI_TransmitReceive+0x33c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003306:	f7fe fdb9 	bl	8001e7c <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003324:	2b01      	cmp	r3, #1
 8003326:	d00f      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x70>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332e:	d107      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x68>
 8003338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333c:	2b04      	cmp	r3, #4
 800333e:	d003      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003346:	e15b      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_SPI_TransmitReceive+0x82>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_SPI_TransmitReceive+0x82>
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003360:	e14e      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2205      	movs	r2, #5
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	887a      	ldrh	r2, [r7, #2]
 8003386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	887a      	ldrh	r2, [r7, #2]
 800339e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d007      	beq.n	80033ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d2:	d178      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x10a>
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d166      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	1c9a      	adds	r2, r3, #2
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003406:	e053      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_SPI_TransmitReceive+0x176>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_SPI_TransmitReceive+0x176>
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d113      	bne.n	800344e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	881a      	ldrh	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d119      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x1b8>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d014      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	b292      	uxth	r2, r2
 8003472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800348c:	2301      	movs	r3, #1
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003490:	f7fe fcf4 	bl	8001e7c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800349c:	429a      	cmp	r2, r3
 800349e:	d807      	bhi.n	80034b0 <HAL_SPI_TransmitReceive+0x1d8>
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d003      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034ae:	e0a7      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1a6      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x130>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1a1      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x130>
 80034c4:	e07c      	b.n	80035c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x1fc>
 80034ce:	8b7b      	ldrh	r3, [r7, #26]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d16b      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fa:	e057      	b.n	80035ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d11c      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x26c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x26c>
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d114      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d119      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x2ae>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d014      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003582:	2301      	movs	r3, #1
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003586:	f7fe fc79 	bl	8001e7c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003592:	429a      	cmp	r2, r3
 8003594:	d803      	bhi.n	800359e <HAL_SPI_TransmitReceive+0x2c6>
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x2cc>
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035aa:	e029      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1a2      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x224>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d19d      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f917 	bl	80037f8 <SPI_EndRxTxTransaction>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d006      	beq.n	80035de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035dc:	e010      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	e000      	b.n	8003600 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003614:	4618      	mov	r0, r3
 8003616:	3730      	adds	r7, #48	; 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800362c:	f7fe fc26 	bl	8001e7c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800363c:	f7fe fc1e 	bl	8001e7c <HAL_GetTick>
 8003640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	0d1b      	lsrs	r3, r3, #20
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003652:	e054      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d050      	beq.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800365c:	f7fe fc0e 	bl	8001e7c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d13d      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d111      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d004      	beq.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d107      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b8:	d10f      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e017      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d19b      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000818 	.word	0x20000818

0800372c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003740:	d111      	bne.n	8003766 <SPI_EndRxTransaction+0x3a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374a:	d004      	beq.n	8003756 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003754:	d107      	bne.n	8003766 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376e:	d12a      	bne.n	80037c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003778:	d012      	beq.n	80037a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff ff49 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02d      	beq.n	80037ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e026      	b.n	80037ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2101      	movs	r1, #1
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff ff36 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01a      	beq.n	80037ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e013      	b.n	80037ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2101      	movs	r1, #1
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff ff23 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e000      	b.n	80037ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <SPI_EndRxTxTransaction+0x7c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <SPI_EndRxTxTransaction+0x80>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0d5b      	lsrs	r3, r3, #21
 8003810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003822:	d112      	bne.n	800384a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff fef4 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e00f      	b.n	800386a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3b01      	subs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d0f2      	beq.n	800384a <SPI_EndRxTxTransaction+0x52>
 8003864:	e000      	b.n	8003868 <SPI_EndRxTxTransaction+0x70>
        break;
 8003866:	bf00      	nop
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000818 	.word	0x20000818
 8003878:	165e9f81 	.word	0x165e9f81

0800387c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e03f      	b.n	800390e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe f998 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f9cb 	bl	8003c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b08a      	sub	sp, #40	; 0x28
 800391a:	af02      	add	r7, sp, #8
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	d17c      	bne.n	8003a30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_UART_Transmit+0x2c>
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e075      	b.n	8003a32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_UART_Transmit+0x3e>
 8003950:	2302      	movs	r3, #2
 8003952:	e06e      	b.n	8003a32 <HAL_UART_Transmit+0x11c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2221      	movs	r2, #33	; 0x21
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396a:	f7fe fa87 	bl	8001e7c <HAL_GetTick>
 800396e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x82>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039a8:	e02a      	b.n	8003a00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f8e2 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e036      	b.n	8003a32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3302      	adds	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1cf      	bne.n	80039aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f8b2 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e006      	b.n	8003a32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b08a      	sub	sp, #40	; 0x28
 8003a3e:	af02      	add	r7, sp, #8
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	f040 808c 	bne.w	8003b74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Receive+0x2e>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e084      	b.n	8003b76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Receive+0x40>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e07d      	b.n	8003b76 <HAL_UART_Receive+0x13c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2222      	movs	r2, #34	; 0x22
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a96:	f7fe f9f1 	bl	8001e7c <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Receive+0x8a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ad4:	e043      	b.n	8003b5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2120      	movs	r1, #32
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f84c 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e042      	b.n	8003b76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e01f      	b.n	8003b50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b18:	d007      	beq.n	8003b2a <HAL_UART_Receive+0xf0>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_UART_Receive+0xfe>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e008      	b.n	8003b4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1b6      	bne.n	8003ad6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b090      	sub	sp, #64	; 0x40
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	e050      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d04c      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	f7fe f96d 	bl	8001e7c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d241      	bcs.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bce:	637a      	str	r2, [r7, #52]	; 0x34
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c02:	623a      	str	r2, [r7, #32]
 8003c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	69f9      	ldr	r1, [r7, #28]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e00f      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d09f      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3740      	adds	r7, #64	; 0x40
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	b09f      	sub	sp, #124	; 0x7c
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	68d9      	ldr	r1, [r3, #12]
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	ea40 0301 	orr.w	r3, r0, r1
 8003c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca0:	f021 010c 	bic.w	r1, r1, #12
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003caa:	430b      	orrs	r3, r1
 8003cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	6999      	ldr	r1, [r3, #24]
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	ea40 0301 	orr.w	r3, r0, r1
 8003cc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4bc5      	ldr	r3, [pc, #788]	; (8003fe0 <UART_SetConfig+0x384>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d004      	beq.n	8003cda <UART_SetConfig+0x7e>
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4bc3      	ldr	r3, [pc, #780]	; (8003fe4 <UART_SetConfig+0x388>)
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d103      	bne.n	8003ce2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cda:	f7ff f813 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8003cde:	6778      	str	r0, [r7, #116]	; 0x74
 8003ce0:	e002      	b.n	8003ce8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce2:	f7fe fffb 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003ce6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	f040 80b6 	bne.w	8003e60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	f04f 0500 	mov.w	r5, #0
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	462b      	mov	r3, r5
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	6439      	str	r1, [r7, #64]	; 0x40
 8003d04:	415b      	adcs	r3, r3
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
 8003d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d0c:	1912      	adds	r2, r2, r4
 8003d0e:	eb45 0303 	adc.w	r3, r5, r3
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	00d9      	lsls	r1, r3, #3
 8003d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d20:	00d0      	lsls	r0, r2, #3
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	1911      	adds	r1, r2, r4
 8003d28:	6639      	str	r1, [r7, #96]	; 0x60
 8003d2a:	416b      	adcs	r3, r5
 8003d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d48:	f7fc ff2e 	bl	8000ba8 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4ba5      	ldr	r3, [pc, #660]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003d52:	fba3 2302 	umull	r2, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	011e      	lsls	r6, r3, #4
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	f04f 0500 	mov.w	r5, #0
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	6339      	str	r1, [r7, #48]	; 0x30
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d72:	1912      	adds	r2, r2, r4
 8003d74:	eb45 0303 	adc.w	r3, r5, r3
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	00d9      	lsls	r1, r3, #3
 8003d82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d86:	00d0      	lsls	r0, r2, #3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	1911      	adds	r1, r2, r4
 8003d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d90:	416b      	adcs	r3, r5
 8003d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	1891      	adds	r1, r2, r2
 8003da0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003da2:	415b      	adcs	r3, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dae:	f7fc fefb 	bl	8000ba8 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd8:	441e      	add	r6, r3
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	1894      	adds	r4, r2, r2
 8003de8:	623c      	str	r4, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	1812      	adds	r2, r2, r0
 8003df4:	eb41 0303 	adc.w	r3, r1, r3
 8003df8:	f04f 0400 	mov.w	r4, #0
 8003dfc:	f04f 0500 	mov.w	r5, #0
 8003e00:	00dd      	lsls	r5, r3, #3
 8003e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e06:	00d4      	lsls	r4, r2, #3
 8003e08:	4622      	mov	r2, r4
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	1814      	adds	r4, r2, r0
 8003e0e:	653c      	str	r4, [r7, #80]	; 0x50
 8003e10:	414b      	adcs	r3, r1
 8003e12:	657b      	str	r3, [r7, #84]	; 0x54
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	61b9      	str	r1, [r7, #24]
 8003e22:	415b      	adcs	r3, r3
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e2e:	f7fc febb 	bl	8000ba8 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a67      	ldr	r2, [pc, #412]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4432      	add	r2, r6
 8003e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e5e:	e0b9      	b.n	8003fd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	461c      	mov	r4, r3
 8003e64:	f04f 0500 	mov.w	r5, #0
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	6139      	str	r1, [r7, #16]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e78:	1912      	adds	r2, r2, r4
 8003e7a:	eb45 0303 	adc.w	r3, r5, r3
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	00d9      	lsls	r1, r3, #3
 8003e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8c:	00d0      	lsls	r0, r2, #3
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	eb12 0804 	adds.w	r8, r2, r4
 8003e96:	eb43 0905 	adc.w	r9, r3, r5
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	008b      	lsls	r3, r1, #2
 8003eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb2:	0082      	lsls	r2, r0, #2
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	f7fc fe76 	bl	8000ba8 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	011e      	lsls	r6, r3, #4
 8003eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	1894      	adds	r4, r2, r2
 8003ed8:	60bc      	str	r4, [r7, #8]
 8003eda:	415b      	adcs	r3, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee2:	1812      	adds	r2, r2, r0
 8003ee4:	eb41 0303 	adc.w	r3, r1, r3
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	f04f 0500 	mov.w	r5, #0
 8003ef0:	00dd      	lsls	r5, r3, #3
 8003ef2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ef6:	00d4      	lsls	r4, r2, #3
 8003ef8:	4622      	mov	r2, r4
 8003efa:	462b      	mov	r3, r5
 8003efc:	1814      	adds	r4, r2, r0
 8003efe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f00:	414b      	adcs	r3, r1
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f1c:	0082      	lsls	r2, r0, #2
 8003f1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f22:	f7fc fe41 	bl	8000ba8 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2164      	movs	r1, #100	; 0x64
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	3332      	adds	r3, #50	; 0x32
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4a:	441e      	add	r6, r3
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	1894      	adds	r4, r2, r2
 8003f5a:	603c      	str	r4, [r7, #0]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f64:	1812      	adds	r2, r2, r0
 8003f66:	eb41 0303 	adc.w	r3, r1, r3
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	f04f 0500 	mov.w	r5, #0
 8003f72:	00dd      	lsls	r5, r3, #3
 8003f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f78:	00d4      	lsls	r4, r2, #3
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f82:	eb43 0b01 	adc.w	fp, r3, r1
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f9e:	0082      	lsls	r2, r0, #2
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	4659      	mov	r1, fp
 8003fa4:	f7fc fe00 	bl	8000ba8 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003fae:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2164      	movs	r1, #100	; 0x64
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4432      	add	r2, r6
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	377c      	adds	r7, #124	; 0x7c
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	40011400 	.word	0x40011400
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000824 	.word	0x20000824

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4d0d      	ldr	r5, [pc, #52]	; (8004030 <__libc_init_array+0x38>)
 8003ffc:	4c0d      	ldr	r4, [pc, #52]	; (8004034 <__libc_init_array+0x3c>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	2600      	movs	r6, #0
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	4d0b      	ldr	r5, [pc, #44]	; (8004038 <__libc_init_array+0x40>)
 800400a:	4c0c      	ldr	r4, [pc, #48]	; (800403c <__libc_init_array+0x44>)
 800400c:	f002 fe0c 	bl	8006c28 <_init>
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	2600      	movs	r6, #0
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	080072ac 	.word	0x080072ac
 8004034:	080072ac 	.word	0x080072ac
 8004038:	080072ac 	.word	0x080072ac
 800403c:	080072b0 	.word	0x080072b0

08004040 <memset>:
 8004040:	4402      	add	r2, r0
 8004042:	4603      	mov	r3, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	f803 1b01 	strb.w	r1, [r3], #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <__cvt>:
 8004050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	ec55 4b10 	vmov	r4, r5, d0
 8004058:	2d00      	cmp	r5, #0
 800405a:	460e      	mov	r6, r1
 800405c:	4619      	mov	r1, r3
 800405e:	462b      	mov	r3, r5
 8004060:	bfbb      	ittet	lt
 8004062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004066:	461d      	movlt	r5, r3
 8004068:	2300      	movge	r3, #0
 800406a:	232d      	movlt	r3, #45	; 0x2d
 800406c:	700b      	strb	r3, [r1, #0]
 800406e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004074:	4691      	mov	r9, r2
 8004076:	f023 0820 	bic.w	r8, r3, #32
 800407a:	bfbc      	itt	lt
 800407c:	4622      	movlt	r2, r4
 800407e:	4614      	movlt	r4, r2
 8004080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004084:	d005      	beq.n	8004092 <__cvt+0x42>
 8004086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800408a:	d100      	bne.n	800408e <__cvt+0x3e>
 800408c:	3601      	adds	r6, #1
 800408e:	2102      	movs	r1, #2
 8004090:	e000      	b.n	8004094 <__cvt+0x44>
 8004092:	2103      	movs	r1, #3
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	ab02      	add	r3, sp, #8
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	ec45 4b10 	vmov	d0, r4, r5
 80040a0:	4653      	mov	r3, sl
 80040a2:	4632      	mov	r2, r6
 80040a4:	f000 fda8 	bl	8004bf8 <_dtoa_r>
 80040a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ac:	4607      	mov	r7, r0
 80040ae:	d102      	bne.n	80040b6 <__cvt+0x66>
 80040b0:	f019 0f01 	tst.w	r9, #1
 80040b4:	d022      	beq.n	80040fc <__cvt+0xac>
 80040b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040ba:	eb07 0906 	add.w	r9, r7, r6
 80040be:	d110      	bne.n	80040e2 <__cvt+0x92>
 80040c0:	783b      	ldrb	r3, [r7, #0]
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d10a      	bne.n	80040dc <__cvt+0x8c>
 80040c6:	2200      	movs	r2, #0
 80040c8:	2300      	movs	r3, #0
 80040ca:	4620      	mov	r0, r4
 80040cc:	4629      	mov	r1, r5
 80040ce:	f7fc fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80040d2:	b918      	cbnz	r0, 80040dc <__cvt+0x8c>
 80040d4:	f1c6 0601 	rsb	r6, r6, #1
 80040d8:	f8ca 6000 	str.w	r6, [sl]
 80040dc:	f8da 3000 	ldr.w	r3, [sl]
 80040e0:	4499      	add	r9, r3
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4620      	mov	r0, r4
 80040e8:	4629      	mov	r1, r5
 80040ea:	f7fc fced 	bl	8000ac8 <__aeabi_dcmpeq>
 80040ee:	b108      	cbz	r0, 80040f4 <__cvt+0xa4>
 80040f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80040f4:	2230      	movs	r2, #48	; 0x30
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	454b      	cmp	r3, r9
 80040fa:	d307      	bcc.n	800410c <__cvt+0xbc>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004100:	1bdb      	subs	r3, r3, r7
 8004102:	4638      	mov	r0, r7
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	b004      	add	sp, #16
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	9103      	str	r1, [sp, #12]
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e7f0      	b.n	80040f6 <__cvt+0xa6>

08004114 <__exponent>:
 8004114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004116:	4603      	mov	r3, r0
 8004118:	2900      	cmp	r1, #0
 800411a:	bfb8      	it	lt
 800411c:	4249      	neglt	r1, r1
 800411e:	f803 2b02 	strb.w	r2, [r3], #2
 8004122:	bfb4      	ite	lt
 8004124:	222d      	movlt	r2, #45	; 0x2d
 8004126:	222b      	movge	r2, #43	; 0x2b
 8004128:	2909      	cmp	r1, #9
 800412a:	7042      	strb	r2, [r0, #1]
 800412c:	dd2a      	ble.n	8004184 <__exponent+0x70>
 800412e:	f10d 0407 	add.w	r4, sp, #7
 8004132:	46a4      	mov	ip, r4
 8004134:	270a      	movs	r7, #10
 8004136:	46a6      	mov	lr, r4
 8004138:	460a      	mov	r2, r1
 800413a:	fb91 f6f7 	sdiv	r6, r1, r7
 800413e:	fb07 1516 	mls	r5, r7, r6, r1
 8004142:	3530      	adds	r5, #48	; 0x30
 8004144:	2a63      	cmp	r2, #99	; 0x63
 8004146:	f104 34ff 	add.w	r4, r4, #4294967295
 800414a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800414e:	4631      	mov	r1, r6
 8004150:	dcf1      	bgt.n	8004136 <__exponent+0x22>
 8004152:	3130      	adds	r1, #48	; 0x30
 8004154:	f1ae 0502 	sub.w	r5, lr, #2
 8004158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800415c:	1c44      	adds	r4, r0, #1
 800415e:	4629      	mov	r1, r5
 8004160:	4561      	cmp	r1, ip
 8004162:	d30a      	bcc.n	800417a <__exponent+0x66>
 8004164:	f10d 0209 	add.w	r2, sp, #9
 8004168:	eba2 020e 	sub.w	r2, r2, lr
 800416c:	4565      	cmp	r5, ip
 800416e:	bf88      	it	hi
 8004170:	2200      	movhi	r2, #0
 8004172:	4413      	add	r3, r2
 8004174:	1a18      	subs	r0, r3, r0
 8004176:	b003      	add	sp, #12
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800417e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004182:	e7ed      	b.n	8004160 <__exponent+0x4c>
 8004184:	2330      	movs	r3, #48	; 0x30
 8004186:	3130      	adds	r1, #48	; 0x30
 8004188:	7083      	strb	r3, [r0, #2]
 800418a:	70c1      	strb	r1, [r0, #3]
 800418c:	1d03      	adds	r3, r0, #4
 800418e:	e7f1      	b.n	8004174 <__exponent+0x60>

08004190 <_printf_float>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ed2d 8b02 	vpush	{d8}
 8004198:	b08d      	sub	sp, #52	; 0x34
 800419a:	460c      	mov	r4, r1
 800419c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041a0:	4616      	mov	r6, r2
 80041a2:	461f      	mov	r7, r3
 80041a4:	4605      	mov	r5, r0
 80041a6:	f001 fccb 	bl	8005b40 <_localeconv_r>
 80041aa:	f8d0 a000 	ldr.w	sl, [r0]
 80041ae:	4650      	mov	r0, sl
 80041b0:	f7fc f80e 	bl	80001d0 <strlen>
 80041b4:	2300      	movs	r3, #0
 80041b6:	930a      	str	r3, [sp, #40]	; 0x28
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	9305      	str	r3, [sp, #20]
 80041bc:	f8d8 3000 	ldr.w	r3, [r8]
 80041c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041c4:	3307      	adds	r3, #7
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	f103 0208 	add.w	r2, r3, #8
 80041ce:	f8c8 2000 	str.w	r2, [r8]
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041e2:	9307      	str	r3, [sp, #28]
 80041e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80041e8:	ee08 0a10 	vmov	s16, r0
 80041ec:	4b9f      	ldr	r3, [pc, #636]	; (800446c <_printf_float+0x2dc>)
 80041ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	f7fc fc99 	bl	8000b2c <__aeabi_dcmpun>
 80041fa:	bb88      	cbnz	r0, 8004260 <_printf_float+0xd0>
 80041fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004200:	4b9a      	ldr	r3, [pc, #616]	; (800446c <_printf_float+0x2dc>)
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	f7fc fc73 	bl	8000af0 <__aeabi_dcmple>
 800420a:	bb48      	cbnz	r0, 8004260 <_printf_float+0xd0>
 800420c:	2200      	movs	r2, #0
 800420e:	2300      	movs	r3, #0
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	f7fc fc62 	bl	8000adc <__aeabi_dcmplt>
 8004218:	b110      	cbz	r0, 8004220 <_printf_float+0x90>
 800421a:	232d      	movs	r3, #45	; 0x2d
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004220:	4b93      	ldr	r3, [pc, #588]	; (8004470 <_printf_float+0x2e0>)
 8004222:	4894      	ldr	r0, [pc, #592]	; (8004474 <_printf_float+0x2e4>)
 8004224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004228:	bf94      	ite	ls
 800422a:	4698      	movls	r8, r3
 800422c:	4680      	movhi	r8, r0
 800422e:	2303      	movs	r3, #3
 8004230:	6123      	str	r3, [r4, #16]
 8004232:	9b05      	ldr	r3, [sp, #20]
 8004234:	f023 0204 	bic.w	r2, r3, #4
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	f04f 0900 	mov.w	r9, #0
 800423e:	9700      	str	r7, [sp, #0]
 8004240:	4633      	mov	r3, r6
 8004242:	aa0b      	add	r2, sp, #44	; 0x2c
 8004244:	4621      	mov	r1, r4
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f9d8 	bl	80045fc <_printf_common>
 800424c:	3001      	adds	r0, #1
 800424e:	f040 8090 	bne.w	8004372 <_printf_float+0x1e2>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	b00d      	add	sp, #52	; 0x34
 8004258:	ecbd 8b02 	vpop	{d8}
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	4640      	mov	r0, r8
 8004266:	4649      	mov	r1, r9
 8004268:	f7fc fc60 	bl	8000b2c <__aeabi_dcmpun>
 800426c:	b140      	cbz	r0, 8004280 <_printf_float+0xf0>
 800426e:	464b      	mov	r3, r9
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfbc      	itt	lt
 8004274:	232d      	movlt	r3, #45	; 0x2d
 8004276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800427a:	487f      	ldr	r0, [pc, #508]	; (8004478 <_printf_float+0x2e8>)
 800427c:	4b7f      	ldr	r3, [pc, #508]	; (800447c <_printf_float+0x2ec>)
 800427e:	e7d1      	b.n	8004224 <_printf_float+0x94>
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004286:	9206      	str	r2, [sp, #24]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	d13f      	bne.n	800430c <_printf_float+0x17c>
 800428c:	2306      	movs	r3, #6
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	6861      	ldr	r1, [r4, #4]
 8004294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004298:	2300      	movs	r3, #0
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	ab0a      	add	r3, sp, #40	; 0x28
 800429e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042a2:	ab09      	add	r3, sp, #36	; 0x24
 80042a4:	ec49 8b10 	vmov	d0, r8, r9
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6022      	str	r2, [r4, #0]
 80042ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042b0:	4628      	mov	r0, r5
 80042b2:	f7ff fecd 	bl	8004050 <__cvt>
 80042b6:	9b06      	ldr	r3, [sp, #24]
 80042b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ba:	2b47      	cmp	r3, #71	; 0x47
 80042bc:	4680      	mov	r8, r0
 80042be:	d108      	bne.n	80042d2 <_printf_float+0x142>
 80042c0:	1cc8      	adds	r0, r1, #3
 80042c2:	db02      	blt.n	80042ca <_printf_float+0x13a>
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	4299      	cmp	r1, r3
 80042c8:	dd41      	ble.n	800434e <_printf_float+0x1be>
 80042ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80042ce:	fa5f fb8b 	uxtb.w	fp, fp
 80042d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042d6:	d820      	bhi.n	800431a <_printf_float+0x18a>
 80042d8:	3901      	subs	r1, #1
 80042da:	465a      	mov	r2, fp
 80042dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042e0:	9109      	str	r1, [sp, #36]	; 0x24
 80042e2:	f7ff ff17 	bl	8004114 <__exponent>
 80042e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042e8:	1813      	adds	r3, r2, r0
 80042ea:	2a01      	cmp	r2, #1
 80042ec:	4681      	mov	r9, r0
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	dc02      	bgt.n	80042f8 <_printf_float+0x168>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	07d2      	lsls	r2, r2, #31
 80042f6:	d501      	bpl.n	80042fc <_printf_float+0x16c>
 80042f8:	3301      	adds	r3, #1
 80042fa:	6123      	str	r3, [r4, #16]
 80042fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004300:	2b00      	cmp	r3, #0
 8004302:	d09c      	beq.n	800423e <_printf_float+0xae>
 8004304:	232d      	movs	r3, #45	; 0x2d
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430a:	e798      	b.n	800423e <_printf_float+0xae>
 800430c:	9a06      	ldr	r2, [sp, #24]
 800430e:	2a47      	cmp	r2, #71	; 0x47
 8004310:	d1be      	bne.n	8004290 <_printf_float+0x100>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1bc      	bne.n	8004290 <_printf_float+0x100>
 8004316:	2301      	movs	r3, #1
 8004318:	e7b9      	b.n	800428e <_printf_float+0xfe>
 800431a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800431e:	d118      	bne.n	8004352 <_printf_float+0x1c2>
 8004320:	2900      	cmp	r1, #0
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	dd0b      	ble.n	800433e <_printf_float+0x1ae>
 8004326:	6121      	str	r1, [r4, #16]
 8004328:	b913      	cbnz	r3, 8004330 <_printf_float+0x1a0>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	d502      	bpl.n	8004336 <_printf_float+0x1a6>
 8004330:	3301      	adds	r3, #1
 8004332:	440b      	add	r3, r1
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	65a1      	str	r1, [r4, #88]	; 0x58
 8004338:	f04f 0900 	mov.w	r9, #0
 800433c:	e7de      	b.n	80042fc <_printf_float+0x16c>
 800433e:	b913      	cbnz	r3, 8004346 <_printf_float+0x1b6>
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	07d2      	lsls	r2, r2, #31
 8004344:	d501      	bpl.n	800434a <_printf_float+0x1ba>
 8004346:	3302      	adds	r3, #2
 8004348:	e7f4      	b.n	8004334 <_printf_float+0x1a4>
 800434a:	2301      	movs	r3, #1
 800434c:	e7f2      	b.n	8004334 <_printf_float+0x1a4>
 800434e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004354:	4299      	cmp	r1, r3
 8004356:	db05      	blt.n	8004364 <_printf_float+0x1d4>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6121      	str	r1, [r4, #16]
 800435c:	07d8      	lsls	r0, r3, #31
 800435e:	d5ea      	bpl.n	8004336 <_printf_float+0x1a6>
 8004360:	1c4b      	adds	r3, r1, #1
 8004362:	e7e7      	b.n	8004334 <_printf_float+0x1a4>
 8004364:	2900      	cmp	r1, #0
 8004366:	bfd4      	ite	le
 8004368:	f1c1 0202 	rsble	r2, r1, #2
 800436c:	2201      	movgt	r2, #1
 800436e:	4413      	add	r3, r2
 8004370:	e7e0      	b.n	8004334 <_printf_float+0x1a4>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	055a      	lsls	r2, r3, #21
 8004376:	d407      	bmi.n	8004388 <_printf_float+0x1f8>
 8004378:	6923      	ldr	r3, [r4, #16]
 800437a:	4642      	mov	r2, r8
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	d12c      	bne.n	80043e0 <_printf_float+0x250>
 8004386:	e764      	b.n	8004252 <_printf_float+0xc2>
 8004388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800438c:	f240 80e0 	bls.w	8004550 <_printf_float+0x3c0>
 8004390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	f7fc fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800439c:	2800      	cmp	r0, #0
 800439e:	d034      	beq.n	800440a <_printf_float+0x27a>
 80043a0:	4a37      	ldr	r2, [pc, #220]	; (8004480 <_printf_float+0x2f0>)
 80043a2:	2301      	movs	r3, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f af51 	beq.w	8004252 <_printf_float+0xc2>
 80043b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b4:	429a      	cmp	r2, r3
 80043b6:	db02      	blt.n	80043be <_printf_float+0x22e>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07d8      	lsls	r0, r3, #31
 80043bc:	d510      	bpl.n	80043e0 <_printf_float+0x250>
 80043be:	ee18 3a10 	vmov	r3, s16
 80043c2:	4652      	mov	r2, sl
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f af41 	beq.w	8004252 <_printf_float+0xc2>
 80043d0:	f04f 0800 	mov.w	r8, #0
 80043d4:	f104 091a 	add.w	r9, r4, #26
 80043d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	4543      	cmp	r3, r8
 80043de:	dc09      	bgt.n	80043f4 <_printf_float+0x264>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	079b      	lsls	r3, r3, #30
 80043e4:	f100 8105 	bmi.w	80045f2 <_printf_float+0x462>
 80043e8:	68e0      	ldr	r0, [r4, #12]
 80043ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ec:	4298      	cmp	r0, r3
 80043ee:	bfb8      	it	lt
 80043f0:	4618      	movlt	r0, r3
 80043f2:	e730      	b.n	8004256 <_printf_float+0xc6>
 80043f4:	2301      	movs	r3, #1
 80043f6:	464a      	mov	r2, r9
 80043f8:	4631      	mov	r1, r6
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b8      	blx	r7
 80043fe:	3001      	adds	r0, #1
 8004400:	f43f af27 	beq.w	8004252 <_printf_float+0xc2>
 8004404:	f108 0801 	add.w	r8, r8, #1
 8004408:	e7e6      	b.n	80043d8 <_printf_float+0x248>
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	dc39      	bgt.n	8004484 <_printf_float+0x2f4>
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <_printf_float+0x2f0>)
 8004412:	2301      	movs	r3, #1
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	f43f af19 	beq.w	8004252 <_printf_float+0xc2>
 8004420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004424:	4313      	orrs	r3, r2
 8004426:	d102      	bne.n	800442e <_printf_float+0x29e>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07d9      	lsls	r1, r3, #31
 800442c:	d5d8      	bpl.n	80043e0 <_printf_float+0x250>
 800442e:	ee18 3a10 	vmov	r3, s16
 8004432:	4652      	mov	r2, sl
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af09 	beq.w	8004252 <_printf_float+0xc2>
 8004440:	f04f 0900 	mov.w	r9, #0
 8004444:	f104 0a1a 	add.w	sl, r4, #26
 8004448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444a:	425b      	negs	r3, r3
 800444c:	454b      	cmp	r3, r9
 800444e:	dc01      	bgt.n	8004454 <_printf_float+0x2c4>
 8004450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004452:	e792      	b.n	800437a <_printf_float+0x1ea>
 8004454:	2301      	movs	r3, #1
 8004456:	4652      	mov	r2, sl
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	f43f aef7 	beq.w	8004252 <_printf_float+0xc2>
 8004464:	f109 0901 	add.w	r9, r9, #1
 8004468:	e7ee      	b.n	8004448 <_printf_float+0x2b8>
 800446a:	bf00      	nop
 800446c:	7fefffff 	.word	0x7fefffff
 8004470:	08006ec4 	.word	0x08006ec4
 8004474:	08006ec8 	.word	0x08006ec8
 8004478:	08006ed0 	.word	0x08006ed0
 800447c:	08006ecc 	.word	0x08006ecc
 8004480:	08006ed4 	.word	0x08006ed4
 8004484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004488:	429a      	cmp	r2, r3
 800448a:	bfa8      	it	ge
 800448c:	461a      	movge	r2, r3
 800448e:	2a00      	cmp	r2, #0
 8004490:	4691      	mov	r9, r2
 8004492:	dc37      	bgt.n	8004504 <_printf_float+0x374>
 8004494:	f04f 0b00 	mov.w	fp, #0
 8004498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800449c:	f104 021a 	add.w	r2, r4, #26
 80044a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	eba3 0309 	sub.w	r3, r3, r9
 80044a8:	455b      	cmp	r3, fp
 80044aa:	dc33      	bgt.n	8004514 <_printf_float+0x384>
 80044ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b0:	429a      	cmp	r2, r3
 80044b2:	db3b      	blt.n	800452c <_printf_float+0x39c>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	07da      	lsls	r2, r3, #31
 80044b8:	d438      	bmi.n	800452c <_printf_float+0x39c>
 80044ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044bc:	9b05      	ldr	r3, [sp, #20]
 80044be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	eba2 0901 	sub.w	r9, r2, r1
 80044c6:	4599      	cmp	r9, r3
 80044c8:	bfa8      	it	ge
 80044ca:	4699      	movge	r9, r3
 80044cc:	f1b9 0f00 	cmp.w	r9, #0
 80044d0:	dc35      	bgt.n	800453e <_printf_float+0x3ae>
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044da:	f104 0a1a 	add.w	sl, r4, #26
 80044de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	eba3 0309 	sub.w	r3, r3, r9
 80044e8:	4543      	cmp	r3, r8
 80044ea:	f77f af79 	ble.w	80043e0 <_printf_float+0x250>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4631      	mov	r1, r6
 80044f4:	4628      	mov	r0, r5
 80044f6:	47b8      	blx	r7
 80044f8:	3001      	adds	r0, #1
 80044fa:	f43f aeaa 	beq.w	8004252 <_printf_float+0xc2>
 80044fe:	f108 0801 	add.w	r8, r8, #1
 8004502:	e7ec      	b.n	80044de <_printf_float+0x34e>
 8004504:	4613      	mov	r3, r2
 8004506:	4631      	mov	r1, r6
 8004508:	4642      	mov	r2, r8
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	d1c0      	bne.n	8004494 <_printf_float+0x304>
 8004512:	e69e      	b.n	8004252 <_printf_float+0xc2>
 8004514:	2301      	movs	r3, #1
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	9205      	str	r2, [sp, #20]
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f ae97 	beq.w	8004252 <_printf_float+0xc2>
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	f10b 0b01 	add.w	fp, fp, #1
 800452a:	e7b9      	b.n	80044a0 <_printf_float+0x310>
 800452c:	ee18 3a10 	vmov	r3, s16
 8004530:	4652      	mov	r2, sl
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	d1be      	bne.n	80044ba <_printf_float+0x32a>
 800453c:	e689      	b.n	8004252 <_printf_float+0xc2>
 800453e:	9a05      	ldr	r2, [sp, #20]
 8004540:	464b      	mov	r3, r9
 8004542:	4442      	add	r2, r8
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	d1c1      	bne.n	80044d2 <_printf_float+0x342>
 800454e:	e680      	b.n	8004252 <_printf_float+0xc2>
 8004550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004552:	2a01      	cmp	r2, #1
 8004554:	dc01      	bgt.n	800455a <_printf_float+0x3ca>
 8004556:	07db      	lsls	r3, r3, #31
 8004558:	d538      	bpl.n	80045cc <_printf_float+0x43c>
 800455a:	2301      	movs	r3, #1
 800455c:	4642      	mov	r2, r8
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	f43f ae74 	beq.w	8004252 <_printf_float+0xc2>
 800456a:	ee18 3a10 	vmov	r3, s16
 800456e:	4652      	mov	r2, sl
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f ae6b 	beq.w	8004252 <_printf_float+0xc2>
 800457c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004580:	2200      	movs	r2, #0
 8004582:	2300      	movs	r3, #0
 8004584:	f7fc faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004588:	b9d8      	cbnz	r0, 80045c2 <_printf_float+0x432>
 800458a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458c:	f108 0201 	add.w	r2, r8, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	d10e      	bne.n	80045ba <_printf_float+0x42a>
 800459c:	e659      	b.n	8004252 <_printf_float+0xc2>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f ae52 	beq.w	8004252 <_printf_float+0xc2>
 80045ae:	f108 0801 	add.w	r8, r8, #1
 80045b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4543      	cmp	r3, r8
 80045b8:	dcf1      	bgt.n	800459e <_printf_float+0x40e>
 80045ba:	464b      	mov	r3, r9
 80045bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045c0:	e6dc      	b.n	800437c <_printf_float+0x1ec>
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	f104 0a1a 	add.w	sl, r4, #26
 80045ca:	e7f2      	b.n	80045b2 <_printf_float+0x422>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4642      	mov	r2, r8
 80045d0:	e7df      	b.n	8004592 <_printf_float+0x402>
 80045d2:	2301      	movs	r3, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f ae38 	beq.w	8004252 <_printf_float+0xc2>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045ea:	1a5b      	subs	r3, r3, r1
 80045ec:	4543      	cmp	r3, r8
 80045ee:	dcf0      	bgt.n	80045d2 <_printf_float+0x442>
 80045f0:	e6fa      	b.n	80043e8 <_printf_float+0x258>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	f104 0919 	add.w	r9, r4, #25
 80045fa:	e7f4      	b.n	80045e6 <_printf_float+0x456>

080045fc <_printf_common>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	4616      	mov	r6, r2
 8004602:	4699      	mov	r9, r3
 8004604:	688a      	ldr	r2, [r1, #8]
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800460c:	4293      	cmp	r3, r2
 800460e:	bfb8      	it	lt
 8004610:	4613      	movlt	r3, r2
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004618:	4607      	mov	r7, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b10a      	cbz	r2, 8004622 <_printf_common+0x26>
 800461e:	3301      	adds	r3, #1
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	0699      	lsls	r1, r3, #26
 8004626:	bf42      	ittt	mi
 8004628:	6833      	ldrmi	r3, [r6, #0]
 800462a:	3302      	addmi	r3, #2
 800462c:	6033      	strmi	r3, [r6, #0]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	f015 0506 	ands.w	r5, r5, #6
 8004634:	d106      	bne.n	8004644 <_printf_common+0x48>
 8004636:	f104 0a19 	add.w	sl, r4, #25
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	6832      	ldr	r2, [r6, #0]
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	42ab      	cmp	r3, r5
 8004642:	dc26      	bgt.n	8004692 <_printf_common+0x96>
 8004644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004648:	1e13      	subs	r3, r2, #0
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	bf18      	it	ne
 800464e:	2301      	movne	r3, #1
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d42b      	bmi.n	80046ac <_printf_common+0xb0>
 8004654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004658:	4649      	mov	r1, r9
 800465a:	4638      	mov	r0, r7
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d01e      	beq.n	80046a0 <_printf_common+0xa4>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	68e5      	ldr	r5, [r4, #12]
 8004666:	6832      	ldr	r2, [r6, #0]
 8004668:	f003 0306 	and.w	r3, r3, #6
 800466c:	2b04      	cmp	r3, #4
 800466e:	bf08      	it	eq
 8004670:	1aad      	subeq	r5, r5, r2
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf0c      	ite	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	2500      	movne	r5, #0
 800467e:	4293      	cmp	r3, r2
 8004680:	bfc4      	itt	gt
 8004682:	1a9b      	subgt	r3, r3, r2
 8004684:	18ed      	addgt	r5, r5, r3
 8004686:	2600      	movs	r6, #0
 8004688:	341a      	adds	r4, #26
 800468a:	42b5      	cmp	r5, r6
 800468c:	d11a      	bne.n	80046c4 <_printf_common+0xc8>
 800468e:	2000      	movs	r0, #0
 8004690:	e008      	b.n	80046a4 <_printf_common+0xa8>
 8004692:	2301      	movs	r3, #1
 8004694:	4652      	mov	r2, sl
 8004696:	4649      	mov	r1, r9
 8004698:	4638      	mov	r0, r7
 800469a:	47c0      	blx	r8
 800469c:	3001      	adds	r0, #1
 800469e:	d103      	bne.n	80046a8 <_printf_common+0xac>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	3501      	adds	r5, #1
 80046aa:	e7c6      	b.n	800463a <_printf_common+0x3e>
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	2030      	movs	r0, #48	; 0x30
 80046b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b6:	4422      	add	r2, r4
 80046b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c0:	3302      	adds	r3, #2
 80046c2:	e7c7      	b.n	8004654 <_printf_common+0x58>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4622      	mov	r2, r4
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa4>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d9      	b.n	800468a <_printf_common+0x8e>
	...

080046d8 <_printf_i>:
 80046d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	460c      	mov	r4, r1
 80046de:	4691      	mov	r9, r2
 80046e0:	7e27      	ldrb	r7, [r4, #24]
 80046e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046e4:	2f78      	cmp	r7, #120	; 0x78
 80046e6:	4680      	mov	r8, r0
 80046e8:	469a      	mov	sl, r3
 80046ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ee:	d807      	bhi.n	8004700 <_printf_i+0x28>
 80046f0:	2f62      	cmp	r7, #98	; 0x62
 80046f2:	d80a      	bhi.n	800470a <_printf_i+0x32>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f000 80d8 	beq.w	80048aa <_printf_i+0x1d2>
 80046fa:	2f58      	cmp	r7, #88	; 0x58
 80046fc:	f000 80a3 	beq.w	8004846 <_printf_i+0x16e>
 8004700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004708:	e03a      	b.n	8004780 <_printf_i+0xa8>
 800470a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470e:	2b15      	cmp	r3, #21
 8004710:	d8f6      	bhi.n	8004700 <_printf_i+0x28>
 8004712:	a001      	add	r0, pc, #4	; (adr r0, 8004718 <_printf_i+0x40>)
 8004714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004718:	08004771 	.word	0x08004771
 800471c:	08004785 	.word	0x08004785
 8004720:	08004701 	.word	0x08004701
 8004724:	08004701 	.word	0x08004701
 8004728:	08004701 	.word	0x08004701
 800472c:	08004701 	.word	0x08004701
 8004730:	08004785 	.word	0x08004785
 8004734:	08004701 	.word	0x08004701
 8004738:	08004701 	.word	0x08004701
 800473c:	08004701 	.word	0x08004701
 8004740:	08004701 	.word	0x08004701
 8004744:	08004891 	.word	0x08004891
 8004748:	080047b5 	.word	0x080047b5
 800474c:	08004873 	.word	0x08004873
 8004750:	08004701 	.word	0x08004701
 8004754:	08004701 	.word	0x08004701
 8004758:	080048b3 	.word	0x080048b3
 800475c:	08004701 	.word	0x08004701
 8004760:	080047b5 	.word	0x080047b5
 8004764:	08004701 	.word	0x08004701
 8004768:	08004701 	.word	0x08004701
 800476c:	0800487b 	.word	0x0800487b
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	600a      	str	r2, [r1, #0]
 8004778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800477c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004780:	2301      	movs	r3, #1
 8004782:	e0a3      	b.n	80048cc <_printf_i+0x1f4>
 8004784:	6825      	ldr	r5, [r4, #0]
 8004786:	6808      	ldr	r0, [r1, #0]
 8004788:	062e      	lsls	r6, r5, #24
 800478a:	f100 0304 	add.w	r3, r0, #4
 800478e:	d50a      	bpl.n	80047a6 <_printf_i+0xce>
 8004790:	6805      	ldr	r5, [r0, #0]
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	2d00      	cmp	r5, #0
 8004796:	da03      	bge.n	80047a0 <_printf_i+0xc8>
 8004798:	232d      	movs	r3, #45	; 0x2d
 800479a:	426d      	negs	r5, r5
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	485e      	ldr	r0, [pc, #376]	; (800491c <_printf_i+0x244>)
 80047a2:	230a      	movs	r3, #10
 80047a4:	e019      	b.n	80047da <_printf_i+0x102>
 80047a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047aa:	6805      	ldr	r5, [r0, #0]
 80047ac:	600b      	str	r3, [r1, #0]
 80047ae:	bf18      	it	ne
 80047b0:	b22d      	sxthne	r5, r5
 80047b2:	e7ef      	b.n	8004794 <_printf_i+0xbc>
 80047b4:	680b      	ldr	r3, [r1, #0]
 80047b6:	6825      	ldr	r5, [r4, #0]
 80047b8:	1d18      	adds	r0, r3, #4
 80047ba:	6008      	str	r0, [r1, #0]
 80047bc:	0628      	lsls	r0, r5, #24
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0xec>
 80047c0:	681d      	ldr	r5, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0xf2>
 80047c4:	0669      	lsls	r1, r5, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0xe8>
 80047c8:	881d      	ldrh	r5, [r3, #0]
 80047ca:	4854      	ldr	r0, [pc, #336]	; (800491c <_printf_i+0x244>)
 80047cc:	2f6f      	cmp	r7, #111	; 0x6f
 80047ce:	bf0c      	ite	eq
 80047d0:	2308      	moveq	r3, #8
 80047d2:	230a      	movne	r3, #10
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047da:	6866      	ldr	r6, [r4, #4]
 80047dc:	60a6      	str	r6, [r4, #8]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90d      	cbnz	r5, 80047f0 <_printf_i+0x118>
 80047ec:	2e00      	cmp	r6, #0
 80047ee:	d04d      	beq.n	800488c <_printf_i+0x1b4>
 80047f0:	4616      	mov	r6, r2
 80047f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f6:	fb03 5711 	mls	r7, r3, r1, r5
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004800:	462f      	mov	r7, r5
 8004802:	42bb      	cmp	r3, r7
 8004804:	460d      	mov	r5, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x11a>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x14c>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07df      	lsls	r7, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x14c>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	; 0x30
 800481c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004824:	1b92      	subs	r2, r2, r6
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee2 	bl	80045fc <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14c      	bne.n	80048d6 <_printf_i+0x1fe>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	4835      	ldr	r0, [pc, #212]	; (800491c <_printf_i+0x244>)
 8004848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	680e      	ldr	r6, [r1, #0]
 8004850:	061f      	lsls	r7, r3, #24
 8004852:	f856 5b04 	ldr.w	r5, [r6], #4
 8004856:	600e      	str	r6, [r1, #0]
 8004858:	d514      	bpl.n	8004884 <_printf_i+0x1ac>
 800485a:	07d9      	lsls	r1, r3, #31
 800485c:	bf44      	itt	mi
 800485e:	f043 0320 	orrmi.w	r3, r3, #32
 8004862:	6023      	strmi	r3, [r4, #0]
 8004864:	b91d      	cbnz	r5, 800486e <_printf_i+0x196>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f023 0320 	bic.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	2310      	movs	r3, #16
 8004870:	e7b0      	b.n	80047d4 <_printf_i+0xfc>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	2378      	movs	r3, #120	; 0x78
 800487c:	4828      	ldr	r0, [pc, #160]	; (8004920 <_printf_i+0x248>)
 800487e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004882:	e7e3      	b.n	800484c <_printf_i+0x174>
 8004884:	065e      	lsls	r6, r3, #25
 8004886:	bf48      	it	mi
 8004888:	b2ad      	uxthmi	r5, r5
 800488a:	e7e6      	b.n	800485a <_printf_i+0x182>
 800488c:	4616      	mov	r6, r2
 800488e:	e7bb      	b.n	8004808 <_printf_i+0x130>
 8004890:	680b      	ldr	r3, [r1, #0]
 8004892:	6826      	ldr	r6, [r4, #0]
 8004894:	6960      	ldr	r0, [r4, #20]
 8004896:	1d1d      	adds	r5, r3, #4
 8004898:	600d      	str	r5, [r1, #0]
 800489a:	0635      	lsls	r5, r6, #24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0x1cc>
 80048a0:	6018      	str	r0, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0x1d2>
 80048a4:	0671      	lsls	r1, r6, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0x1c8>
 80048a8:	8018      	strh	r0, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	4616      	mov	r6, r2
 80048b0:	e7ba      	b.n	8004828 <_printf_i+0x150>
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	600a      	str	r2, [r1, #0]
 80048b8:	681e      	ldr	r6, [r3, #0]
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	2100      	movs	r1, #0
 80048be:	4630      	mov	r0, r6
 80048c0:	f7fb fc8e 	bl	80001e0 <memchr>
 80048c4:	b108      	cbz	r0, 80048ca <_printf_i+0x1f2>
 80048c6:	1b80      	subs	r0, r0, r6
 80048c8:	6060      	str	r0, [r4, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	2300      	movs	r3, #0
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	e7a8      	b.n	8004828 <_printf_i+0x150>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	4632      	mov	r2, r6
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0ab      	beq.n	800483c <_printf_i+0x164>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	079b      	lsls	r3, r3, #30
 80048e8:	d413      	bmi.n	8004912 <_printf_i+0x23a>
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	4298      	cmp	r0, r3
 80048f0:	bfb8      	it	lt
 80048f2:	4618      	movlt	r0, r3
 80048f4:	e7a4      	b.n	8004840 <_printf_i+0x168>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	47d0      	blx	sl
 8004900:	3001      	adds	r0, #1
 8004902:	d09b      	beq.n	800483c <_printf_i+0x164>
 8004904:	3501      	adds	r5, #1
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	9903      	ldr	r1, [sp, #12]
 800490a:	1a5b      	subs	r3, r3, r1
 800490c:	42ab      	cmp	r3, r5
 800490e:	dcf2      	bgt.n	80048f6 <_printf_i+0x21e>
 8004910:	e7eb      	b.n	80048ea <_printf_i+0x212>
 8004912:	2500      	movs	r5, #0
 8004914:	f104 0619 	add.w	r6, r4, #25
 8004918:	e7f5      	b.n	8004906 <_printf_i+0x22e>
 800491a:	bf00      	nop
 800491c:	08006ed6 	.word	0x08006ed6
 8004920:	08006ee7 	.word	0x08006ee7

08004924 <iprintf>:
 8004924:	b40f      	push	{r0, r1, r2, r3}
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <iprintf+0x2c>)
 8004928:	b513      	push	{r0, r1, r4, lr}
 800492a:	681c      	ldr	r4, [r3, #0]
 800492c:	b124      	cbz	r4, 8004938 <iprintf+0x14>
 800492e:	69a3      	ldr	r3, [r4, #24]
 8004930:	b913      	cbnz	r3, 8004938 <iprintf+0x14>
 8004932:	4620      	mov	r0, r4
 8004934:	f001 f866 	bl	8005a04 <__sinit>
 8004938:	ab05      	add	r3, sp, #20
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	68a1      	ldr	r1, [r4, #8]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	4620      	mov	r0, r4
 8004942:	f001 fde1 	bl	8006508 <_vfiprintf_r>
 8004946:	b002      	add	sp, #8
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	b004      	add	sp, #16
 800494e:	4770      	bx	lr
 8004950:	20000824 	.word	0x20000824

08004954 <setvbuf>:
 8004954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004958:	461d      	mov	r5, r3
 800495a:	4b5d      	ldr	r3, [pc, #372]	; (8004ad0 <setvbuf+0x17c>)
 800495c:	681f      	ldr	r7, [r3, #0]
 800495e:	4604      	mov	r4, r0
 8004960:	460e      	mov	r6, r1
 8004962:	4690      	mov	r8, r2
 8004964:	b127      	cbz	r7, 8004970 <setvbuf+0x1c>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	b913      	cbnz	r3, 8004970 <setvbuf+0x1c>
 800496a:	4638      	mov	r0, r7
 800496c:	f001 f84a 	bl	8005a04 <__sinit>
 8004970:	4b58      	ldr	r3, [pc, #352]	; (8004ad4 <setvbuf+0x180>)
 8004972:	429c      	cmp	r4, r3
 8004974:	d167      	bne.n	8004a46 <setvbuf+0xf2>
 8004976:	687c      	ldr	r4, [r7, #4]
 8004978:	f1b8 0f02 	cmp.w	r8, #2
 800497c:	d006      	beq.n	800498c <setvbuf+0x38>
 800497e:	f1b8 0f01 	cmp.w	r8, #1
 8004982:	f200 809f 	bhi.w	8004ac4 <setvbuf+0x170>
 8004986:	2d00      	cmp	r5, #0
 8004988:	f2c0 809c 	blt.w	8004ac4 <setvbuf+0x170>
 800498c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498e:	07db      	lsls	r3, r3, #31
 8004990:	d405      	bmi.n	800499e <setvbuf+0x4a>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	0598      	lsls	r0, r3, #22
 8004996:	d402      	bmi.n	800499e <setvbuf+0x4a>
 8004998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499a:	f001 f8d6 	bl	8005b4a <__retarget_lock_acquire_recursive>
 800499e:	4621      	mov	r1, r4
 80049a0:	4638      	mov	r0, r7
 80049a2:	f000 ff9b 	bl	80058dc <_fflush_r>
 80049a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a8:	b141      	cbz	r1, 80049bc <setvbuf+0x68>
 80049aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ae:	4299      	cmp	r1, r3
 80049b0:	d002      	beq.n	80049b8 <setvbuf+0x64>
 80049b2:	4638      	mov	r0, r7
 80049b4:	f001 fcd4 	bl	8006360 <_free_r>
 80049b8:	2300      	movs	r3, #0
 80049ba:	6363      	str	r3, [r4, #52]	; 0x34
 80049bc:	2300      	movs	r3, #0
 80049be:	61a3      	str	r3, [r4, #24]
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	0619      	lsls	r1, r3, #24
 80049c6:	d503      	bpl.n	80049d0 <setvbuf+0x7c>
 80049c8:	6921      	ldr	r1, [r4, #16]
 80049ca:	4638      	mov	r0, r7
 80049cc:	f001 fcc8 	bl	8006360 <_free_r>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f1b8 0f02 	cmp.w	r8, #2
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	d06c      	beq.n	8004abc <setvbuf+0x168>
 80049e2:	ab01      	add	r3, sp, #4
 80049e4:	466a      	mov	r2, sp
 80049e6:	4621      	mov	r1, r4
 80049e8:	4638      	mov	r0, r7
 80049ea:	f001 f8b0 	bl	8005b4e <__swhatbuf_r>
 80049ee:	89a3      	ldrh	r3, [r4, #12]
 80049f0:	4318      	orrs	r0, r3
 80049f2:	81a0      	strh	r0, [r4, #12]
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d130      	bne.n	8004a5a <setvbuf+0x106>
 80049f8:	9d00      	ldr	r5, [sp, #0]
 80049fa:	4628      	mov	r0, r5
 80049fc:	f001 f90c 	bl	8005c18 <malloc>
 8004a00:	4606      	mov	r6, r0
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d155      	bne.n	8004ab2 <setvbuf+0x15e>
 8004a06:	f8dd 9000 	ldr.w	r9, [sp]
 8004a0a:	45a9      	cmp	r9, r5
 8004a0c:	d14a      	bne.n	8004aa4 <setvbuf+0x150>
 8004a0e:	f04f 35ff 	mov.w	r5, #4294967295
 8004a12:	2200      	movs	r2, #0
 8004a14:	60a2      	str	r2, [r4, #8]
 8004a16:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	6122      	str	r2, [r4, #16]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a24:	6162      	str	r2, [r4, #20]
 8004a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	07d2      	lsls	r2, r2, #31
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	d405      	bmi.n	8004a3e <setvbuf+0xea>
 8004a32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a36:	d102      	bne.n	8004a3e <setvbuf+0xea>
 8004a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3a:	f001 f887 	bl	8005b4c <__retarget_lock_release_recursive>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	b003      	add	sp, #12
 8004a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <setvbuf+0x184>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	d101      	bne.n	8004a50 <setvbuf+0xfc>
 8004a4c:	68bc      	ldr	r4, [r7, #8]
 8004a4e:	e793      	b.n	8004978 <setvbuf+0x24>
 8004a50:	4b22      	ldr	r3, [pc, #136]	; (8004adc <setvbuf+0x188>)
 8004a52:	429c      	cmp	r4, r3
 8004a54:	bf08      	it	eq
 8004a56:	68fc      	ldreq	r4, [r7, #12]
 8004a58:	e78e      	b.n	8004978 <setvbuf+0x24>
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d0cd      	beq.n	80049fa <setvbuf+0xa6>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	b913      	cbnz	r3, 8004a68 <setvbuf+0x114>
 8004a62:	4638      	mov	r0, r7
 8004a64:	f000 ffce 	bl	8005a04 <__sinit>
 8004a68:	f1b8 0f01 	cmp.w	r8, #1
 8004a6c:	bf08      	it	eq
 8004a6e:	89a3      	ldrheq	r3, [r4, #12]
 8004a70:	6026      	str	r6, [r4, #0]
 8004a72:	bf04      	itt	eq
 8004a74:	f043 0301 	orreq.w	r3, r3, #1
 8004a78:	81a3      	strheq	r3, [r4, #12]
 8004a7a:	89a2      	ldrh	r2, [r4, #12]
 8004a7c:	f012 0308 	ands.w	r3, r2, #8
 8004a80:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004a84:	d01c      	beq.n	8004ac0 <setvbuf+0x16c>
 8004a86:	07d3      	lsls	r3, r2, #31
 8004a88:	bf41      	itttt	mi
 8004a8a:	2300      	movmi	r3, #0
 8004a8c:	426d      	negmi	r5, r5
 8004a8e:	60a3      	strmi	r3, [r4, #8]
 8004a90:	61a5      	strmi	r5, [r4, #24]
 8004a92:	bf58      	it	pl
 8004a94:	60a5      	strpl	r5, [r4, #8]
 8004a96:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004a98:	f015 0501 	ands.w	r5, r5, #1
 8004a9c:	d115      	bne.n	8004aca <setvbuf+0x176>
 8004a9e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004aa2:	e7c8      	b.n	8004a36 <setvbuf+0xe2>
 8004aa4:	4648      	mov	r0, r9
 8004aa6:	f001 f8b7 	bl	8005c18 <malloc>
 8004aaa:	4606      	mov	r6, r0
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d0ae      	beq.n	8004a0e <setvbuf+0xba>
 8004ab0:	464d      	mov	r5, r9
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	81a3      	strh	r3, [r4, #12]
 8004aba:	e7d0      	b.n	8004a5e <setvbuf+0x10a>
 8004abc:	2500      	movs	r5, #0
 8004abe:	e7a8      	b.n	8004a12 <setvbuf+0xbe>
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	e7e8      	b.n	8004a96 <setvbuf+0x142>
 8004ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ac8:	e7b9      	b.n	8004a3e <setvbuf+0xea>
 8004aca:	2500      	movs	r5, #0
 8004acc:	e7b7      	b.n	8004a3e <setvbuf+0xea>
 8004ace:	bf00      	nop
 8004ad0:	20000824 	.word	0x20000824
 8004ad4:	08006fac 	.word	0x08006fac
 8004ad8:	08006fcc 	.word	0x08006fcc
 8004adc:	08006f8c 	.word	0x08006f8c

08004ae0 <quorem>:
 8004ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	6903      	ldr	r3, [r0, #16]
 8004ae6:	690c      	ldr	r4, [r1, #16]
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	4607      	mov	r7, r0
 8004aec:	f2c0 8081 	blt.w	8004bf2 <quorem+0x112>
 8004af0:	3c01      	subs	r4, #1
 8004af2:	f101 0814 	add.w	r8, r1, #20
 8004af6:	f100 0514 	add.w	r5, r0, #20
 8004afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b14:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b18:	d331      	bcc.n	8004b7e <quorem+0x9e>
 8004b1a:	f04f 0e00 	mov.w	lr, #0
 8004b1e:	4640      	mov	r0, r8
 8004b20:	46ac      	mov	ip, r5
 8004b22:	46f2      	mov	sl, lr
 8004b24:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b28:	b293      	uxth	r3, r2
 8004b2a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	ebaa 0303 	sub.w	r3, sl, r3
 8004b38:	0c12      	lsrs	r2, r2, #16
 8004b3a:	f8dc a000 	ldr.w	sl, [ip]
 8004b3e:	fb06 e202 	mla	r2, r6, r2, lr
 8004b42:	fa13 f38a 	uxtah	r3, r3, sl
 8004b46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b4a:	fa1f fa82 	uxth.w	sl, r2
 8004b4e:	f8dc 2000 	ldr.w	r2, [ip]
 8004b52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004b56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b60:	4581      	cmp	r9, r0
 8004b62:	f84c 3b04 	str.w	r3, [ip], #4
 8004b66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b6a:	d2db      	bcs.n	8004b24 <quorem+0x44>
 8004b6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b70:	b92b      	cbnz	r3, 8004b7e <quorem+0x9e>
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	429d      	cmp	r5, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	d32e      	bcc.n	8004bda <quorem+0xfa>
 8004b7c:	613c      	str	r4, [r7, #16]
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f001 fade 	bl	8006140 <__mcmp>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	db24      	blt.n	8004bd2 <quorem+0xf2>
 8004b88:	3601      	adds	r6, #1
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f04f 0c00 	mov.w	ip, #0
 8004b90:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b94:	f8d0 e000 	ldr.w	lr, [r0]
 8004b98:	b293      	uxth	r3, r2
 8004b9a:	ebac 0303 	sub.w	r3, ip, r3
 8004b9e:	0c12      	lsrs	r2, r2, #16
 8004ba0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ba4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bb2:	45c1      	cmp	r9, r8
 8004bb4:	f840 3b04 	str.w	r3, [r0], #4
 8004bb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bbc:	d2e8      	bcs.n	8004b90 <quorem+0xb0>
 8004bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bc6:	b922      	cbnz	r2, 8004bd2 <quorem+0xf2>
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	429d      	cmp	r5, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	d30a      	bcc.n	8004be6 <quorem+0x106>
 8004bd0:	613c      	str	r4, [r7, #16]
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d1cc      	bne.n	8004b7c <quorem+0x9c>
 8004be2:	3c01      	subs	r4, #1
 8004be4:	e7c7      	b.n	8004b76 <quorem+0x96>
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d1f0      	bne.n	8004bd0 <quorem+0xf0>
 8004bee:	3c01      	subs	r4, #1
 8004bf0:	e7eb      	b.n	8004bca <quorem+0xea>
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e7ee      	b.n	8004bd4 <quorem+0xf4>
	...

08004bf8 <_dtoa_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	ed2d 8b02 	vpush	{d8}
 8004c00:	ec57 6b10 	vmov	r6, r7, d0
 8004c04:	b095      	sub	sp, #84	; 0x54
 8004c06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c12:	4604      	mov	r4, r0
 8004c14:	9209      	str	r2, [sp, #36]	; 0x24
 8004c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c18:	b975      	cbnz	r5, 8004c38 <_dtoa_r+0x40>
 8004c1a:	2010      	movs	r0, #16
 8004c1c:	f000 fffc 	bl	8005c18 <malloc>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6260      	str	r0, [r4, #36]	; 0x24
 8004c24:	b920      	cbnz	r0, 8004c30 <_dtoa_r+0x38>
 8004c26:	4bb2      	ldr	r3, [pc, #712]	; (8004ef0 <_dtoa_r+0x2f8>)
 8004c28:	21ea      	movs	r1, #234	; 0xea
 8004c2a:	48b2      	ldr	r0, [pc, #712]	; (8004ef4 <_dtoa_r+0x2fc>)
 8004c2c:	f001 fec2 	bl	80069b4 <__assert_func>
 8004c30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c34:	6005      	str	r5, [r0, #0]
 8004c36:	60c5      	str	r5, [r0, #12]
 8004c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	b151      	cbz	r1, 8004c54 <_dtoa_r+0x5c>
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	604a      	str	r2, [r1, #4]
 8004c42:	2301      	movs	r3, #1
 8004c44:	4093      	lsls	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f001 f83b 	bl	8005cc4 <_Bfree>
 8004c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	1e3b      	subs	r3, r7, #0
 8004c56:	bfb9      	ittee	lt
 8004c58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	9303      	strlt	r3, [sp, #12]
 8004c5e:	2300      	movge	r3, #0
 8004c60:	f8c8 3000 	strge.w	r3, [r8]
 8004c64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004c68:	4ba3      	ldr	r3, [pc, #652]	; (8004ef8 <_dtoa_r+0x300>)
 8004c6a:	bfbc      	itt	lt
 8004c6c:	2201      	movlt	r2, #1
 8004c6e:	f8c8 2000 	strlt.w	r2, [r8]
 8004c72:	ea33 0309 	bics.w	r3, r3, r9
 8004c76:	d11b      	bne.n	8004cb0 <_dtoa_r+0xb8>
 8004c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c84:	4333      	orrs	r3, r6
 8004c86:	f000 857a 	beq.w	800577e <_dtoa_r+0xb86>
 8004c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c8c:	b963      	cbnz	r3, 8004ca8 <_dtoa_r+0xb0>
 8004c8e:	4b9b      	ldr	r3, [pc, #620]	; (8004efc <_dtoa_r+0x304>)
 8004c90:	e024      	b.n	8004cdc <_dtoa_r+0xe4>
 8004c92:	4b9b      	ldr	r3, [pc, #620]	; (8004f00 <_dtoa_r+0x308>)
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	9800      	ldr	r0, [sp, #0]
 8004c9e:	b015      	add	sp, #84	; 0x54
 8004ca0:	ecbd 8b02 	vpop	{d8}
 8004ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca8:	4b94      	ldr	r3, [pc, #592]	; (8004efc <_dtoa_r+0x304>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	3303      	adds	r3, #3
 8004cae:	e7f3      	b.n	8004c98 <_dtoa_r+0xa0>
 8004cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	ec51 0b17 	vmov	r0, r1, d7
 8004cba:	2300      	movs	r3, #0
 8004cbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004cc0:	f7fb ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	b158      	cbz	r0, 8004ce0 <_dtoa_r+0xe8>
 8004cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cca:	2301      	movs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8551 	beq.w	8005778 <_dtoa_r+0xb80>
 8004cd6:	488b      	ldr	r0, [pc, #556]	; (8004f04 <_dtoa_r+0x30c>)
 8004cd8:	6018      	str	r0, [r3, #0]
 8004cda:	1e43      	subs	r3, r0, #1
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	e7dd      	b.n	8004c9c <_dtoa_r+0xa4>
 8004ce0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004ce4:	aa12      	add	r2, sp, #72	; 0x48
 8004ce6:	a913      	add	r1, sp, #76	; 0x4c
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f001 facd 	bl	8006288 <__d2b>
 8004cee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004cf2:	4683      	mov	fp, r0
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d07c      	beq.n	8004df2 <_dtoa_r+0x1fa>
 8004cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d12:	4b7d      	ldr	r3, [pc, #500]	; (8004f08 <_dtoa_r+0x310>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	4630      	mov	r0, r6
 8004d18:	4639      	mov	r1, r7
 8004d1a:	f7fb fab5 	bl	8000288 <__aeabi_dsub>
 8004d1e:	a36e      	add	r3, pc, #440	; (adr r3, 8004ed8 <_dtoa_r+0x2e0>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fc68 	bl	80005f8 <__aeabi_dmul>
 8004d28:	a36d      	add	r3, pc, #436	; (adr r3, 8004ee0 <_dtoa_r+0x2e8>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb faad 	bl	800028c <__adddf3>
 8004d32:	4606      	mov	r6, r0
 8004d34:	4628      	mov	r0, r5
 8004d36:	460f      	mov	r7, r1
 8004d38:	f7fb fbf4 	bl	8000524 <__aeabi_i2d>
 8004d3c:	a36a      	add	r3, pc, #424	; (adr r3, 8004ee8 <_dtoa_r+0x2f0>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f7fb fc59 	bl	80005f8 <__aeabi_dmul>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	f7fb fa9d 	bl	800028c <__adddf3>
 8004d52:	4606      	mov	r6, r0
 8004d54:	460f      	mov	r7, r1
 8004d56:	f7fb feff 	bl	8000b58 <__aeabi_d2iz>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4682      	mov	sl, r0
 8004d5e:	2300      	movs	r3, #0
 8004d60:	4630      	mov	r0, r6
 8004d62:	4639      	mov	r1, r7
 8004d64:	f7fb feba 	bl	8000adc <__aeabi_dcmplt>
 8004d68:	b148      	cbz	r0, 8004d7e <_dtoa_r+0x186>
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fb fbda 	bl	8000524 <__aeabi_i2d>
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	f7fb fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d78:	b908      	cbnz	r0, 8004d7e <_dtoa_r+0x186>
 8004d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d7e:	f1ba 0f16 	cmp.w	sl, #22
 8004d82:	d854      	bhi.n	8004e2e <_dtoa_r+0x236>
 8004d84:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <_dtoa_r+0x314>)
 8004d86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d92:	f7fb fea3 	bl	8000adc <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d04b      	beq.n	8004e32 <_dtoa_r+0x23a>
 8004d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d9e:	2300      	movs	r3, #0
 8004da0:	930e      	str	r3, [sp, #56]	; 0x38
 8004da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004da4:	1b5d      	subs	r5, r3, r5
 8004da6:	1e6b      	subs	r3, r5, #1
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	bf43      	ittte	mi
 8004dac:	2300      	movmi	r3, #0
 8004dae:	f1c5 0801 	rsbmi	r8, r5, #1
 8004db2:	9304      	strmi	r3, [sp, #16]
 8004db4:	f04f 0800 	movpl.w	r8, #0
 8004db8:	f1ba 0f00 	cmp.w	sl, #0
 8004dbc:	db3b      	blt.n	8004e36 <_dtoa_r+0x23e>
 8004dbe:	9b04      	ldr	r3, [sp, #16]
 8004dc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004dc4:	4453      	add	r3, sl
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9306      	str	r3, [sp, #24]
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d869      	bhi.n	8004ea6 <_dtoa_r+0x2ae>
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	bfc4      	itt	gt
 8004dd6:	3b04      	subgt	r3, #4
 8004dd8:	9305      	strgt	r3, [sp, #20]
 8004dda:	9b05      	ldr	r3, [sp, #20]
 8004ddc:	f1a3 0302 	sub.w	r3, r3, #2
 8004de0:	bfcc      	ite	gt
 8004de2:	2500      	movgt	r5, #0
 8004de4:	2501      	movle	r5, #1
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d869      	bhi.n	8004ebe <_dtoa_r+0x2c6>
 8004dea:	e8df f003 	tbb	[pc, r3]
 8004dee:	4e2c      	.short	0x4e2c
 8004df0:	5a4c      	.short	0x5a4c
 8004df2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004df6:	441d      	add	r5, r3
 8004df8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	bfc1      	itttt	gt
 8004e00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e08:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e10:	bfda      	itte	le
 8004e12:	f1c3 0320 	rsble	r3, r3, #32
 8004e16:	fa06 f003 	lslle.w	r0, r6, r3
 8004e1a:	4318      	orrgt	r0, r3
 8004e1c:	f7fb fb72 	bl	8000504 <__aeabi_ui2d>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4606      	mov	r6, r0
 8004e24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e28:	3d01      	subs	r5, #1
 8004e2a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e2c:	e771      	b.n	8004d12 <_dtoa_r+0x11a>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e7b6      	b.n	8004da0 <_dtoa_r+0x1a8>
 8004e32:	900e      	str	r0, [sp, #56]	; 0x38
 8004e34:	e7b5      	b.n	8004da2 <_dtoa_r+0x1aa>
 8004e36:	f1ca 0300 	rsb	r3, sl, #0
 8004e3a:	9306      	str	r3, [sp, #24]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	eba8 080a 	sub.w	r8, r8, sl
 8004e42:	930d      	str	r3, [sp, #52]	; 0x34
 8004e44:	e7c2      	b.n	8004dcc <_dtoa_r+0x1d4>
 8004e46:	2300      	movs	r3, #0
 8004e48:	9308      	str	r3, [sp, #32]
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dc39      	bgt.n	8004ec4 <_dtoa_r+0x2cc>
 8004e50:	f04f 0901 	mov.w	r9, #1
 8004e54:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e58:	464b      	mov	r3, r9
 8004e5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004e5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	6042      	str	r2, [r0, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	f102 0614 	add.w	r6, r2, #20
 8004e6a:	429e      	cmp	r6, r3
 8004e6c:	6841      	ldr	r1, [r0, #4]
 8004e6e:	d92f      	bls.n	8004ed0 <_dtoa_r+0x2d8>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fee7 	bl	8005c44 <_Balloc>
 8004e76:	9000      	str	r0, [sp, #0]
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d14b      	bne.n	8004f14 <_dtoa_r+0x31c>
 8004e7c:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <_dtoa_r+0x318>)
 8004e7e:	4602      	mov	r2, r0
 8004e80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e84:	e6d1      	b.n	8004c2a <_dtoa_r+0x32>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e7de      	b.n	8004e48 <_dtoa_r+0x250>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9308      	str	r3, [sp, #32]
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	eb0a 0903 	add.w	r9, sl, r3
 8004e94:	f109 0301 	add.w	r3, r9, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	bfb8      	it	lt
 8004e9e:	2301      	movlt	r3, #1
 8004ea0:	e7dd      	b.n	8004e5e <_dtoa_r+0x266>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e7f2      	b.n	8004e8c <_dtoa_r+0x294>
 8004ea6:	2501      	movs	r5, #1
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9305      	str	r3, [sp, #20]
 8004eac:	9508      	str	r5, [sp, #32]
 8004eae:	f04f 39ff 	mov.w	r9, #4294967295
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004eb8:	2312      	movs	r3, #18
 8004eba:	9209      	str	r2, [sp, #36]	; 0x24
 8004ebc:	e7cf      	b.n	8004e5e <_dtoa_r+0x266>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	9308      	str	r3, [sp, #32]
 8004ec2:	e7f4      	b.n	8004eae <_dtoa_r+0x2b6>
 8004ec4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ec8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ecc:	464b      	mov	r3, r9
 8004ece:	e7c6      	b.n	8004e5e <_dtoa_r+0x266>
 8004ed0:	3101      	adds	r1, #1
 8004ed2:	6041      	str	r1, [r0, #4]
 8004ed4:	0052      	lsls	r2, r2, #1
 8004ed6:	e7c6      	b.n	8004e66 <_dtoa_r+0x26e>
 8004ed8:	636f4361 	.word	0x636f4361
 8004edc:	3fd287a7 	.word	0x3fd287a7
 8004ee0:	8b60c8b3 	.word	0x8b60c8b3
 8004ee4:	3fc68a28 	.word	0x3fc68a28
 8004ee8:	509f79fb 	.word	0x509f79fb
 8004eec:	3fd34413 	.word	0x3fd34413
 8004ef0:	08006f05 	.word	0x08006f05
 8004ef4:	08006f1c 	.word	0x08006f1c
 8004ef8:	7ff00000 	.word	0x7ff00000
 8004efc:	08006f01 	.word	0x08006f01
 8004f00:	08006ef8 	.word	0x08006ef8
 8004f04:	08006ed5 	.word	0x08006ed5
 8004f08:	3ff80000 	.word	0x3ff80000
 8004f0c:	08007078 	.word	0x08007078
 8004f10:	08006f7b 	.word	0x08006f7b
 8004f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f16:	9a00      	ldr	r2, [sp, #0]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	9b01      	ldr	r3, [sp, #4]
 8004f1c:	2b0e      	cmp	r3, #14
 8004f1e:	f200 80ad 	bhi.w	800507c <_dtoa_r+0x484>
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	f000 80aa 	beq.w	800507c <_dtoa_r+0x484>
 8004f28:	f1ba 0f00 	cmp.w	sl, #0
 8004f2c:	dd36      	ble.n	8004f9c <_dtoa_r+0x3a4>
 8004f2e:	4ac3      	ldr	r2, [pc, #780]	; (800523c <_dtoa_r+0x644>)
 8004f30:	f00a 030f 	and.w	r3, sl, #15
 8004f34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004f44:	eeb0 8a47 	vmov.f32	s16, s14
 8004f48:	eef0 8a67 	vmov.f32	s17, s15
 8004f4c:	d016      	beq.n	8004f7c <_dtoa_r+0x384>
 8004f4e:	4bbc      	ldr	r3, [pc, #752]	; (8005240 <_dtoa_r+0x648>)
 8004f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f58:	f7fb fc78 	bl	800084c <__aeabi_ddiv>
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	f007 070f 	and.w	r7, r7, #15
 8004f64:	2503      	movs	r5, #3
 8004f66:	4eb6      	ldr	r6, [pc, #728]	; (8005240 <_dtoa_r+0x648>)
 8004f68:	b957      	cbnz	r7, 8004f80 <_dtoa_r+0x388>
 8004f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f6e:	ec53 2b18 	vmov	r2, r3, d8
 8004f72:	f7fb fc6b 	bl	800084c <__aeabi_ddiv>
 8004f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f7a:	e029      	b.n	8004fd0 <_dtoa_r+0x3d8>
 8004f7c:	2502      	movs	r5, #2
 8004f7e:	e7f2      	b.n	8004f66 <_dtoa_r+0x36e>
 8004f80:	07f9      	lsls	r1, r7, #31
 8004f82:	d508      	bpl.n	8004f96 <_dtoa_r+0x39e>
 8004f84:	ec51 0b18 	vmov	r0, r1, d8
 8004f88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	ec41 0b18 	vmov	d8, r0, r1
 8004f94:	3501      	adds	r5, #1
 8004f96:	107f      	asrs	r7, r7, #1
 8004f98:	3608      	adds	r6, #8
 8004f9a:	e7e5      	b.n	8004f68 <_dtoa_r+0x370>
 8004f9c:	f000 80a6 	beq.w	80050ec <_dtoa_r+0x4f4>
 8004fa0:	f1ca 0600 	rsb	r6, sl, #0
 8004fa4:	4ba5      	ldr	r3, [pc, #660]	; (800523c <_dtoa_r+0x644>)
 8004fa6:	4fa6      	ldr	r7, [pc, #664]	; (8005240 <_dtoa_r+0x648>)
 8004fa8:	f006 020f 	and.w	r2, r6, #15
 8004fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fb8:	f7fb fb1e 	bl	80005f8 <__aeabi_dmul>
 8004fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc0:	1136      	asrs	r6, r6, #4
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2502      	movs	r5, #2
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	f040 8085 	bne.w	80050d6 <_dtoa_r+0x4de>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1d2      	bne.n	8004f76 <_dtoa_r+0x37e>
 8004fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 808c 	beq.w	80050f0 <_dtoa_r+0x4f8>
 8004fd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fdc:	4b99      	ldr	r3, [pc, #612]	; (8005244 <_dtoa_r+0x64c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f7fb fd7a 	bl	8000adc <__aeabi_dcmplt>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	f000 8081 	beq.w	80050f0 <_dtoa_r+0x4f8>
 8004fee:	9b01      	ldr	r3, [sp, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d07d      	beq.n	80050f0 <_dtoa_r+0x4f8>
 8004ff4:	f1b9 0f00 	cmp.w	r9, #0
 8004ff8:	dd3c      	ble.n	8005074 <_dtoa_r+0x47c>
 8004ffa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	2200      	movs	r2, #0
 8005002:	4b91      	ldr	r3, [pc, #580]	; (8005248 <_dtoa_r+0x650>)
 8005004:	4630      	mov	r0, r6
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb faf6 	bl	80005f8 <__aeabi_dmul>
 800500c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005010:	3501      	adds	r5, #1
 8005012:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800501a:	4628      	mov	r0, r5
 800501c:	f7fb fa82 	bl	8000524 <__aeabi_i2d>
 8005020:	4632      	mov	r2, r6
 8005022:	463b      	mov	r3, r7
 8005024:	f7fb fae8 	bl	80005f8 <__aeabi_dmul>
 8005028:	4b88      	ldr	r3, [pc, #544]	; (800524c <_dtoa_r+0x654>)
 800502a:	2200      	movs	r2, #0
 800502c:	f7fb f92e 	bl	800028c <__adddf3>
 8005030:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800503c:	2b00      	cmp	r3, #0
 800503e:	d15c      	bne.n	80050fa <_dtoa_r+0x502>
 8005040:	4b83      	ldr	r3, [pc, #524]	; (8005250 <_dtoa_r+0x658>)
 8005042:	2200      	movs	r2, #0
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb f91e 	bl	8000288 <__aeabi_dsub>
 800504c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005050:	4606      	mov	r6, r0
 8005052:	460f      	mov	r7, r1
 8005054:	f7fb fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8005058:	2800      	cmp	r0, #0
 800505a:	f040 8296 	bne.w	800558a <_dtoa_r+0x992>
 800505e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005062:	4630      	mov	r0, r6
 8005064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb fd37 	bl	8000adc <__aeabi_dcmplt>
 800506e:	2800      	cmp	r0, #0
 8005070:	f040 8288 	bne.w	8005584 <_dtoa_r+0x98c>
 8005074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800507c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800507e:	2b00      	cmp	r3, #0
 8005080:	f2c0 8158 	blt.w	8005334 <_dtoa_r+0x73c>
 8005084:	f1ba 0f0e 	cmp.w	sl, #14
 8005088:	f300 8154 	bgt.w	8005334 <_dtoa_r+0x73c>
 800508c:	4b6b      	ldr	r3, [pc, #428]	; (800523c <_dtoa_r+0x644>)
 800508e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005092:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	f280 80e3 	bge.w	8005264 <_dtoa_r+0x66c>
 800509e:	9b01      	ldr	r3, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f300 80df 	bgt.w	8005264 <_dtoa_r+0x66c>
 80050a6:	f040 826d 	bne.w	8005584 <_dtoa_r+0x98c>
 80050aa:	4b69      	ldr	r3, [pc, #420]	; (8005250 <_dtoa_r+0x658>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb faa1 	bl	80005f8 <__aeabi_dmul>
 80050b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ba:	f7fb fd23 	bl	8000b04 <__aeabi_dcmpge>
 80050be:	9e01      	ldr	r6, [sp, #4]
 80050c0:	4637      	mov	r7, r6
 80050c2:	2800      	cmp	r0, #0
 80050c4:	f040 8243 	bne.w	800554e <_dtoa_r+0x956>
 80050c8:	9d00      	ldr	r5, [sp, #0]
 80050ca:	2331      	movs	r3, #49	; 0x31
 80050cc:	f805 3b01 	strb.w	r3, [r5], #1
 80050d0:	f10a 0a01 	add.w	sl, sl, #1
 80050d4:	e23f      	b.n	8005556 <_dtoa_r+0x95e>
 80050d6:	07f2      	lsls	r2, r6, #31
 80050d8:	d505      	bpl.n	80050e6 <_dtoa_r+0x4ee>
 80050da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050de:	f7fb fa8b 	bl	80005f8 <__aeabi_dmul>
 80050e2:	3501      	adds	r5, #1
 80050e4:	2301      	movs	r3, #1
 80050e6:	1076      	asrs	r6, r6, #1
 80050e8:	3708      	adds	r7, #8
 80050ea:	e76c      	b.n	8004fc6 <_dtoa_r+0x3ce>
 80050ec:	2502      	movs	r5, #2
 80050ee:	e76f      	b.n	8004fd0 <_dtoa_r+0x3d8>
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80050f6:	930c      	str	r3, [sp, #48]	; 0x30
 80050f8:	e78d      	b.n	8005016 <_dtoa_r+0x41e>
 80050fa:	9900      	ldr	r1, [sp, #0]
 80050fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80050fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <_dtoa_r+0x644>)
 8005102:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005106:	4401      	add	r1, r0
 8005108:	9102      	str	r1, [sp, #8]
 800510a:	9908      	ldr	r1, [sp, #32]
 800510c:	eeb0 8a47 	vmov.f32	s16, s14
 8005110:	eef0 8a67 	vmov.f32	s17, s15
 8005114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800511c:	2900      	cmp	r1, #0
 800511e:	d045      	beq.n	80051ac <_dtoa_r+0x5b4>
 8005120:	494c      	ldr	r1, [pc, #304]	; (8005254 <_dtoa_r+0x65c>)
 8005122:	2000      	movs	r0, #0
 8005124:	f7fb fb92 	bl	800084c <__aeabi_ddiv>
 8005128:	ec53 2b18 	vmov	r2, r3, d8
 800512c:	f7fb f8ac 	bl	8000288 <__aeabi_dsub>
 8005130:	9d00      	ldr	r5, [sp, #0]
 8005132:	ec41 0b18 	vmov	d8, r0, r1
 8005136:	4639      	mov	r1, r7
 8005138:	4630      	mov	r0, r6
 800513a:	f7fb fd0d 	bl	8000b58 <__aeabi_d2iz>
 800513e:	900c      	str	r0, [sp, #48]	; 0x30
 8005140:	f7fb f9f0 	bl	8000524 <__aeabi_i2d>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb f89c 	bl	8000288 <__aeabi_dsub>
 8005150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005152:	3330      	adds	r3, #48	; 0x30
 8005154:	f805 3b01 	strb.w	r3, [r5], #1
 8005158:	ec53 2b18 	vmov	r2, r3, d8
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	f7fb fcbc 	bl	8000adc <__aeabi_dcmplt>
 8005164:	2800      	cmp	r0, #0
 8005166:	d165      	bne.n	8005234 <_dtoa_r+0x63c>
 8005168:	4632      	mov	r2, r6
 800516a:	463b      	mov	r3, r7
 800516c:	4935      	ldr	r1, [pc, #212]	; (8005244 <_dtoa_r+0x64c>)
 800516e:	2000      	movs	r0, #0
 8005170:	f7fb f88a 	bl	8000288 <__aeabi_dsub>
 8005174:	ec53 2b18 	vmov	r2, r3, d8
 8005178:	f7fb fcb0 	bl	8000adc <__aeabi_dcmplt>
 800517c:	2800      	cmp	r0, #0
 800517e:	f040 80b9 	bne.w	80052f4 <_dtoa_r+0x6fc>
 8005182:	9b02      	ldr	r3, [sp, #8]
 8005184:	429d      	cmp	r5, r3
 8005186:	f43f af75 	beq.w	8005074 <_dtoa_r+0x47c>
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <_dtoa_r+0x650>)
 800518c:	ec51 0b18 	vmov	r0, r1, d8
 8005190:	2200      	movs	r2, #0
 8005192:	f7fb fa31 	bl	80005f8 <__aeabi_dmul>
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <_dtoa_r+0x650>)
 8005198:	ec41 0b18 	vmov	d8, r0, r1
 800519c:	2200      	movs	r2, #0
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb fa29 	bl	80005f8 <__aeabi_dmul>
 80051a6:	4606      	mov	r6, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	e7c4      	b.n	8005136 <_dtoa_r+0x53e>
 80051ac:	ec51 0b17 	vmov	r0, r1, d7
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	9d00      	ldr	r5, [sp, #0]
 80051b8:	930c      	str	r3, [sp, #48]	; 0x30
 80051ba:	ec41 0b18 	vmov	d8, r0, r1
 80051be:	4639      	mov	r1, r7
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7fb fcc9 	bl	8000b58 <__aeabi_d2iz>
 80051c6:	9011      	str	r0, [sp, #68]	; 0x44
 80051c8:	f7fb f9ac 	bl	8000524 <__aeabi_i2d>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4630      	mov	r0, r6
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb f858 	bl	8000288 <__aeabi_dsub>
 80051d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051da:	3330      	adds	r3, #48	; 0x30
 80051dc:	f805 3b01 	strb.w	r3, [r5], #1
 80051e0:	9b02      	ldr	r3, [sp, #8]
 80051e2:	429d      	cmp	r5, r3
 80051e4:	4606      	mov	r6, r0
 80051e6:	460f      	mov	r7, r1
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	d134      	bne.n	8005258 <_dtoa_r+0x660>
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <_dtoa_r+0x65c>)
 80051f0:	ec51 0b18 	vmov	r0, r1, d8
 80051f4:	f7fb f84a 	bl	800028c <__adddf3>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fb fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 8005204:	2800      	cmp	r0, #0
 8005206:	d175      	bne.n	80052f4 <_dtoa_r+0x6fc>
 8005208:	ec53 2b18 	vmov	r2, r3, d8
 800520c:	4911      	ldr	r1, [pc, #68]	; (8005254 <_dtoa_r+0x65c>)
 800520e:	2000      	movs	r0, #0
 8005210:	f7fb f83a 	bl	8000288 <__aeabi_dsub>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fb fc5e 	bl	8000adc <__aeabi_dcmplt>
 8005220:	2800      	cmp	r0, #0
 8005222:	f43f af27 	beq.w	8005074 <_dtoa_r+0x47c>
 8005226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005228:	1e6b      	subs	r3, r5, #1
 800522a:	930c      	str	r3, [sp, #48]	; 0x30
 800522c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d0f8      	beq.n	8005226 <_dtoa_r+0x62e>
 8005234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005238:	e04a      	b.n	80052d0 <_dtoa_r+0x6d8>
 800523a:	bf00      	nop
 800523c:	08007078 	.word	0x08007078
 8005240:	08007050 	.word	0x08007050
 8005244:	3ff00000 	.word	0x3ff00000
 8005248:	40240000 	.word	0x40240000
 800524c:	401c0000 	.word	0x401c0000
 8005250:	40140000 	.word	0x40140000
 8005254:	3fe00000 	.word	0x3fe00000
 8005258:	4baf      	ldr	r3, [pc, #700]	; (8005518 <_dtoa_r+0x920>)
 800525a:	f7fb f9cd 	bl	80005f8 <__aeabi_dmul>
 800525e:	4606      	mov	r6, r0
 8005260:	460f      	mov	r7, r1
 8005262:	e7ac      	b.n	80051be <_dtoa_r+0x5c6>
 8005264:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005268:	9d00      	ldr	r5, [sp, #0]
 800526a:	4642      	mov	r2, r8
 800526c:	464b      	mov	r3, r9
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fb faeb 	bl	800084c <__aeabi_ddiv>
 8005276:	f7fb fc6f 	bl	8000b58 <__aeabi_d2iz>
 800527a:	9002      	str	r0, [sp, #8]
 800527c:	f7fb f952 	bl	8000524 <__aeabi_i2d>
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	f7fb f9b8 	bl	80005f8 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa fffa 	bl	8000288 <__aeabi_dsub>
 8005294:	9e02      	ldr	r6, [sp, #8]
 8005296:	9f01      	ldr	r7, [sp, #4]
 8005298:	3630      	adds	r6, #48	; 0x30
 800529a:	f805 6b01 	strb.w	r6, [r5], #1
 800529e:	9e00      	ldr	r6, [sp, #0]
 80052a0:	1bae      	subs	r6, r5, r6
 80052a2:	42b7      	cmp	r7, r6
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	d137      	bne.n	800531a <_dtoa_r+0x722>
 80052aa:	f7fa ffef 	bl	800028c <__adddf3>
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	f7fb fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 80052ba:	b9c8      	cbnz	r0, 80052f0 <_dtoa_r+0x6f8>
 80052bc:	4642      	mov	r2, r8
 80052be:	464b      	mov	r3, r9
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fb fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80052c8:	b110      	cbz	r0, 80052d0 <_dtoa_r+0x6d8>
 80052ca:	9b02      	ldr	r3, [sp, #8]
 80052cc:	07d9      	lsls	r1, r3, #31
 80052ce:	d40f      	bmi.n	80052f0 <_dtoa_r+0x6f8>
 80052d0:	4620      	mov	r0, r4
 80052d2:	4659      	mov	r1, fp
 80052d4:	f000 fcf6 	bl	8005cc4 <_Bfree>
 80052d8:	2300      	movs	r3, #0
 80052da:	702b      	strb	r3, [r5, #0]
 80052dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052de:	f10a 0001 	add.w	r0, sl, #1
 80052e2:	6018      	str	r0, [r3, #0]
 80052e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f43f acd8 	beq.w	8004c9c <_dtoa_r+0xa4>
 80052ec:	601d      	str	r5, [r3, #0]
 80052ee:	e4d5      	b.n	8004c9c <_dtoa_r+0xa4>
 80052f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80052f4:	462b      	mov	r3, r5
 80052f6:	461d      	mov	r5, r3
 80052f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052fc:	2a39      	cmp	r2, #57	; 0x39
 80052fe:	d108      	bne.n	8005312 <_dtoa_r+0x71a>
 8005300:	9a00      	ldr	r2, [sp, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d1f7      	bne.n	80052f6 <_dtoa_r+0x6fe>
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	9900      	ldr	r1, [sp, #0]
 800530a:	3201      	adds	r2, #1
 800530c:	9207      	str	r2, [sp, #28]
 800530e:	2230      	movs	r2, #48	; 0x30
 8005310:	700a      	strb	r2, [r1, #0]
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	3201      	adds	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e78c      	b.n	8005234 <_dtoa_r+0x63c>
 800531a:	4b7f      	ldr	r3, [pc, #508]	; (8005518 <_dtoa_r+0x920>)
 800531c:	2200      	movs	r2, #0
 800531e:	f7fb f96b 	bl	80005f8 <__aeabi_dmul>
 8005322:	2200      	movs	r2, #0
 8005324:	2300      	movs	r3, #0
 8005326:	4606      	mov	r6, r0
 8005328:	460f      	mov	r7, r1
 800532a:	f7fb fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800532e:	2800      	cmp	r0, #0
 8005330:	d09b      	beq.n	800526a <_dtoa_r+0x672>
 8005332:	e7cd      	b.n	80052d0 <_dtoa_r+0x6d8>
 8005334:	9a08      	ldr	r2, [sp, #32]
 8005336:	2a00      	cmp	r2, #0
 8005338:	f000 80c4 	beq.w	80054c4 <_dtoa_r+0x8cc>
 800533c:	9a05      	ldr	r2, [sp, #20]
 800533e:	2a01      	cmp	r2, #1
 8005340:	f300 80a8 	bgt.w	8005494 <_dtoa_r+0x89c>
 8005344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005346:	2a00      	cmp	r2, #0
 8005348:	f000 80a0 	beq.w	800548c <_dtoa_r+0x894>
 800534c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005350:	9e06      	ldr	r6, [sp, #24]
 8005352:	4645      	mov	r5, r8
 8005354:	9a04      	ldr	r2, [sp, #16]
 8005356:	2101      	movs	r1, #1
 8005358:	441a      	add	r2, r3
 800535a:	4620      	mov	r0, r4
 800535c:	4498      	add	r8, r3
 800535e:	9204      	str	r2, [sp, #16]
 8005360:	f000 fd6c 	bl	8005e3c <__i2b>
 8005364:	4607      	mov	r7, r0
 8005366:	2d00      	cmp	r5, #0
 8005368:	dd0b      	ble.n	8005382 <_dtoa_r+0x78a>
 800536a:	9b04      	ldr	r3, [sp, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	dd08      	ble.n	8005382 <_dtoa_r+0x78a>
 8005370:	42ab      	cmp	r3, r5
 8005372:	9a04      	ldr	r2, [sp, #16]
 8005374:	bfa8      	it	ge
 8005376:	462b      	movge	r3, r5
 8005378:	eba8 0803 	sub.w	r8, r8, r3
 800537c:	1aed      	subs	r5, r5, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	9b06      	ldr	r3, [sp, #24]
 8005384:	b1fb      	cbz	r3, 80053c6 <_dtoa_r+0x7ce>
 8005386:	9b08      	ldr	r3, [sp, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 809f 	beq.w	80054cc <_dtoa_r+0x8d4>
 800538e:	2e00      	cmp	r6, #0
 8005390:	dd11      	ble.n	80053b6 <_dtoa_r+0x7be>
 8005392:	4639      	mov	r1, r7
 8005394:	4632      	mov	r2, r6
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fe0c 	bl	8005fb4 <__pow5mult>
 800539c:	465a      	mov	r2, fp
 800539e:	4601      	mov	r1, r0
 80053a0:	4607      	mov	r7, r0
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 fd60 	bl	8005e68 <__multiply>
 80053a8:	4659      	mov	r1, fp
 80053aa:	9007      	str	r0, [sp, #28]
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 fc89 	bl	8005cc4 <_Bfree>
 80053b2:	9b07      	ldr	r3, [sp, #28]
 80053b4:	469b      	mov	fp, r3
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	1b9a      	subs	r2, r3, r6
 80053ba:	d004      	beq.n	80053c6 <_dtoa_r+0x7ce>
 80053bc:	4659      	mov	r1, fp
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 fdf8 	bl	8005fb4 <__pow5mult>
 80053c4:	4683      	mov	fp, r0
 80053c6:	2101      	movs	r1, #1
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fd37 	bl	8005e3c <__i2b>
 80053ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	4606      	mov	r6, r0
 80053d4:	dd7c      	ble.n	80054d0 <_dtoa_r+0x8d8>
 80053d6:	461a      	mov	r2, r3
 80053d8:	4601      	mov	r1, r0
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 fdea 	bl	8005fb4 <__pow5mult>
 80053e0:	9b05      	ldr	r3, [sp, #20]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	4606      	mov	r6, r0
 80053e6:	dd76      	ble.n	80054d6 <_dtoa_r+0x8de>
 80053e8:	2300      	movs	r3, #0
 80053ea:	9306      	str	r3, [sp, #24]
 80053ec:	6933      	ldr	r3, [r6, #16]
 80053ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053f2:	6918      	ldr	r0, [r3, #16]
 80053f4:	f000 fcd2 	bl	8005d9c <__hi0bits>
 80053f8:	f1c0 0020 	rsb	r0, r0, #32
 80053fc:	9b04      	ldr	r3, [sp, #16]
 80053fe:	4418      	add	r0, r3
 8005400:	f010 001f 	ands.w	r0, r0, #31
 8005404:	f000 8086 	beq.w	8005514 <_dtoa_r+0x91c>
 8005408:	f1c0 0320 	rsb	r3, r0, #32
 800540c:	2b04      	cmp	r3, #4
 800540e:	dd7f      	ble.n	8005510 <_dtoa_r+0x918>
 8005410:	f1c0 001c 	rsb	r0, r0, #28
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	4403      	add	r3, r0
 8005418:	4480      	add	r8, r0
 800541a:	4405      	add	r5, r0
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	f1b8 0f00 	cmp.w	r8, #0
 8005422:	dd05      	ble.n	8005430 <_dtoa_r+0x838>
 8005424:	4659      	mov	r1, fp
 8005426:	4642      	mov	r2, r8
 8005428:	4620      	mov	r0, r4
 800542a:	f000 fe1d 	bl	8006068 <__lshift>
 800542e:	4683      	mov	fp, r0
 8005430:	9b04      	ldr	r3, [sp, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	dd05      	ble.n	8005442 <_dtoa_r+0x84a>
 8005436:	4631      	mov	r1, r6
 8005438:	461a      	mov	r2, r3
 800543a:	4620      	mov	r0, r4
 800543c:	f000 fe14 	bl	8006068 <__lshift>
 8005440:	4606      	mov	r6, r0
 8005442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d069      	beq.n	800551c <_dtoa_r+0x924>
 8005448:	4631      	mov	r1, r6
 800544a:	4658      	mov	r0, fp
 800544c:	f000 fe78 	bl	8006140 <__mcmp>
 8005450:	2800      	cmp	r0, #0
 8005452:	da63      	bge.n	800551c <_dtoa_r+0x924>
 8005454:	2300      	movs	r3, #0
 8005456:	4659      	mov	r1, fp
 8005458:	220a      	movs	r2, #10
 800545a:	4620      	mov	r0, r4
 800545c:	f000 fc54 	bl	8005d08 <__multadd>
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005466:	4683      	mov	fp, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 818f 	beq.w	800578c <_dtoa_r+0xb94>
 800546e:	4639      	mov	r1, r7
 8005470:	2300      	movs	r3, #0
 8005472:	220a      	movs	r2, #10
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fc47 	bl	8005d08 <__multadd>
 800547a:	f1b9 0f00 	cmp.w	r9, #0
 800547e:	4607      	mov	r7, r0
 8005480:	f300 808e 	bgt.w	80055a0 <_dtoa_r+0x9a8>
 8005484:	9b05      	ldr	r3, [sp, #20]
 8005486:	2b02      	cmp	r3, #2
 8005488:	dc50      	bgt.n	800552c <_dtoa_r+0x934>
 800548a:	e089      	b.n	80055a0 <_dtoa_r+0x9a8>
 800548c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800548e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005492:	e75d      	b.n	8005350 <_dtoa_r+0x758>
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	1e5e      	subs	r6, r3, #1
 8005498:	9b06      	ldr	r3, [sp, #24]
 800549a:	42b3      	cmp	r3, r6
 800549c:	bfbf      	itttt	lt
 800549e:	9b06      	ldrlt	r3, [sp, #24]
 80054a0:	9606      	strlt	r6, [sp, #24]
 80054a2:	1af2      	sublt	r2, r6, r3
 80054a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80054a6:	bfb6      	itet	lt
 80054a8:	189b      	addlt	r3, r3, r2
 80054aa:	1b9e      	subge	r6, r3, r6
 80054ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	bfb8      	it	lt
 80054b2:	2600      	movlt	r6, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb5      	itete	lt
 80054b8:	eba8 0503 	sublt.w	r5, r8, r3
 80054bc:	9b01      	ldrge	r3, [sp, #4]
 80054be:	2300      	movlt	r3, #0
 80054c0:	4645      	movge	r5, r8
 80054c2:	e747      	b.n	8005354 <_dtoa_r+0x75c>
 80054c4:	9e06      	ldr	r6, [sp, #24]
 80054c6:	9f08      	ldr	r7, [sp, #32]
 80054c8:	4645      	mov	r5, r8
 80054ca:	e74c      	b.n	8005366 <_dtoa_r+0x76e>
 80054cc:	9a06      	ldr	r2, [sp, #24]
 80054ce:	e775      	b.n	80053bc <_dtoa_r+0x7c4>
 80054d0:	9b05      	ldr	r3, [sp, #20]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	dc18      	bgt.n	8005508 <_dtoa_r+0x910>
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	b9b3      	cbnz	r3, 8005508 <_dtoa_r+0x910>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e0:	b9a3      	cbnz	r3, 800550c <_dtoa_r+0x914>
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	0d1b      	lsrs	r3, r3, #20
 80054ea:	051b      	lsls	r3, r3, #20
 80054ec:	b12b      	cbz	r3, 80054fa <_dtoa_r+0x902>
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	9304      	str	r3, [sp, #16]
 80054f4:	f108 0801 	add.w	r8, r8, #1
 80054f8:	2301      	movs	r3, #1
 80054fa:	9306      	str	r3, [sp, #24]
 80054fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f af74 	bne.w	80053ec <_dtoa_r+0x7f4>
 8005504:	2001      	movs	r0, #1
 8005506:	e779      	b.n	80053fc <_dtoa_r+0x804>
 8005508:	2300      	movs	r3, #0
 800550a:	e7f6      	b.n	80054fa <_dtoa_r+0x902>
 800550c:	9b02      	ldr	r3, [sp, #8]
 800550e:	e7f4      	b.n	80054fa <_dtoa_r+0x902>
 8005510:	d085      	beq.n	800541e <_dtoa_r+0x826>
 8005512:	4618      	mov	r0, r3
 8005514:	301c      	adds	r0, #28
 8005516:	e77d      	b.n	8005414 <_dtoa_r+0x81c>
 8005518:	40240000 	.word	0x40240000
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc38      	bgt.n	8005594 <_dtoa_r+0x99c>
 8005522:	9b05      	ldr	r3, [sp, #20]
 8005524:	2b02      	cmp	r3, #2
 8005526:	dd35      	ble.n	8005594 <_dtoa_r+0x99c>
 8005528:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800552c:	f1b9 0f00 	cmp.w	r9, #0
 8005530:	d10d      	bne.n	800554e <_dtoa_r+0x956>
 8005532:	4631      	mov	r1, r6
 8005534:	464b      	mov	r3, r9
 8005536:	2205      	movs	r2, #5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fbe5 	bl	8005d08 <__multadd>
 800553e:	4601      	mov	r1, r0
 8005540:	4606      	mov	r6, r0
 8005542:	4658      	mov	r0, fp
 8005544:	f000 fdfc 	bl	8006140 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	f73f adbd 	bgt.w	80050c8 <_dtoa_r+0x4d0>
 800554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005550:	9d00      	ldr	r5, [sp, #0]
 8005552:	ea6f 0a03 	mvn.w	sl, r3
 8005556:	f04f 0800 	mov.w	r8, #0
 800555a:	4631      	mov	r1, r6
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fbb1 	bl	8005cc4 <_Bfree>
 8005562:	2f00      	cmp	r7, #0
 8005564:	f43f aeb4 	beq.w	80052d0 <_dtoa_r+0x6d8>
 8005568:	f1b8 0f00 	cmp.w	r8, #0
 800556c:	d005      	beq.n	800557a <_dtoa_r+0x982>
 800556e:	45b8      	cmp	r8, r7
 8005570:	d003      	beq.n	800557a <_dtoa_r+0x982>
 8005572:	4641      	mov	r1, r8
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fba5 	bl	8005cc4 <_Bfree>
 800557a:	4639      	mov	r1, r7
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fba1 	bl	8005cc4 <_Bfree>
 8005582:	e6a5      	b.n	80052d0 <_dtoa_r+0x6d8>
 8005584:	2600      	movs	r6, #0
 8005586:	4637      	mov	r7, r6
 8005588:	e7e1      	b.n	800554e <_dtoa_r+0x956>
 800558a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800558c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005590:	4637      	mov	r7, r6
 8005592:	e599      	b.n	80050c8 <_dtoa_r+0x4d0>
 8005594:	9b08      	ldr	r3, [sp, #32]
 8005596:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80fd 	beq.w	800579a <_dtoa_r+0xba2>
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	dd05      	ble.n	80055b0 <_dtoa_r+0x9b8>
 80055a4:	4639      	mov	r1, r7
 80055a6:	462a      	mov	r2, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fd5d 	bl	8006068 <__lshift>
 80055ae:	4607      	mov	r7, r0
 80055b0:	9b06      	ldr	r3, [sp, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05c      	beq.n	8005670 <_dtoa_r+0xa78>
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fb43 	bl	8005c44 <_Balloc>
 80055be:	4605      	mov	r5, r0
 80055c0:	b928      	cbnz	r0, 80055ce <_dtoa_r+0x9d6>
 80055c2:	4b80      	ldr	r3, [pc, #512]	; (80057c4 <_dtoa_r+0xbcc>)
 80055c4:	4602      	mov	r2, r0
 80055c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80055ca:	f7ff bb2e 	b.w	8004c2a <_dtoa_r+0x32>
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	3202      	adds	r2, #2
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	f107 010c 	add.w	r1, r7, #12
 80055d8:	300c      	adds	r0, #12
 80055da:	f000 fb25 	bl	8005c28 <memcpy>
 80055de:	2201      	movs	r2, #1
 80055e0:	4629      	mov	r1, r5
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fd40 	bl	8006068 <__lshift>
 80055e8:	9b00      	ldr	r3, [sp, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	9b00      	ldr	r3, [sp, #0]
 80055f0:	444b      	add	r3, r9
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	9b02      	ldr	r3, [sp, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	46b8      	mov	r8, r7
 80055fc:	9306      	str	r3, [sp, #24]
 80055fe:	4607      	mov	r7, r0
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	4631      	mov	r1, r6
 8005604:	3b01      	subs	r3, #1
 8005606:	4658      	mov	r0, fp
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	f7ff fa69 	bl	8004ae0 <quorem>
 800560e:	4603      	mov	r3, r0
 8005610:	3330      	adds	r3, #48	; 0x30
 8005612:	9004      	str	r0, [sp, #16]
 8005614:	4641      	mov	r1, r8
 8005616:	4658      	mov	r0, fp
 8005618:	9308      	str	r3, [sp, #32]
 800561a:	f000 fd91 	bl	8006140 <__mcmp>
 800561e:	463a      	mov	r2, r7
 8005620:	4681      	mov	r9, r0
 8005622:	4631      	mov	r1, r6
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fda7 	bl	8006178 <__mdiff>
 800562a:	68c2      	ldr	r2, [r0, #12]
 800562c:	9b08      	ldr	r3, [sp, #32]
 800562e:	4605      	mov	r5, r0
 8005630:	bb02      	cbnz	r2, 8005674 <_dtoa_r+0xa7c>
 8005632:	4601      	mov	r1, r0
 8005634:	4658      	mov	r0, fp
 8005636:	f000 fd83 	bl	8006140 <__mcmp>
 800563a:	9b08      	ldr	r3, [sp, #32]
 800563c:	4602      	mov	r2, r0
 800563e:	4629      	mov	r1, r5
 8005640:	4620      	mov	r0, r4
 8005642:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005646:	f000 fb3d 	bl	8005cc4 <_Bfree>
 800564a:	9b05      	ldr	r3, [sp, #20]
 800564c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800564e:	9d01      	ldr	r5, [sp, #4]
 8005650:	ea43 0102 	orr.w	r1, r3, r2
 8005654:	9b06      	ldr	r3, [sp, #24]
 8005656:	430b      	orrs	r3, r1
 8005658:	9b08      	ldr	r3, [sp, #32]
 800565a:	d10d      	bne.n	8005678 <_dtoa_r+0xa80>
 800565c:	2b39      	cmp	r3, #57	; 0x39
 800565e:	d029      	beq.n	80056b4 <_dtoa_r+0xabc>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	dd01      	ble.n	800566a <_dtoa_r+0xa72>
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	3331      	adds	r3, #49	; 0x31
 800566a:	9a02      	ldr	r2, [sp, #8]
 800566c:	7013      	strb	r3, [r2, #0]
 800566e:	e774      	b.n	800555a <_dtoa_r+0x962>
 8005670:	4638      	mov	r0, r7
 8005672:	e7b9      	b.n	80055e8 <_dtoa_r+0x9f0>
 8005674:	2201      	movs	r2, #1
 8005676:	e7e2      	b.n	800563e <_dtoa_r+0xa46>
 8005678:	f1b9 0f00 	cmp.w	r9, #0
 800567c:	db06      	blt.n	800568c <_dtoa_r+0xa94>
 800567e:	9905      	ldr	r1, [sp, #20]
 8005680:	ea41 0909 	orr.w	r9, r1, r9
 8005684:	9906      	ldr	r1, [sp, #24]
 8005686:	ea59 0101 	orrs.w	r1, r9, r1
 800568a:	d120      	bne.n	80056ce <_dtoa_r+0xad6>
 800568c:	2a00      	cmp	r2, #0
 800568e:	ddec      	ble.n	800566a <_dtoa_r+0xa72>
 8005690:	4659      	mov	r1, fp
 8005692:	2201      	movs	r2, #1
 8005694:	4620      	mov	r0, r4
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	f000 fce6 	bl	8006068 <__lshift>
 800569c:	4631      	mov	r1, r6
 800569e:	4683      	mov	fp, r0
 80056a0:	f000 fd4e 	bl	8006140 <__mcmp>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	9b01      	ldr	r3, [sp, #4]
 80056a8:	dc02      	bgt.n	80056b0 <_dtoa_r+0xab8>
 80056aa:	d1de      	bne.n	800566a <_dtoa_r+0xa72>
 80056ac:	07da      	lsls	r2, r3, #31
 80056ae:	d5dc      	bpl.n	800566a <_dtoa_r+0xa72>
 80056b0:	2b39      	cmp	r3, #57	; 0x39
 80056b2:	d1d8      	bne.n	8005666 <_dtoa_r+0xa6e>
 80056b4:	9a02      	ldr	r2, [sp, #8]
 80056b6:	2339      	movs	r3, #57	; 0x39
 80056b8:	7013      	strb	r3, [r2, #0]
 80056ba:	462b      	mov	r3, r5
 80056bc:	461d      	mov	r5, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056c4:	2a39      	cmp	r2, #57	; 0x39
 80056c6:	d050      	beq.n	800576a <_dtoa_r+0xb72>
 80056c8:	3201      	adds	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e745      	b.n	800555a <_dtoa_r+0x962>
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	dd03      	ble.n	80056da <_dtoa_r+0xae2>
 80056d2:	2b39      	cmp	r3, #57	; 0x39
 80056d4:	d0ee      	beq.n	80056b4 <_dtoa_r+0xabc>
 80056d6:	3301      	adds	r3, #1
 80056d8:	e7c7      	b.n	800566a <_dtoa_r+0xa72>
 80056da:	9a01      	ldr	r2, [sp, #4]
 80056dc:	9907      	ldr	r1, [sp, #28]
 80056de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80056e2:	428a      	cmp	r2, r1
 80056e4:	d02a      	beq.n	800573c <_dtoa_r+0xb44>
 80056e6:	4659      	mov	r1, fp
 80056e8:	2300      	movs	r3, #0
 80056ea:	220a      	movs	r2, #10
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fb0b 	bl	8005d08 <__multadd>
 80056f2:	45b8      	cmp	r8, r7
 80056f4:	4683      	mov	fp, r0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	f04f 020a 	mov.w	r2, #10
 80056fe:	4641      	mov	r1, r8
 8005700:	4620      	mov	r0, r4
 8005702:	d107      	bne.n	8005714 <_dtoa_r+0xb1c>
 8005704:	f000 fb00 	bl	8005d08 <__multadd>
 8005708:	4680      	mov	r8, r0
 800570a:	4607      	mov	r7, r0
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	3301      	adds	r3, #1
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	e775      	b.n	8005600 <_dtoa_r+0xa08>
 8005714:	f000 faf8 	bl	8005d08 <__multadd>
 8005718:	4639      	mov	r1, r7
 800571a:	4680      	mov	r8, r0
 800571c:	2300      	movs	r3, #0
 800571e:	220a      	movs	r2, #10
 8005720:	4620      	mov	r0, r4
 8005722:	f000 faf1 	bl	8005d08 <__multadd>
 8005726:	4607      	mov	r7, r0
 8005728:	e7f0      	b.n	800570c <_dtoa_r+0xb14>
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	9a00      	ldr	r2, [sp, #0]
 8005730:	bfcc      	ite	gt
 8005732:	464d      	movgt	r5, r9
 8005734:	2501      	movle	r5, #1
 8005736:	4415      	add	r5, r2
 8005738:	f04f 0800 	mov.w	r8, #0
 800573c:	4659      	mov	r1, fp
 800573e:	2201      	movs	r2, #1
 8005740:	4620      	mov	r0, r4
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f000 fc90 	bl	8006068 <__lshift>
 8005748:	4631      	mov	r1, r6
 800574a:	4683      	mov	fp, r0
 800574c:	f000 fcf8 	bl	8006140 <__mcmp>
 8005750:	2800      	cmp	r0, #0
 8005752:	dcb2      	bgt.n	80056ba <_dtoa_r+0xac2>
 8005754:	d102      	bne.n	800575c <_dtoa_r+0xb64>
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	07db      	lsls	r3, r3, #31
 800575a:	d4ae      	bmi.n	80056ba <_dtoa_r+0xac2>
 800575c:	462b      	mov	r3, r5
 800575e:	461d      	mov	r5, r3
 8005760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005764:	2a30      	cmp	r2, #48	; 0x30
 8005766:	d0fa      	beq.n	800575e <_dtoa_r+0xb66>
 8005768:	e6f7      	b.n	800555a <_dtoa_r+0x962>
 800576a:	9a00      	ldr	r2, [sp, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d1a5      	bne.n	80056bc <_dtoa_r+0xac4>
 8005770:	f10a 0a01 	add.w	sl, sl, #1
 8005774:	2331      	movs	r3, #49	; 0x31
 8005776:	e779      	b.n	800566c <_dtoa_r+0xa74>
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <_dtoa_r+0xbd0>)
 800577a:	f7ff baaf 	b.w	8004cdc <_dtoa_r+0xe4>
 800577e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005780:	2b00      	cmp	r3, #0
 8005782:	f47f aa86 	bne.w	8004c92 <_dtoa_r+0x9a>
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <_dtoa_r+0xbd4>)
 8005788:	f7ff baa8 	b.w	8004cdc <_dtoa_r+0xe4>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	dc03      	bgt.n	800579a <_dtoa_r+0xba2>
 8005792:	9b05      	ldr	r3, [sp, #20]
 8005794:	2b02      	cmp	r3, #2
 8005796:	f73f aec9 	bgt.w	800552c <_dtoa_r+0x934>
 800579a:	9d00      	ldr	r5, [sp, #0]
 800579c:	4631      	mov	r1, r6
 800579e:	4658      	mov	r0, fp
 80057a0:	f7ff f99e 	bl	8004ae0 <quorem>
 80057a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80057a8:	f805 3b01 	strb.w	r3, [r5], #1
 80057ac:	9a00      	ldr	r2, [sp, #0]
 80057ae:	1aaa      	subs	r2, r5, r2
 80057b0:	4591      	cmp	r9, r2
 80057b2:	ddba      	ble.n	800572a <_dtoa_r+0xb32>
 80057b4:	4659      	mov	r1, fp
 80057b6:	2300      	movs	r3, #0
 80057b8:	220a      	movs	r2, #10
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 faa4 	bl	8005d08 <__multadd>
 80057c0:	4683      	mov	fp, r0
 80057c2:	e7eb      	b.n	800579c <_dtoa_r+0xba4>
 80057c4:	08006f7b 	.word	0x08006f7b
 80057c8:	08006ed4 	.word	0x08006ed4
 80057cc:	08006ef8 	.word	0x08006ef8

080057d0 <__sflush_r>:
 80057d0:	898a      	ldrh	r2, [r1, #12]
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	0710      	lsls	r0, r2, #28
 80057da:	460c      	mov	r4, r1
 80057dc:	d458      	bmi.n	8005890 <__sflush_r+0xc0>
 80057de:	684b      	ldr	r3, [r1, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc05      	bgt.n	80057f0 <__sflush_r+0x20>
 80057e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dc02      	bgt.n	80057f0 <__sflush_r+0x20>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d0f9      	beq.n	80057ea <__sflush_r+0x1a>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057fc:	682f      	ldr	r7, [r5, #0]
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	d032      	beq.n	8005868 <__sflush_r+0x98>
 8005802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	075a      	lsls	r2, r3, #29
 8005808:	d505      	bpl.n	8005816 <__sflush_r+0x46>
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	1ac0      	subs	r0, r0, r3
 800580e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005810:	b10b      	cbz	r3, 8005816 <__sflush_r+0x46>
 8005812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005814:	1ac0      	subs	r0, r0, r3
 8005816:	2300      	movs	r3, #0
 8005818:	4602      	mov	r2, r0
 800581a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581c:	6a21      	ldr	r1, [r4, #32]
 800581e:	4628      	mov	r0, r5
 8005820:	47b0      	blx	r6
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	d106      	bne.n	8005836 <__sflush_r+0x66>
 8005828:	6829      	ldr	r1, [r5, #0]
 800582a:	291d      	cmp	r1, #29
 800582c:	d82c      	bhi.n	8005888 <__sflush_r+0xb8>
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <__sflush_r+0x108>)
 8005830:	40ca      	lsrs	r2, r1
 8005832:	07d6      	lsls	r6, r2, #31
 8005834:	d528      	bpl.n	8005888 <__sflush_r+0xb8>
 8005836:	2200      	movs	r2, #0
 8005838:	6062      	str	r2, [r4, #4]
 800583a:	04d9      	lsls	r1, r3, #19
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	d504      	bpl.n	800584c <__sflush_r+0x7c>
 8005842:	1c42      	adds	r2, r0, #1
 8005844:	d101      	bne.n	800584a <__sflush_r+0x7a>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	b903      	cbnz	r3, 800584c <__sflush_r+0x7c>
 800584a:	6560      	str	r0, [r4, #84]	; 0x54
 800584c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584e:	602f      	str	r7, [r5, #0]
 8005850:	2900      	cmp	r1, #0
 8005852:	d0ca      	beq.n	80057ea <__sflush_r+0x1a>
 8005854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005858:	4299      	cmp	r1, r3
 800585a:	d002      	beq.n	8005862 <__sflush_r+0x92>
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fd7f 	bl	8006360 <_free_r>
 8005862:	2000      	movs	r0, #0
 8005864:	6360      	str	r0, [r4, #52]	; 0x34
 8005866:	e7c1      	b.n	80057ec <__sflush_r+0x1c>
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	2301      	movs	r3, #1
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c41      	adds	r1, r0, #1
 8005872:	d1c7      	bne.n	8005804 <__sflush_r+0x34>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c4      	beq.n	8005804 <__sflush_r+0x34>
 800587a:	2b1d      	cmp	r3, #29
 800587c:	d001      	beq.n	8005882 <__sflush_r+0xb2>
 800587e:	2b16      	cmp	r3, #22
 8005880:	d101      	bne.n	8005886 <__sflush_r+0xb6>
 8005882:	602f      	str	r7, [r5, #0]
 8005884:	e7b1      	b.n	80057ea <__sflush_r+0x1a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7ad      	b.n	80057ec <__sflush_r+0x1c>
 8005890:	690f      	ldr	r7, [r1, #16]
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0a9      	beq.n	80057ea <__sflush_r+0x1a>
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	680e      	ldr	r6, [r1, #0]
 800589a:	bf08      	it	eq
 800589c:	694b      	ldreq	r3, [r1, #20]
 800589e:	600f      	str	r7, [r1, #0]
 80058a0:	bf18      	it	ne
 80058a2:	2300      	movne	r3, #0
 80058a4:	eba6 0807 	sub.w	r8, r6, r7
 80058a8:	608b      	str	r3, [r1, #8]
 80058aa:	f1b8 0f00 	cmp.w	r8, #0
 80058ae:	dd9c      	ble.n	80057ea <__sflush_r+0x1a>
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b4:	4643      	mov	r3, r8
 80058b6:	463a      	mov	r2, r7
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b0      	blx	r6
 80058bc:	2800      	cmp	r0, #0
 80058be:	dc06      	bgt.n	80058ce <__sflush_r+0xfe>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e78e      	b.n	80057ec <__sflush_r+0x1c>
 80058ce:	4407      	add	r7, r0
 80058d0:	eba8 0800 	sub.w	r8, r8, r0
 80058d4:	e7e9      	b.n	80058aa <__sflush_r+0xda>
 80058d6:	bf00      	nop
 80058d8:	20400001 	.word	0x20400001

080058dc <_fflush_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	4605      	mov	r5, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	b913      	cbnz	r3, 80058ec <_fflush_r+0x10>
 80058e6:	2500      	movs	r5, #0
 80058e8:	4628      	mov	r0, r5
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	b118      	cbz	r0, 80058f6 <_fflush_r+0x1a>
 80058ee:	6983      	ldr	r3, [r0, #24]
 80058f0:	b90b      	cbnz	r3, 80058f6 <_fflush_r+0x1a>
 80058f2:	f000 f887 	bl	8005a04 <__sinit>
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <_fflush_r+0x6c>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d11b      	bne.n	8005934 <_fflush_r+0x58>
 80058fc:	686c      	ldr	r4, [r5, #4]
 80058fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ef      	beq.n	80058e6 <_fflush_r+0xa>
 8005906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005908:	07d0      	lsls	r0, r2, #31
 800590a:	d404      	bmi.n	8005916 <_fflush_r+0x3a>
 800590c:	0599      	lsls	r1, r3, #22
 800590e:	d402      	bmi.n	8005916 <_fflush_r+0x3a>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f000 f91a 	bl	8005b4a <__retarget_lock_acquire_recursive>
 8005916:	4628      	mov	r0, r5
 8005918:	4621      	mov	r1, r4
 800591a:	f7ff ff59 	bl	80057d0 <__sflush_r>
 800591e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005920:	07da      	lsls	r2, r3, #31
 8005922:	4605      	mov	r5, r0
 8005924:	d4e0      	bmi.n	80058e8 <_fflush_r+0xc>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	059b      	lsls	r3, r3, #22
 800592a:	d4dd      	bmi.n	80058e8 <_fflush_r+0xc>
 800592c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592e:	f000 f90d 	bl	8005b4c <__retarget_lock_release_recursive>
 8005932:	e7d9      	b.n	80058e8 <_fflush_r+0xc>
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <_fflush_r+0x70>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <_fflush_r+0x62>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7df      	b.n	80058fe <_fflush_r+0x22>
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <_fflush_r+0x74>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7da      	b.n	80058fe <_fflush_r+0x22>
 8005948:	08006fac 	.word	0x08006fac
 800594c:	08006fcc 	.word	0x08006fcc
 8005950:	08006f8c 	.word	0x08006f8c

08005954 <std>:
 8005954:	2300      	movs	r3, #0
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
 800595a:	e9c0 3300 	strd	r3, r3, [r0]
 800595e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005962:	6083      	str	r3, [r0, #8]
 8005964:	8181      	strh	r1, [r0, #12]
 8005966:	6643      	str	r3, [r0, #100]	; 0x64
 8005968:	81c2      	strh	r2, [r0, #14]
 800596a:	6183      	str	r3, [r0, #24]
 800596c:	4619      	mov	r1, r3
 800596e:	2208      	movs	r2, #8
 8005970:	305c      	adds	r0, #92	; 0x5c
 8005972:	f7fe fb65 	bl	8004040 <memset>
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x38>)
 8005978:	6263      	str	r3, [r4, #36]	; 0x24
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <std+0x3c>)
 800597c:	62a3      	str	r3, [r4, #40]	; 0x28
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <std+0x40>)
 8005980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <std+0x44>)
 8005984:	6224      	str	r4, [r4, #32]
 8005986:	6323      	str	r3, [r4, #48]	; 0x30
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	08006789 	.word	0x08006789
 8005990:	080067ab 	.word	0x080067ab
 8005994:	080067e3 	.word	0x080067e3
 8005998:	08006807 	.word	0x08006807

0800599c <_cleanup_r>:
 800599c:	4901      	ldr	r1, [pc, #4]	; (80059a4 <_cleanup_r+0x8>)
 800599e:	f000 b8af 	b.w	8005b00 <_fwalk_reent>
 80059a2:	bf00      	nop
 80059a4:	080058dd 	.word	0x080058dd

080059a8 <__sfmoreglue>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	1e4a      	subs	r2, r1, #1
 80059ac:	2568      	movs	r5, #104	; 0x68
 80059ae:	4355      	muls	r5, r2
 80059b0:	460e      	mov	r6, r1
 80059b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b6:	f000 fd23 	bl	8006400 <_malloc_r>
 80059ba:	4604      	mov	r4, r0
 80059bc:	b140      	cbz	r0, 80059d0 <__sfmoreglue+0x28>
 80059be:	2100      	movs	r1, #0
 80059c0:	e9c0 1600 	strd	r1, r6, [r0]
 80059c4:	300c      	adds	r0, #12
 80059c6:	60a0      	str	r0, [r4, #8]
 80059c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059cc:	f7fe fb38 	bl	8004040 <memset>
 80059d0:	4620      	mov	r0, r4
 80059d2:	bd70      	pop	{r4, r5, r6, pc}

080059d4 <__sfp_lock_acquire>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sfp_lock_acquire+0x8>)
 80059d6:	f000 b8b8 	b.w	8005b4a <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	20000bc8 	.word	0x20000bc8

080059e0 <__sfp_lock_release>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sfp_lock_release+0x8>)
 80059e2:	f000 b8b3 	b.w	8005b4c <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	20000bc8 	.word	0x20000bc8

080059ec <__sinit_lock_acquire>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__sinit_lock_acquire+0x8>)
 80059ee:	f000 b8ac 	b.w	8005b4a <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	20000bc3 	.word	0x20000bc3

080059f8 <__sinit_lock_release>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__sinit_lock_release+0x8>)
 80059fa:	f000 b8a7 	b.w	8005b4c <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000bc3 	.word	0x20000bc3

08005a04 <__sinit>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
 8005a08:	f7ff fff0 	bl	80059ec <__sinit_lock_acquire>
 8005a0c:	69a3      	ldr	r3, [r4, #24]
 8005a0e:	b11b      	cbz	r3, 8005a18 <__sinit+0x14>
 8005a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a14:	f7ff bff0 	b.w	80059f8 <__sinit_lock_release>
 8005a18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <__sinit+0x68>)
 8005a20:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <__sinit+0x6c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	bf04      	itt	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	61a3      	streq	r3, [r4, #24]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 f820 	bl	8005a74 <__sfp>
 8005a34:	6060      	str	r0, [r4, #4]
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f81c 	bl	8005a74 <__sfp>
 8005a3c:	60a0      	str	r0, [r4, #8]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f818 	bl	8005a74 <__sfp>
 8005a44:	2200      	movs	r2, #0
 8005a46:	60e0      	str	r0, [r4, #12]
 8005a48:	2104      	movs	r1, #4
 8005a4a:	6860      	ldr	r0, [r4, #4]
 8005a4c:	f7ff ff82 	bl	8005954 <std>
 8005a50:	68a0      	ldr	r0, [r4, #8]
 8005a52:	2201      	movs	r2, #1
 8005a54:	2109      	movs	r1, #9
 8005a56:	f7ff ff7d 	bl	8005954 <std>
 8005a5a:	68e0      	ldr	r0, [r4, #12]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	2112      	movs	r1, #18
 8005a60:	f7ff ff78 	bl	8005954 <std>
 8005a64:	2301      	movs	r3, #1
 8005a66:	61a3      	str	r3, [r4, #24]
 8005a68:	e7d2      	b.n	8005a10 <__sinit+0xc>
 8005a6a:	bf00      	nop
 8005a6c:	08006ec0 	.word	0x08006ec0
 8005a70:	0800599d 	.word	0x0800599d

08005a74 <__sfp>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	4607      	mov	r7, r0
 8005a78:	f7ff ffac 	bl	80059d4 <__sfp_lock_acquire>
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <__sfp+0x84>)
 8005a7e:	681e      	ldr	r6, [r3, #0]
 8005a80:	69b3      	ldr	r3, [r6, #24]
 8005a82:	b913      	cbnz	r3, 8005a8a <__sfp+0x16>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff ffbd 	bl	8005a04 <__sinit>
 8005a8a:	3648      	adds	r6, #72	; 0x48
 8005a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	d503      	bpl.n	8005a9c <__sfp+0x28>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	b30b      	cbz	r3, 8005adc <__sfp+0x68>
 8005a98:	6836      	ldr	r6, [r6, #0]
 8005a9a:	e7f7      	b.n	8005a8c <__sfp+0x18>
 8005a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005aa0:	b9d5      	cbnz	r5, 8005ad8 <__sfp+0x64>
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <__sfp+0x88>)
 8005aa4:	60e3      	str	r3, [r4, #12]
 8005aa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aaa:	6665      	str	r5, [r4, #100]	; 0x64
 8005aac:	f000 f84c 	bl	8005b48 <__retarget_lock_init_recursive>
 8005ab0:	f7ff ff96 	bl	80059e0 <__sfp_lock_release>
 8005ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005abc:	6025      	str	r5, [r4, #0]
 8005abe:	61a5      	str	r5, [r4, #24]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac8:	f7fe faba 	bl	8004040 <memset>
 8005acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad8:	3468      	adds	r4, #104	; 0x68
 8005ada:	e7d9      	b.n	8005a90 <__sfp+0x1c>
 8005adc:	2104      	movs	r1, #4
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7ff ff62 	bl	80059a8 <__sfmoreglue>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	6030      	str	r0, [r6, #0]
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d1d5      	bne.n	8005a98 <__sfp+0x24>
 8005aec:	f7ff ff78 	bl	80059e0 <__sfp_lock_release>
 8005af0:	230c      	movs	r3, #12
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	e7ee      	b.n	8005ad4 <__sfp+0x60>
 8005af6:	bf00      	nop
 8005af8:	08006ec0 	.word	0x08006ec0
 8005afc:	ffff0001 	.word	0xffff0001

08005b00 <_fwalk_reent>:
 8005b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b04:	4606      	mov	r6, r0
 8005b06:	4688      	mov	r8, r1
 8005b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b0c:	2700      	movs	r7, #0
 8005b0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b12:	f1b9 0901 	subs.w	r9, r9, #1
 8005b16:	d505      	bpl.n	8005b24 <_fwalk_reent+0x24>
 8005b18:	6824      	ldr	r4, [r4, #0]
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d1f7      	bne.n	8005b0e <_fwalk_reent+0xe>
 8005b1e:	4638      	mov	r0, r7
 8005b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b24:	89ab      	ldrh	r3, [r5, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d907      	bls.n	8005b3a <_fwalk_reent+0x3a>
 8005b2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	d003      	beq.n	8005b3a <_fwalk_reent+0x3a>
 8005b32:	4629      	mov	r1, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	47c0      	blx	r8
 8005b38:	4307      	orrs	r7, r0
 8005b3a:	3568      	adds	r5, #104	; 0x68
 8005b3c:	e7e9      	b.n	8005b12 <_fwalk_reent+0x12>
	...

08005b40 <_localeconv_r>:
 8005b40:	4800      	ldr	r0, [pc, #0]	; (8005b44 <_localeconv_r+0x4>)
 8005b42:	4770      	bx	lr
 8005b44:	20000978 	.word	0x20000978

08005b48 <__retarget_lock_init_recursive>:
 8005b48:	4770      	bx	lr

08005b4a <__retarget_lock_acquire_recursive>:
 8005b4a:	4770      	bx	lr

08005b4c <__retarget_lock_release_recursive>:
 8005b4c:	4770      	bx	lr

08005b4e <__swhatbuf_r>:
 8005b4e:	b570      	push	{r4, r5, r6, lr}
 8005b50:	460e      	mov	r6, r1
 8005b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b56:	2900      	cmp	r1, #0
 8005b58:	b096      	sub	sp, #88	; 0x58
 8005b5a:	4614      	mov	r4, r2
 8005b5c:	461d      	mov	r5, r3
 8005b5e:	da07      	bge.n	8005b70 <__swhatbuf_r+0x22>
 8005b60:	2300      	movs	r3, #0
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	89b3      	ldrh	r3, [r6, #12]
 8005b66:	061a      	lsls	r2, r3, #24
 8005b68:	d410      	bmi.n	8005b8c <__swhatbuf_r+0x3e>
 8005b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6e:	e00e      	b.n	8005b8e <__swhatbuf_r+0x40>
 8005b70:	466a      	mov	r2, sp
 8005b72:	f000 ff5f 	bl	8006a34 <_fstat_r>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	dbf2      	blt.n	8005b60 <__swhatbuf_r+0x12>
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b84:	425a      	negs	r2, r3
 8005b86:	415a      	adcs	r2, r3
 8005b88:	602a      	str	r2, [r5, #0]
 8005b8a:	e7ee      	b.n	8005b6a <__swhatbuf_r+0x1c>
 8005b8c:	2340      	movs	r3, #64	; 0x40
 8005b8e:	2000      	movs	r0, #0
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	b016      	add	sp, #88	; 0x58
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b98 <__smakebuf_r>:
 8005b98:	898b      	ldrh	r3, [r1, #12]
 8005b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b9c:	079d      	lsls	r5, r3, #30
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	d507      	bpl.n	8005bb4 <__smakebuf_r+0x1c>
 8005ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	6123      	str	r3, [r4, #16]
 8005bac:	2301      	movs	r3, #1
 8005bae:	6163      	str	r3, [r4, #20]
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	ab01      	add	r3, sp, #4
 8005bb6:	466a      	mov	r2, sp
 8005bb8:	f7ff ffc9 	bl	8005b4e <__swhatbuf_r>
 8005bbc:	9900      	ldr	r1, [sp, #0]
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f000 fc1d 	bl	8006400 <_malloc_r>
 8005bc6:	b948      	cbnz	r0, 8005bdc <__smakebuf_r+0x44>
 8005bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bcc:	059a      	lsls	r2, r3, #22
 8005bce:	d4ef      	bmi.n	8005bb0 <__smakebuf_r+0x18>
 8005bd0:	f023 0303 	bic.w	r3, r3, #3
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	e7e3      	b.n	8005ba4 <__smakebuf_r+0xc>
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <__smakebuf_r+0x7c>)
 8005bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	6020      	str	r0, [r4, #0]
 8005be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	6163      	str	r3, [r4, #20]
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	6120      	str	r0, [r4, #16]
 8005bf2:	b15b      	cbz	r3, 8005c0c <__smakebuf_r+0x74>
 8005bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f000 ff2d 	bl	8006a58 <_isatty_r>
 8005bfe:	b128      	cbz	r0, 8005c0c <__smakebuf_r+0x74>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	89a0      	ldrh	r0, [r4, #12]
 8005c0e:	4305      	orrs	r5, r0
 8005c10:	81a5      	strh	r5, [r4, #12]
 8005c12:	e7cd      	b.n	8005bb0 <__smakebuf_r+0x18>
 8005c14:	0800599d 	.word	0x0800599d

08005c18 <malloc>:
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <malloc+0xc>)
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f000 bbef 	b.w	8006400 <_malloc_r>
 8005c22:	bf00      	nop
 8005c24:	20000824 	.word	0x20000824

08005c28 <memcpy>:
 8005c28:	440a      	add	r2, r1
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c30:	d100      	bne.n	8005c34 <memcpy+0xc>
 8005c32:	4770      	bx	lr
 8005c34:	b510      	push	{r4, lr}
 8005c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	d1f9      	bne.n	8005c36 <memcpy+0xe>
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <_Balloc>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	b976      	cbnz	r6, 8005c6c <_Balloc+0x28>
 8005c4e:	2010      	movs	r0, #16
 8005c50:	f7ff ffe2 	bl	8005c18 <malloc>
 8005c54:	4602      	mov	r2, r0
 8005c56:	6260      	str	r0, [r4, #36]	; 0x24
 8005c58:	b920      	cbnz	r0, 8005c64 <_Balloc+0x20>
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <_Balloc+0x78>)
 8005c5c:	4818      	ldr	r0, [pc, #96]	; (8005cc0 <_Balloc+0x7c>)
 8005c5e:	2166      	movs	r1, #102	; 0x66
 8005c60:	f000 fea8 	bl	80069b4 <__assert_func>
 8005c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c68:	6006      	str	r6, [r0, #0]
 8005c6a:	60c6      	str	r6, [r0, #12]
 8005c6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c6e:	68f3      	ldr	r3, [r6, #12]
 8005c70:	b183      	cbz	r3, 8005c94 <_Balloc+0x50>
 8005c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c7a:	b9b8      	cbnz	r0, 8005cac <_Balloc+0x68>
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c82:	1d72      	adds	r2, r6, #5
 8005c84:	0092      	lsls	r2, r2, #2
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 fb5a 	bl	8006340 <_calloc_r>
 8005c8c:	b160      	cbz	r0, 8005ca8 <_Balloc+0x64>
 8005c8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c92:	e00e      	b.n	8005cb2 <_Balloc+0x6e>
 8005c94:	2221      	movs	r2, #33	; 0x21
 8005c96:	2104      	movs	r1, #4
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fb51 	bl	8006340 <_calloc_r>
 8005c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca0:	60f0      	str	r0, [r6, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e4      	bne.n	8005c72 <_Balloc+0x2e>
 8005ca8:	2000      	movs	r0, #0
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	6802      	ldr	r2, [r0, #0]
 8005cae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cb8:	e7f7      	b.n	8005caa <_Balloc+0x66>
 8005cba:	bf00      	nop
 8005cbc:	08006f05 	.word	0x08006f05
 8005cc0:	08006fec 	.word	0x08006fec

08005cc4 <_Bfree>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b976      	cbnz	r6, 8005cec <_Bfree+0x28>
 8005cce:	2010      	movs	r0, #16
 8005cd0:	f7ff ffa2 	bl	8005c18 <malloc>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6268      	str	r0, [r5, #36]	; 0x24
 8005cd8:	b920      	cbnz	r0, 8005ce4 <_Bfree+0x20>
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <_Bfree+0x3c>)
 8005cdc:	4809      	ldr	r0, [pc, #36]	; (8005d04 <_Bfree+0x40>)
 8005cde:	218a      	movs	r1, #138	; 0x8a
 8005ce0:	f000 fe68 	bl	80069b4 <__assert_func>
 8005ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce8:	6006      	str	r6, [r0, #0]
 8005cea:	60c6      	str	r6, [r0, #12]
 8005cec:	b13c      	cbz	r4, 8005cfe <_Bfree+0x3a>
 8005cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cf0:	6862      	ldr	r2, [r4, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cf8:	6021      	str	r1, [r4, #0]
 8005cfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	08006f05 	.word	0x08006f05
 8005d04:	08006fec 	.word	0x08006fec

08005d08 <__multadd>:
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	690e      	ldr	r6, [r1, #16]
 8005d0e:	4607      	mov	r7, r0
 8005d10:	4698      	mov	r8, r3
 8005d12:	460c      	mov	r4, r1
 8005d14:	f101 0014 	add.w	r0, r1, #20
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6805      	ldr	r5, [r0, #0]
 8005d1c:	b2a9      	uxth	r1, r5
 8005d1e:	fb02 8101 	mla	r1, r2, r1, r8
 8005d22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d26:	0c2d      	lsrs	r5, r5, #16
 8005d28:	fb02 c505 	mla	r5, r2, r5, ip
 8005d2c:	b289      	uxth	r1, r1
 8005d2e:	3301      	adds	r3, #1
 8005d30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d34:	429e      	cmp	r6, r3
 8005d36:	f840 1b04 	str.w	r1, [r0], #4
 8005d3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d3e:	dcec      	bgt.n	8005d1a <__multadd+0x12>
 8005d40:	f1b8 0f00 	cmp.w	r8, #0
 8005d44:	d022      	beq.n	8005d8c <__multadd+0x84>
 8005d46:	68a3      	ldr	r3, [r4, #8]
 8005d48:	42b3      	cmp	r3, r6
 8005d4a:	dc19      	bgt.n	8005d80 <__multadd+0x78>
 8005d4c:	6861      	ldr	r1, [r4, #4]
 8005d4e:	4638      	mov	r0, r7
 8005d50:	3101      	adds	r1, #1
 8005d52:	f7ff ff77 	bl	8005c44 <_Balloc>
 8005d56:	4605      	mov	r5, r0
 8005d58:	b928      	cbnz	r0, 8005d66 <__multadd+0x5e>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <__multadd+0x8c>)
 8005d5e:	480e      	ldr	r0, [pc, #56]	; (8005d98 <__multadd+0x90>)
 8005d60:	21b5      	movs	r1, #181	; 0xb5
 8005d62:	f000 fe27 	bl	80069b4 <__assert_func>
 8005d66:	6922      	ldr	r2, [r4, #16]
 8005d68:	3202      	adds	r2, #2
 8005d6a:	f104 010c 	add.w	r1, r4, #12
 8005d6e:	0092      	lsls	r2, r2, #2
 8005d70:	300c      	adds	r0, #12
 8005d72:	f7ff ff59 	bl	8005c28 <memcpy>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff ffa3 	bl	8005cc4 <_Bfree>
 8005d7e:	462c      	mov	r4, r5
 8005d80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d84:	3601      	adds	r6, #1
 8005d86:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d8a:	6126      	str	r6, [r4, #16]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d92:	bf00      	nop
 8005d94:	08006f7b 	.word	0x08006f7b
 8005d98:	08006fec 	.word	0x08006fec

08005d9c <__hi0bits>:
 8005d9c:	0c03      	lsrs	r3, r0, #16
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	b9d3      	cbnz	r3, 8005dd8 <__hi0bits+0x3c>
 8005da2:	0400      	lsls	r0, r0, #16
 8005da4:	2310      	movs	r3, #16
 8005da6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005daa:	bf04      	itt	eq
 8005dac:	0200      	lsleq	r0, r0, #8
 8005dae:	3308      	addeq	r3, #8
 8005db0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005db4:	bf04      	itt	eq
 8005db6:	0100      	lsleq	r0, r0, #4
 8005db8:	3304      	addeq	r3, #4
 8005dba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005dbe:	bf04      	itt	eq
 8005dc0:	0080      	lsleq	r0, r0, #2
 8005dc2:	3302      	addeq	r3, #2
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	db05      	blt.n	8005dd4 <__hi0bits+0x38>
 8005dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dcc:	f103 0301 	add.w	r3, r3, #1
 8005dd0:	bf08      	it	eq
 8005dd2:	2320      	moveq	r3, #32
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	4770      	bx	lr
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e7e4      	b.n	8005da6 <__hi0bits+0xa>

08005ddc <__lo0bits>:
 8005ddc:	6803      	ldr	r3, [r0, #0]
 8005dde:	f013 0207 	ands.w	r2, r3, #7
 8005de2:	4601      	mov	r1, r0
 8005de4:	d00b      	beq.n	8005dfe <__lo0bits+0x22>
 8005de6:	07da      	lsls	r2, r3, #31
 8005de8:	d424      	bmi.n	8005e34 <__lo0bits+0x58>
 8005dea:	0798      	lsls	r0, r3, #30
 8005dec:	bf49      	itett	mi
 8005dee:	085b      	lsrmi	r3, r3, #1
 8005df0:	089b      	lsrpl	r3, r3, #2
 8005df2:	2001      	movmi	r0, #1
 8005df4:	600b      	strmi	r3, [r1, #0]
 8005df6:	bf5c      	itt	pl
 8005df8:	600b      	strpl	r3, [r1, #0]
 8005dfa:	2002      	movpl	r0, #2
 8005dfc:	4770      	bx	lr
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	b9b0      	cbnz	r0, 8005e30 <__lo0bits+0x54>
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	2010      	movs	r0, #16
 8005e06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e0a:	bf04      	itt	eq
 8005e0c:	0a1b      	lsreq	r3, r3, #8
 8005e0e:	3008      	addeq	r0, #8
 8005e10:	071a      	lsls	r2, r3, #28
 8005e12:	bf04      	itt	eq
 8005e14:	091b      	lsreq	r3, r3, #4
 8005e16:	3004      	addeq	r0, #4
 8005e18:	079a      	lsls	r2, r3, #30
 8005e1a:	bf04      	itt	eq
 8005e1c:	089b      	lsreq	r3, r3, #2
 8005e1e:	3002      	addeq	r0, #2
 8005e20:	07da      	lsls	r2, r3, #31
 8005e22:	d403      	bmi.n	8005e2c <__lo0bits+0x50>
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	f100 0001 	add.w	r0, r0, #1
 8005e2a:	d005      	beq.n	8005e38 <__lo0bits+0x5c>
 8005e2c:	600b      	str	r3, [r1, #0]
 8005e2e:	4770      	bx	lr
 8005e30:	4610      	mov	r0, r2
 8005e32:	e7e8      	b.n	8005e06 <__lo0bits+0x2a>
 8005e34:	2000      	movs	r0, #0
 8005e36:	4770      	bx	lr
 8005e38:	2020      	movs	r0, #32
 8005e3a:	4770      	bx	lr

08005e3c <__i2b>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	2101      	movs	r1, #1
 8005e42:	f7ff feff 	bl	8005c44 <_Balloc>
 8005e46:	4602      	mov	r2, r0
 8005e48:	b928      	cbnz	r0, 8005e56 <__i2b+0x1a>
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <__i2b+0x24>)
 8005e4c:	4805      	ldr	r0, [pc, #20]	; (8005e64 <__i2b+0x28>)
 8005e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e52:	f000 fdaf 	bl	80069b4 <__assert_func>
 8005e56:	2301      	movs	r3, #1
 8005e58:	6144      	str	r4, [r0, #20]
 8005e5a:	6103      	str	r3, [r0, #16]
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	bf00      	nop
 8005e60:	08006f7b 	.word	0x08006f7b
 8005e64:	08006fec 	.word	0x08006fec

08005e68 <__multiply>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	690a      	ldr	r2, [r1, #16]
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bfb8      	it	lt
 8005e76:	460b      	movlt	r3, r1
 8005e78:	460d      	mov	r5, r1
 8005e7a:	bfbc      	itt	lt
 8005e7c:	4625      	movlt	r5, r4
 8005e7e:	461c      	movlt	r4, r3
 8005e80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e88:	68ab      	ldr	r3, [r5, #8]
 8005e8a:	6869      	ldr	r1, [r5, #4]
 8005e8c:	eb0a 0709 	add.w	r7, sl, r9
 8005e90:	42bb      	cmp	r3, r7
 8005e92:	b085      	sub	sp, #20
 8005e94:	bfb8      	it	lt
 8005e96:	3101      	addlt	r1, #1
 8005e98:	f7ff fed4 	bl	8005c44 <_Balloc>
 8005e9c:	b930      	cbnz	r0, 8005eac <__multiply+0x44>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4b42      	ldr	r3, [pc, #264]	; (8005fac <__multiply+0x144>)
 8005ea2:	4843      	ldr	r0, [pc, #268]	; (8005fb0 <__multiply+0x148>)
 8005ea4:	f240 115d 	movw	r1, #349	; 0x15d
 8005ea8:	f000 fd84 	bl	80069b4 <__assert_func>
 8005eac:	f100 0614 	add.w	r6, r0, #20
 8005eb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005eb4:	4633      	mov	r3, r6
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4543      	cmp	r3, r8
 8005eba:	d31e      	bcc.n	8005efa <__multiply+0x92>
 8005ebc:	f105 0c14 	add.w	ip, r5, #20
 8005ec0:	f104 0314 	add.w	r3, r4, #20
 8005ec4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ec8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ecc:	9202      	str	r2, [sp, #8]
 8005ece:	ebac 0205 	sub.w	r2, ip, r5
 8005ed2:	3a15      	subs	r2, #21
 8005ed4:	f022 0203 	bic.w	r2, r2, #3
 8005ed8:	3204      	adds	r2, #4
 8005eda:	f105 0115 	add.w	r1, r5, #21
 8005ede:	458c      	cmp	ip, r1
 8005ee0:	bf38      	it	cc
 8005ee2:	2204      	movcc	r2, #4
 8005ee4:	9201      	str	r2, [sp, #4]
 8005ee6:	9a02      	ldr	r2, [sp, #8]
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d808      	bhi.n	8005f00 <__multiply+0x98>
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	dc55      	bgt.n	8005f9e <__multiply+0x136>
 8005ef2:	6107      	str	r7, [r0, #16]
 8005ef4:	b005      	add	sp, #20
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	f843 2b04 	str.w	r2, [r3], #4
 8005efe:	e7db      	b.n	8005eb8 <__multiply+0x50>
 8005f00:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f04:	f1ba 0f00 	cmp.w	sl, #0
 8005f08:	d020      	beq.n	8005f4c <__multiply+0xe4>
 8005f0a:	f105 0e14 	add.w	lr, r5, #20
 8005f0e:	46b1      	mov	r9, r6
 8005f10:	2200      	movs	r2, #0
 8005f12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005f16:	f8d9 b000 	ldr.w	fp, [r9]
 8005f1a:	b2a1      	uxth	r1, r4
 8005f1c:	fa1f fb8b 	uxth.w	fp, fp
 8005f20:	fb0a b101 	mla	r1, sl, r1, fp
 8005f24:	4411      	add	r1, r2
 8005f26:	f8d9 2000 	ldr.w	r2, [r9]
 8005f2a:	0c24      	lsrs	r4, r4, #16
 8005f2c:	0c12      	lsrs	r2, r2, #16
 8005f2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f36:	b289      	uxth	r1, r1
 8005f38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f3c:	45f4      	cmp	ip, lr
 8005f3e:	f849 1b04 	str.w	r1, [r9], #4
 8005f42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f46:	d8e4      	bhi.n	8005f12 <__multiply+0xaa>
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	5072      	str	r2, [r6, r1]
 8005f4c:	9a03      	ldr	r2, [sp, #12]
 8005f4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f52:	3304      	adds	r3, #4
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	d01f      	beq.n	8005f9a <__multiply+0x132>
 8005f5a:	6834      	ldr	r4, [r6, #0]
 8005f5c:	f105 0114 	add.w	r1, r5, #20
 8005f60:	46b6      	mov	lr, r6
 8005f62:	f04f 0a00 	mov.w	sl, #0
 8005f66:	880a      	ldrh	r2, [r1, #0]
 8005f68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f6c:	fb09 b202 	mla	r2, r9, r2, fp
 8005f70:	4492      	add	sl, r2
 8005f72:	b2a4      	uxth	r4, r4
 8005f74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f78:	f84e 4b04 	str.w	r4, [lr], #4
 8005f7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f80:	f8be 2000 	ldrh.w	r2, [lr]
 8005f84:	0c24      	lsrs	r4, r4, #16
 8005f86:	fb09 2404 	mla	r4, r9, r4, r2
 8005f8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f8e:	458c      	cmp	ip, r1
 8005f90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f94:	d8e7      	bhi.n	8005f66 <__multiply+0xfe>
 8005f96:	9a01      	ldr	r2, [sp, #4]
 8005f98:	50b4      	str	r4, [r6, r2]
 8005f9a:	3604      	adds	r6, #4
 8005f9c:	e7a3      	b.n	8005ee6 <__multiply+0x7e>
 8005f9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1a5      	bne.n	8005ef2 <__multiply+0x8a>
 8005fa6:	3f01      	subs	r7, #1
 8005fa8:	e7a1      	b.n	8005eee <__multiply+0x86>
 8005faa:	bf00      	nop
 8005fac:	08006f7b 	.word	0x08006f7b
 8005fb0:	08006fec 	.word	0x08006fec

08005fb4 <__pow5mult>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	4615      	mov	r5, r2
 8005fba:	f012 0203 	ands.w	r2, r2, #3
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	d007      	beq.n	8005fd4 <__pow5mult+0x20>
 8005fc4:	4c25      	ldr	r4, [pc, #148]	; (800605c <__pow5mult+0xa8>)
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fce:	f7ff fe9b 	bl	8005d08 <__multadd>
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	10ad      	asrs	r5, r5, #2
 8005fd6:	d03d      	beq.n	8006054 <__pow5mult+0xa0>
 8005fd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fda:	b97c      	cbnz	r4, 8005ffc <__pow5mult+0x48>
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f7ff fe1b 	bl	8005c18 <malloc>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fe6:	b928      	cbnz	r0, 8005ff4 <__pow5mult+0x40>
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <__pow5mult+0xac>)
 8005fea:	481e      	ldr	r0, [pc, #120]	; (8006064 <__pow5mult+0xb0>)
 8005fec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ff0:	f000 fce0 	bl	80069b4 <__assert_func>
 8005ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ff8:	6004      	str	r4, [r0, #0]
 8005ffa:	60c4      	str	r4, [r0, #12]
 8005ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006004:	b94c      	cbnz	r4, 800601a <__pow5mult+0x66>
 8006006:	f240 2171 	movw	r1, #625	; 0x271
 800600a:	4630      	mov	r0, r6
 800600c:	f7ff ff16 	bl	8005e3c <__i2b>
 8006010:	2300      	movs	r3, #0
 8006012:	f8c8 0008 	str.w	r0, [r8, #8]
 8006016:	4604      	mov	r4, r0
 8006018:	6003      	str	r3, [r0, #0]
 800601a:	f04f 0900 	mov.w	r9, #0
 800601e:	07eb      	lsls	r3, r5, #31
 8006020:	d50a      	bpl.n	8006038 <__pow5mult+0x84>
 8006022:	4639      	mov	r1, r7
 8006024:	4622      	mov	r2, r4
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ff1e 	bl	8005e68 <__multiply>
 800602c:	4639      	mov	r1, r7
 800602e:	4680      	mov	r8, r0
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fe47 	bl	8005cc4 <_Bfree>
 8006036:	4647      	mov	r7, r8
 8006038:	106d      	asrs	r5, r5, #1
 800603a:	d00b      	beq.n	8006054 <__pow5mult+0xa0>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	b938      	cbnz	r0, 8006050 <__pow5mult+0x9c>
 8006040:	4622      	mov	r2, r4
 8006042:	4621      	mov	r1, r4
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ff0f 	bl	8005e68 <__multiply>
 800604a:	6020      	str	r0, [r4, #0]
 800604c:	f8c0 9000 	str.w	r9, [r0]
 8006050:	4604      	mov	r4, r0
 8006052:	e7e4      	b.n	800601e <__pow5mult+0x6a>
 8006054:	4638      	mov	r0, r7
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605a:	bf00      	nop
 800605c:	08007140 	.word	0x08007140
 8006060:	08006f05 	.word	0x08006f05
 8006064:	08006fec 	.word	0x08006fec

08006068 <__lshift>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	460c      	mov	r4, r1
 800606e:	6849      	ldr	r1, [r1, #4]
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	4607      	mov	r7, r0
 800607a:	4691      	mov	r9, r2
 800607c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006080:	f108 0601 	add.w	r6, r8, #1
 8006084:	42b3      	cmp	r3, r6
 8006086:	db0b      	blt.n	80060a0 <__lshift+0x38>
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fddb 	bl	8005c44 <_Balloc>
 800608e:	4605      	mov	r5, r0
 8006090:	b948      	cbnz	r0, 80060a6 <__lshift+0x3e>
 8006092:	4602      	mov	r2, r0
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <__lshift+0xd0>)
 8006096:	4829      	ldr	r0, [pc, #164]	; (800613c <__lshift+0xd4>)
 8006098:	f240 11d9 	movw	r1, #473	; 0x1d9
 800609c:	f000 fc8a 	bl	80069b4 <__assert_func>
 80060a0:	3101      	adds	r1, #1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	e7ee      	b.n	8006084 <__lshift+0x1c>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f100 0114 	add.w	r1, r0, #20
 80060ac:	f100 0210 	add.w	r2, r0, #16
 80060b0:	4618      	mov	r0, r3
 80060b2:	4553      	cmp	r3, sl
 80060b4:	db33      	blt.n	800611e <__lshift+0xb6>
 80060b6:	6920      	ldr	r0, [r4, #16]
 80060b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060bc:	f104 0314 	add.w	r3, r4, #20
 80060c0:	f019 091f 	ands.w	r9, r9, #31
 80060c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060cc:	d02b      	beq.n	8006126 <__lshift+0xbe>
 80060ce:	f1c9 0e20 	rsb	lr, r9, #32
 80060d2:	468a      	mov	sl, r1
 80060d4:	2200      	movs	r2, #0
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	fa00 f009 	lsl.w	r0, r0, r9
 80060dc:	4302      	orrs	r2, r0
 80060de:	f84a 2b04 	str.w	r2, [sl], #4
 80060e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e6:	459c      	cmp	ip, r3
 80060e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80060ec:	d8f3      	bhi.n	80060d6 <__lshift+0x6e>
 80060ee:	ebac 0304 	sub.w	r3, ip, r4
 80060f2:	3b15      	subs	r3, #21
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	3304      	adds	r3, #4
 80060fa:	f104 0015 	add.w	r0, r4, #21
 80060fe:	4584      	cmp	ip, r0
 8006100:	bf38      	it	cc
 8006102:	2304      	movcc	r3, #4
 8006104:	50ca      	str	r2, [r1, r3]
 8006106:	b10a      	cbz	r2, 800610c <__lshift+0xa4>
 8006108:	f108 0602 	add.w	r6, r8, #2
 800610c:	3e01      	subs	r6, #1
 800610e:	4638      	mov	r0, r7
 8006110:	612e      	str	r6, [r5, #16]
 8006112:	4621      	mov	r1, r4
 8006114:	f7ff fdd6 	bl	8005cc4 <_Bfree>
 8006118:	4628      	mov	r0, r5
 800611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006122:	3301      	adds	r3, #1
 8006124:	e7c5      	b.n	80060b2 <__lshift+0x4a>
 8006126:	3904      	subs	r1, #4
 8006128:	f853 2b04 	ldr.w	r2, [r3], #4
 800612c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006130:	459c      	cmp	ip, r3
 8006132:	d8f9      	bhi.n	8006128 <__lshift+0xc0>
 8006134:	e7ea      	b.n	800610c <__lshift+0xa4>
 8006136:	bf00      	nop
 8006138:	08006f7b 	.word	0x08006f7b
 800613c:	08006fec 	.word	0x08006fec

08006140 <__mcmp>:
 8006140:	b530      	push	{r4, r5, lr}
 8006142:	6902      	ldr	r2, [r0, #16]
 8006144:	690c      	ldr	r4, [r1, #16]
 8006146:	1b12      	subs	r2, r2, r4
 8006148:	d10e      	bne.n	8006168 <__mcmp+0x28>
 800614a:	f100 0314 	add.w	r3, r0, #20
 800614e:	3114      	adds	r1, #20
 8006150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006158:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800615c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006160:	42a5      	cmp	r5, r4
 8006162:	d003      	beq.n	800616c <__mcmp+0x2c>
 8006164:	d305      	bcc.n	8006172 <__mcmp+0x32>
 8006166:	2201      	movs	r2, #1
 8006168:	4610      	mov	r0, r2
 800616a:	bd30      	pop	{r4, r5, pc}
 800616c:	4283      	cmp	r3, r0
 800616e:	d3f3      	bcc.n	8006158 <__mcmp+0x18>
 8006170:	e7fa      	b.n	8006168 <__mcmp+0x28>
 8006172:	f04f 32ff 	mov.w	r2, #4294967295
 8006176:	e7f7      	b.n	8006168 <__mcmp+0x28>

08006178 <__mdiff>:
 8006178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	460c      	mov	r4, r1
 800617e:	4606      	mov	r6, r0
 8006180:	4611      	mov	r1, r2
 8006182:	4620      	mov	r0, r4
 8006184:	4617      	mov	r7, r2
 8006186:	f7ff ffdb 	bl	8006140 <__mcmp>
 800618a:	1e05      	subs	r5, r0, #0
 800618c:	d110      	bne.n	80061b0 <__mdiff+0x38>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff fd57 	bl	8005c44 <_Balloc>
 8006196:	b930      	cbnz	r0, 80061a6 <__mdiff+0x2e>
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <__mdiff+0x108>)
 800619a:	4602      	mov	r2, r0
 800619c:	f240 2132 	movw	r1, #562	; 0x232
 80061a0:	4838      	ldr	r0, [pc, #224]	; (8006284 <__mdiff+0x10c>)
 80061a2:	f000 fc07 	bl	80069b4 <__assert_func>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b0:	bfa4      	itt	ge
 80061b2:	463b      	movge	r3, r7
 80061b4:	4627      	movge	r7, r4
 80061b6:	4630      	mov	r0, r6
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	bfa6      	itte	ge
 80061bc:	461c      	movge	r4, r3
 80061be:	2500      	movge	r5, #0
 80061c0:	2501      	movlt	r5, #1
 80061c2:	f7ff fd3f 	bl	8005c44 <_Balloc>
 80061c6:	b920      	cbnz	r0, 80061d2 <__mdiff+0x5a>
 80061c8:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <__mdiff+0x108>)
 80061ca:	4602      	mov	r2, r0
 80061cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061d0:	e7e6      	b.n	80061a0 <__mdiff+0x28>
 80061d2:	693e      	ldr	r6, [r7, #16]
 80061d4:	60c5      	str	r5, [r0, #12]
 80061d6:	6925      	ldr	r5, [r4, #16]
 80061d8:	f107 0114 	add.w	r1, r7, #20
 80061dc:	f104 0914 	add.w	r9, r4, #20
 80061e0:	f100 0e14 	add.w	lr, r0, #20
 80061e4:	f107 0210 	add.w	r2, r7, #16
 80061e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061f0:	46f2      	mov	sl, lr
 80061f2:	2700      	movs	r7, #0
 80061f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061fc:	fa1f f883 	uxth.w	r8, r3
 8006200:	fa17 f78b 	uxtah	r7, r7, fp
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	eba7 0808 	sub.w	r8, r7, r8
 800620a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800620e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006212:	fa1f f888 	uxth.w	r8, r8
 8006216:	141f      	asrs	r7, r3, #16
 8006218:	454d      	cmp	r5, r9
 800621a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800621e:	f84a 3b04 	str.w	r3, [sl], #4
 8006222:	d8e7      	bhi.n	80061f4 <__mdiff+0x7c>
 8006224:	1b2b      	subs	r3, r5, r4
 8006226:	3b15      	subs	r3, #21
 8006228:	f023 0303 	bic.w	r3, r3, #3
 800622c:	3304      	adds	r3, #4
 800622e:	3415      	adds	r4, #21
 8006230:	42a5      	cmp	r5, r4
 8006232:	bf38      	it	cc
 8006234:	2304      	movcc	r3, #4
 8006236:	4419      	add	r1, r3
 8006238:	4473      	add	r3, lr
 800623a:	469e      	mov	lr, r3
 800623c:	460d      	mov	r5, r1
 800623e:	4565      	cmp	r5, ip
 8006240:	d30e      	bcc.n	8006260 <__mdiff+0xe8>
 8006242:	f10c 0203 	add.w	r2, ip, #3
 8006246:	1a52      	subs	r2, r2, r1
 8006248:	f022 0203 	bic.w	r2, r2, #3
 800624c:	3903      	subs	r1, #3
 800624e:	458c      	cmp	ip, r1
 8006250:	bf38      	it	cc
 8006252:	2200      	movcc	r2, #0
 8006254:	441a      	add	r2, r3
 8006256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800625a:	b17b      	cbz	r3, 800627c <__mdiff+0x104>
 800625c:	6106      	str	r6, [r0, #16]
 800625e:	e7a5      	b.n	80061ac <__mdiff+0x34>
 8006260:	f855 8b04 	ldr.w	r8, [r5], #4
 8006264:	fa17 f488 	uxtah	r4, r7, r8
 8006268:	1422      	asrs	r2, r4, #16
 800626a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800626e:	b2a4      	uxth	r4, r4
 8006270:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006274:	f84e 4b04 	str.w	r4, [lr], #4
 8006278:	1417      	asrs	r7, r2, #16
 800627a:	e7e0      	b.n	800623e <__mdiff+0xc6>
 800627c:	3e01      	subs	r6, #1
 800627e:	e7ea      	b.n	8006256 <__mdiff+0xde>
 8006280:	08006f7b 	.word	0x08006f7b
 8006284:	08006fec 	.word	0x08006fec

08006288 <__d2b>:
 8006288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800628c:	4689      	mov	r9, r1
 800628e:	2101      	movs	r1, #1
 8006290:	ec57 6b10 	vmov	r6, r7, d0
 8006294:	4690      	mov	r8, r2
 8006296:	f7ff fcd5 	bl	8005c44 <_Balloc>
 800629a:	4604      	mov	r4, r0
 800629c:	b930      	cbnz	r0, 80062ac <__d2b+0x24>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <__d2b+0xb0>)
 80062a2:	4826      	ldr	r0, [pc, #152]	; (800633c <__d2b+0xb4>)
 80062a4:	f240 310a 	movw	r1, #778	; 0x30a
 80062a8:	f000 fb84 	bl	80069b4 <__assert_func>
 80062ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80062b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062b4:	bb35      	cbnz	r5, 8006304 <__d2b+0x7c>
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	d028      	beq.n	800630e <__d2b+0x86>
 80062bc:	4668      	mov	r0, sp
 80062be:	9600      	str	r6, [sp, #0]
 80062c0:	f7ff fd8c 	bl	8005ddc <__lo0bits>
 80062c4:	9900      	ldr	r1, [sp, #0]
 80062c6:	b300      	cbz	r0, 800630a <__d2b+0x82>
 80062c8:	9a01      	ldr	r2, [sp, #4]
 80062ca:	f1c0 0320 	rsb	r3, r0, #32
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	430b      	orrs	r3, r1
 80062d4:	40c2      	lsrs	r2, r0
 80062d6:	6163      	str	r3, [r4, #20]
 80062d8:	9201      	str	r2, [sp, #4]
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	61a3      	str	r3, [r4, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf14      	ite	ne
 80062e2:	2202      	movne	r2, #2
 80062e4:	2201      	moveq	r2, #1
 80062e6:	6122      	str	r2, [r4, #16]
 80062e8:	b1d5      	cbz	r5, 8006320 <__d2b+0x98>
 80062ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062ee:	4405      	add	r5, r0
 80062f0:	f8c9 5000 	str.w	r5, [r9]
 80062f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062f8:	f8c8 0000 	str.w	r0, [r8]
 80062fc:	4620      	mov	r0, r4
 80062fe:	b003      	add	sp, #12
 8006300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006308:	e7d5      	b.n	80062b6 <__d2b+0x2e>
 800630a:	6161      	str	r1, [r4, #20]
 800630c:	e7e5      	b.n	80062da <__d2b+0x52>
 800630e:	a801      	add	r0, sp, #4
 8006310:	f7ff fd64 	bl	8005ddc <__lo0bits>
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	6163      	str	r3, [r4, #20]
 8006318:	2201      	movs	r2, #1
 800631a:	6122      	str	r2, [r4, #16]
 800631c:	3020      	adds	r0, #32
 800631e:	e7e3      	b.n	80062e8 <__d2b+0x60>
 8006320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006328:	f8c9 0000 	str.w	r0, [r9]
 800632c:	6918      	ldr	r0, [r3, #16]
 800632e:	f7ff fd35 	bl	8005d9c <__hi0bits>
 8006332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006336:	e7df      	b.n	80062f8 <__d2b+0x70>
 8006338:	08006f7b 	.word	0x08006f7b
 800633c:	08006fec 	.word	0x08006fec

08006340 <_calloc_r>:
 8006340:	b513      	push	{r0, r1, r4, lr}
 8006342:	434a      	muls	r2, r1
 8006344:	4611      	mov	r1, r2
 8006346:	9201      	str	r2, [sp, #4]
 8006348:	f000 f85a 	bl	8006400 <_malloc_r>
 800634c:	4604      	mov	r4, r0
 800634e:	b118      	cbz	r0, 8006358 <_calloc_r+0x18>
 8006350:	9a01      	ldr	r2, [sp, #4]
 8006352:	2100      	movs	r1, #0
 8006354:	f7fd fe74 	bl	8004040 <memset>
 8006358:	4620      	mov	r0, r4
 800635a:	b002      	add	sp, #8
 800635c:	bd10      	pop	{r4, pc}
	...

08006360 <_free_r>:
 8006360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006362:	2900      	cmp	r1, #0
 8006364:	d048      	beq.n	80063f8 <_free_r+0x98>
 8006366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f1a1 0404 	sub.w	r4, r1, #4
 8006372:	bfb8      	it	lt
 8006374:	18e4      	addlt	r4, r4, r3
 8006376:	f000 fba3 	bl	8006ac0 <__malloc_lock>
 800637a:	4a20      	ldr	r2, [pc, #128]	; (80063fc <_free_r+0x9c>)
 800637c:	9801      	ldr	r0, [sp, #4]
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	4615      	mov	r5, r2
 8006382:	b933      	cbnz	r3, 8006392 <_free_r+0x32>
 8006384:	6063      	str	r3, [r4, #4]
 8006386:	6014      	str	r4, [r2, #0]
 8006388:	b003      	add	sp, #12
 800638a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800638e:	f000 bb9d 	b.w	8006acc <__malloc_unlock>
 8006392:	42a3      	cmp	r3, r4
 8006394:	d90b      	bls.n	80063ae <_free_r+0x4e>
 8006396:	6821      	ldr	r1, [r4, #0]
 8006398:	1862      	adds	r2, r4, r1
 800639a:	4293      	cmp	r3, r2
 800639c:	bf04      	itt	eq
 800639e:	681a      	ldreq	r2, [r3, #0]
 80063a0:	685b      	ldreq	r3, [r3, #4]
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	bf04      	itt	eq
 80063a6:	1852      	addeq	r2, r2, r1
 80063a8:	6022      	streq	r2, [r4, #0]
 80063aa:	602c      	str	r4, [r5, #0]
 80063ac:	e7ec      	b.n	8006388 <_free_r+0x28>
 80063ae:	461a      	mov	r2, r3
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	b10b      	cbz	r3, 80063b8 <_free_r+0x58>
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	d9fa      	bls.n	80063ae <_free_r+0x4e>
 80063b8:	6811      	ldr	r1, [r2, #0]
 80063ba:	1855      	adds	r5, r2, r1
 80063bc:	42a5      	cmp	r5, r4
 80063be:	d10b      	bne.n	80063d8 <_free_r+0x78>
 80063c0:	6824      	ldr	r4, [r4, #0]
 80063c2:	4421      	add	r1, r4
 80063c4:	1854      	adds	r4, r2, r1
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	6011      	str	r1, [r2, #0]
 80063ca:	d1dd      	bne.n	8006388 <_free_r+0x28>
 80063cc:	681c      	ldr	r4, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	6053      	str	r3, [r2, #4]
 80063d2:	4421      	add	r1, r4
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	e7d7      	b.n	8006388 <_free_r+0x28>
 80063d8:	d902      	bls.n	80063e0 <_free_r+0x80>
 80063da:	230c      	movs	r3, #12
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	e7d3      	b.n	8006388 <_free_r+0x28>
 80063e0:	6825      	ldr	r5, [r4, #0]
 80063e2:	1961      	adds	r1, r4, r5
 80063e4:	428b      	cmp	r3, r1
 80063e6:	bf04      	itt	eq
 80063e8:	6819      	ldreq	r1, [r3, #0]
 80063ea:	685b      	ldreq	r3, [r3, #4]
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	bf04      	itt	eq
 80063f0:	1949      	addeq	r1, r1, r5
 80063f2:	6021      	streq	r1, [r4, #0]
 80063f4:	6054      	str	r4, [r2, #4]
 80063f6:	e7c7      	b.n	8006388 <_free_r+0x28>
 80063f8:	b003      	add	sp, #12
 80063fa:	bd30      	pop	{r4, r5, pc}
 80063fc:	20000a14 	.word	0x20000a14

08006400 <_malloc_r>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	1ccd      	adds	r5, r1, #3
 8006404:	f025 0503 	bic.w	r5, r5, #3
 8006408:	3508      	adds	r5, #8
 800640a:	2d0c      	cmp	r5, #12
 800640c:	bf38      	it	cc
 800640e:	250c      	movcc	r5, #12
 8006410:	2d00      	cmp	r5, #0
 8006412:	4606      	mov	r6, r0
 8006414:	db01      	blt.n	800641a <_malloc_r+0x1a>
 8006416:	42a9      	cmp	r1, r5
 8006418:	d903      	bls.n	8006422 <_malloc_r+0x22>
 800641a:	230c      	movs	r3, #12
 800641c:	6033      	str	r3, [r6, #0]
 800641e:	2000      	movs	r0, #0
 8006420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006422:	f000 fb4d 	bl	8006ac0 <__malloc_lock>
 8006426:	4921      	ldr	r1, [pc, #132]	; (80064ac <_malloc_r+0xac>)
 8006428:	680a      	ldr	r2, [r1, #0]
 800642a:	4614      	mov	r4, r2
 800642c:	b99c      	cbnz	r4, 8006456 <_malloc_r+0x56>
 800642e:	4f20      	ldr	r7, [pc, #128]	; (80064b0 <_malloc_r+0xb0>)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	b923      	cbnz	r3, 800643e <_malloc_r+0x3e>
 8006434:	4621      	mov	r1, r4
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f996 	bl	8006768 <_sbrk_r>
 800643c:	6038      	str	r0, [r7, #0]
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f000 f991 	bl	8006768 <_sbrk_r>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d123      	bne.n	8006492 <_malloc_r+0x92>
 800644a:	230c      	movs	r3, #12
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	4630      	mov	r0, r6
 8006450:	f000 fb3c 	bl	8006acc <__malloc_unlock>
 8006454:	e7e3      	b.n	800641e <_malloc_r+0x1e>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	1b5b      	subs	r3, r3, r5
 800645a:	d417      	bmi.n	800648c <_malloc_r+0x8c>
 800645c:	2b0b      	cmp	r3, #11
 800645e:	d903      	bls.n	8006468 <_malloc_r+0x68>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	441c      	add	r4, r3
 8006464:	6025      	str	r5, [r4, #0]
 8006466:	e004      	b.n	8006472 <_malloc_r+0x72>
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	42a2      	cmp	r2, r4
 800646c:	bf0c      	ite	eq
 800646e:	600b      	streq	r3, [r1, #0]
 8006470:	6053      	strne	r3, [r2, #4]
 8006472:	4630      	mov	r0, r6
 8006474:	f000 fb2a 	bl	8006acc <__malloc_unlock>
 8006478:	f104 000b 	add.w	r0, r4, #11
 800647c:	1d23      	adds	r3, r4, #4
 800647e:	f020 0007 	bic.w	r0, r0, #7
 8006482:	1ac2      	subs	r2, r0, r3
 8006484:	d0cc      	beq.n	8006420 <_malloc_r+0x20>
 8006486:	1a1b      	subs	r3, r3, r0
 8006488:	50a3      	str	r3, [r4, r2]
 800648a:	e7c9      	b.n	8006420 <_malloc_r+0x20>
 800648c:	4622      	mov	r2, r4
 800648e:	6864      	ldr	r4, [r4, #4]
 8006490:	e7cc      	b.n	800642c <_malloc_r+0x2c>
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d0e3      	beq.n	8006464 <_malloc_r+0x64>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4630      	mov	r0, r6
 80064a0:	f000 f962 	bl	8006768 <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d1dd      	bne.n	8006464 <_malloc_r+0x64>
 80064a8:	e7cf      	b.n	800644a <_malloc_r+0x4a>
 80064aa:	bf00      	nop
 80064ac:	20000a14 	.word	0x20000a14
 80064b0:	20000a18 	.word	0x20000a18

080064b4 <__sfputc_r>:
 80064b4:	6893      	ldr	r3, [r2, #8]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	b410      	push	{r4}
 80064bc:	6093      	str	r3, [r2, #8]
 80064be:	da08      	bge.n	80064d2 <__sfputc_r+0x1e>
 80064c0:	6994      	ldr	r4, [r2, #24]
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	db01      	blt.n	80064ca <__sfputc_r+0x16>
 80064c6:	290a      	cmp	r1, #10
 80064c8:	d103      	bne.n	80064d2 <__sfputc_r+0x1e>
 80064ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ce:	f000 b99f 	b.w	8006810 <__swbuf_r>
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	1c58      	adds	r0, r3, #1
 80064d6:	6010      	str	r0, [r2, #0]
 80064d8:	7019      	strb	r1, [r3, #0]
 80064da:	4608      	mov	r0, r1
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <__sfputs_r>:
 80064e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	18d5      	adds	r5, r2, r3
 80064ec:	42ac      	cmp	r4, r5
 80064ee:	d101      	bne.n	80064f4 <__sfputs_r+0x12>
 80064f0:	2000      	movs	r0, #0
 80064f2:	e007      	b.n	8006504 <__sfputs_r+0x22>
 80064f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f8:	463a      	mov	r2, r7
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff ffda 	bl	80064b4 <__sfputc_r>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d1f3      	bne.n	80064ec <__sfputs_r+0xa>
 8006504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006508 <_vfiprintf_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	460d      	mov	r5, r1
 800650e:	b09d      	sub	sp, #116	; 0x74
 8006510:	4614      	mov	r4, r2
 8006512:	4698      	mov	r8, r3
 8006514:	4606      	mov	r6, r0
 8006516:	b118      	cbz	r0, 8006520 <_vfiprintf_r+0x18>
 8006518:	6983      	ldr	r3, [r0, #24]
 800651a:	b90b      	cbnz	r3, 8006520 <_vfiprintf_r+0x18>
 800651c:	f7ff fa72 	bl	8005a04 <__sinit>
 8006520:	4b89      	ldr	r3, [pc, #548]	; (8006748 <_vfiprintf_r+0x240>)
 8006522:	429d      	cmp	r5, r3
 8006524:	d11b      	bne.n	800655e <_vfiprintf_r+0x56>
 8006526:	6875      	ldr	r5, [r6, #4]
 8006528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652a:	07d9      	lsls	r1, r3, #31
 800652c:	d405      	bmi.n	800653a <_vfiprintf_r+0x32>
 800652e:	89ab      	ldrh	r3, [r5, #12]
 8006530:	059a      	lsls	r2, r3, #22
 8006532:	d402      	bmi.n	800653a <_vfiprintf_r+0x32>
 8006534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006536:	f7ff fb08 	bl	8005b4a <__retarget_lock_acquire_recursive>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	d501      	bpl.n	8006544 <_vfiprintf_r+0x3c>
 8006540:	692b      	ldr	r3, [r5, #16]
 8006542:	b9eb      	cbnz	r3, 8006580 <_vfiprintf_r+0x78>
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f9c6 	bl	80068d8 <__swsetup_r>
 800654c:	b1c0      	cbz	r0, 8006580 <_vfiprintf_r+0x78>
 800654e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006550:	07dc      	lsls	r4, r3, #31
 8006552:	d50e      	bpl.n	8006572 <_vfiprintf_r+0x6a>
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	b01d      	add	sp, #116	; 0x74
 800655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655e:	4b7b      	ldr	r3, [pc, #492]	; (800674c <_vfiprintf_r+0x244>)
 8006560:	429d      	cmp	r5, r3
 8006562:	d101      	bne.n	8006568 <_vfiprintf_r+0x60>
 8006564:	68b5      	ldr	r5, [r6, #8]
 8006566:	e7df      	b.n	8006528 <_vfiprintf_r+0x20>
 8006568:	4b79      	ldr	r3, [pc, #484]	; (8006750 <_vfiprintf_r+0x248>)
 800656a:	429d      	cmp	r5, r3
 800656c:	bf08      	it	eq
 800656e:	68f5      	ldreq	r5, [r6, #12]
 8006570:	e7da      	b.n	8006528 <_vfiprintf_r+0x20>
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	0598      	lsls	r0, r3, #22
 8006576:	d4ed      	bmi.n	8006554 <_vfiprintf_r+0x4c>
 8006578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800657a:	f7ff fae7 	bl	8005b4c <__retarget_lock_release_recursive>
 800657e:	e7e9      	b.n	8006554 <_vfiprintf_r+0x4c>
 8006580:	2300      	movs	r3, #0
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	2320      	movs	r3, #32
 8006586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800658a:	f8cd 800c 	str.w	r8, [sp, #12]
 800658e:	2330      	movs	r3, #48	; 0x30
 8006590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006754 <_vfiprintf_r+0x24c>
 8006594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006598:	f04f 0901 	mov.w	r9, #1
 800659c:	4623      	mov	r3, r4
 800659e:	469a      	mov	sl, r3
 80065a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a4:	b10a      	cbz	r2, 80065aa <_vfiprintf_r+0xa2>
 80065a6:	2a25      	cmp	r2, #37	; 0x25
 80065a8:	d1f9      	bne.n	800659e <_vfiprintf_r+0x96>
 80065aa:	ebba 0b04 	subs.w	fp, sl, r4
 80065ae:	d00b      	beq.n	80065c8 <_vfiprintf_r+0xc0>
 80065b0:	465b      	mov	r3, fp
 80065b2:	4622      	mov	r2, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7ff ff93 	bl	80064e2 <__sfputs_r>
 80065bc:	3001      	adds	r0, #1
 80065be:	f000 80aa 	beq.w	8006716 <_vfiprintf_r+0x20e>
 80065c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c4:	445a      	add	r2, fp
 80065c6:	9209      	str	r2, [sp, #36]	; 0x24
 80065c8:	f89a 3000 	ldrb.w	r3, [sl]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80a2 	beq.w	8006716 <_vfiprintf_r+0x20e>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065dc:	f10a 0a01 	add.w	sl, sl, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ea:	4654      	mov	r4, sl
 80065ec:	2205      	movs	r2, #5
 80065ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f2:	4858      	ldr	r0, [pc, #352]	; (8006754 <_vfiprintf_r+0x24c>)
 80065f4:	f7f9 fdf4 	bl	80001e0 <memchr>
 80065f8:	9a04      	ldr	r2, [sp, #16]
 80065fa:	b9d8      	cbnz	r0, 8006634 <_vfiprintf_r+0x12c>
 80065fc:	06d1      	lsls	r1, r2, #27
 80065fe:	bf44      	itt	mi
 8006600:	2320      	movmi	r3, #32
 8006602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006606:	0713      	lsls	r3, r2, #28
 8006608:	bf44      	itt	mi
 800660a:	232b      	movmi	r3, #43	; 0x2b
 800660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006610:	f89a 3000 	ldrb.w	r3, [sl]
 8006614:	2b2a      	cmp	r3, #42	; 0x2a
 8006616:	d015      	beq.n	8006644 <_vfiprintf_r+0x13c>
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	4654      	mov	r4, sl
 800661c:	2000      	movs	r0, #0
 800661e:	f04f 0c0a 	mov.w	ip, #10
 8006622:	4621      	mov	r1, r4
 8006624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006628:	3b30      	subs	r3, #48	; 0x30
 800662a:	2b09      	cmp	r3, #9
 800662c:	d94e      	bls.n	80066cc <_vfiprintf_r+0x1c4>
 800662e:	b1b0      	cbz	r0, 800665e <_vfiprintf_r+0x156>
 8006630:	9207      	str	r2, [sp, #28]
 8006632:	e014      	b.n	800665e <_vfiprintf_r+0x156>
 8006634:	eba0 0308 	sub.w	r3, r0, r8
 8006638:	fa09 f303 	lsl.w	r3, r9, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	46a2      	mov	sl, r4
 8006642:	e7d2      	b.n	80065ea <_vfiprintf_r+0xe2>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	1d19      	adds	r1, r3, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfbb      	ittet	lt
 8006650:	425b      	neglt	r3, r3
 8006652:	f042 0202 	orrlt.w	r2, r2, #2
 8006656:	9307      	strge	r3, [sp, #28]
 8006658:	9307      	strlt	r3, [sp, #28]
 800665a:	bfb8      	it	lt
 800665c:	9204      	strlt	r2, [sp, #16]
 800665e:	7823      	ldrb	r3, [r4, #0]
 8006660:	2b2e      	cmp	r3, #46	; 0x2e
 8006662:	d10c      	bne.n	800667e <_vfiprintf_r+0x176>
 8006664:	7863      	ldrb	r3, [r4, #1]
 8006666:	2b2a      	cmp	r3, #42	; 0x2a
 8006668:	d135      	bne.n	80066d6 <_vfiprintf_r+0x1ce>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	9203      	str	r2, [sp, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	bfb8      	it	lt
 8006676:	f04f 33ff 	movlt.w	r3, #4294967295
 800667a:	3402      	adds	r4, #2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006764 <_vfiprintf_r+0x25c>
 8006682:	7821      	ldrb	r1, [r4, #0]
 8006684:	2203      	movs	r2, #3
 8006686:	4650      	mov	r0, sl
 8006688:	f7f9 fdaa 	bl	80001e0 <memchr>
 800668c:	b140      	cbz	r0, 80066a0 <_vfiprintf_r+0x198>
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	eba0 000a 	sub.w	r0, r0, sl
 8006694:	fa03 f000 	lsl.w	r0, r3, r0
 8006698:	9b04      	ldr	r3, [sp, #16]
 800669a:	4303      	orrs	r3, r0
 800669c:	3401      	adds	r4, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a4:	482c      	ldr	r0, [pc, #176]	; (8006758 <_vfiprintf_r+0x250>)
 80066a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066aa:	2206      	movs	r2, #6
 80066ac:	f7f9 fd98 	bl	80001e0 <memchr>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d03f      	beq.n	8006734 <_vfiprintf_r+0x22c>
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <_vfiprintf_r+0x254>)
 80066b6:	bb1b      	cbnz	r3, 8006700 <_vfiprintf_r+0x1f8>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	443b      	add	r3, r7
 80066c8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ca:	e767      	b.n	800659c <_vfiprintf_r+0x94>
 80066cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d0:	460c      	mov	r4, r1
 80066d2:	2001      	movs	r0, #1
 80066d4:	e7a5      	b.n	8006622 <_vfiprintf_r+0x11a>
 80066d6:	2300      	movs	r3, #0
 80066d8:	3401      	adds	r4, #1
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 0c0a 	mov.w	ip, #10
 80066e2:	4620      	mov	r0, r4
 80066e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e8:	3a30      	subs	r2, #48	; 0x30
 80066ea:	2a09      	cmp	r2, #9
 80066ec:	d903      	bls.n	80066f6 <_vfiprintf_r+0x1ee>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c5      	beq.n	800667e <_vfiprintf_r+0x176>
 80066f2:	9105      	str	r1, [sp, #20]
 80066f4:	e7c3      	b.n	800667e <_vfiprintf_r+0x176>
 80066f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066fa:	4604      	mov	r4, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7f0      	b.n	80066e2 <_vfiprintf_r+0x1da>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	462a      	mov	r2, r5
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <_vfiprintf_r+0x258>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4630      	mov	r0, r6
 800670c:	f7fd fd40 	bl	8004190 <_printf_float>
 8006710:	4607      	mov	r7, r0
 8006712:	1c78      	adds	r0, r7, #1
 8006714:	d1d6      	bne.n	80066c4 <_vfiprintf_r+0x1bc>
 8006716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006718:	07d9      	lsls	r1, r3, #31
 800671a:	d405      	bmi.n	8006728 <_vfiprintf_r+0x220>
 800671c:	89ab      	ldrh	r3, [r5, #12]
 800671e:	059a      	lsls	r2, r3, #22
 8006720:	d402      	bmi.n	8006728 <_vfiprintf_r+0x220>
 8006722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006724:	f7ff fa12 	bl	8005b4c <__retarget_lock_release_recursive>
 8006728:	89ab      	ldrh	r3, [r5, #12]
 800672a:	065b      	lsls	r3, r3, #25
 800672c:	f53f af12 	bmi.w	8006554 <_vfiprintf_r+0x4c>
 8006730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006732:	e711      	b.n	8006558 <_vfiprintf_r+0x50>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <_vfiprintf_r+0x258>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4630      	mov	r0, r6
 8006740:	f7fd ffca 	bl	80046d8 <_printf_i>
 8006744:	e7e4      	b.n	8006710 <_vfiprintf_r+0x208>
 8006746:	bf00      	nop
 8006748:	08006fac 	.word	0x08006fac
 800674c:	08006fcc 	.word	0x08006fcc
 8006750:	08006f8c 	.word	0x08006f8c
 8006754:	0800714c 	.word	0x0800714c
 8006758:	08007156 	.word	0x08007156
 800675c:	08004191 	.word	0x08004191
 8006760:	080064e3 	.word	0x080064e3
 8006764:	08007152 	.word	0x08007152

08006768 <_sbrk_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_sbrk_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fb faa6 	bl	8001cc4 <_sbrk>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_sbrk_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_sbrk_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000bcc 	.word	0x20000bcc

08006788 <__sread>:
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	f000 f9a2 	bl	8006ad8 <_read_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	bfab      	itete	ge
 8006798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800679a:	89a3      	ldrhlt	r3, [r4, #12]
 800679c:	181b      	addge	r3, r3, r0
 800679e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067a2:	bfac      	ite	ge
 80067a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067a6:	81a3      	strhlt	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__swrite>:
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	461f      	mov	r7, r3
 80067b0:	898b      	ldrh	r3, [r1, #12]
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	4605      	mov	r5, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d505      	bpl.n	80067c8 <__swrite+0x1e>
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2302      	movs	r3, #2
 80067c2:	2200      	movs	r2, #0
 80067c4:	f000 f958 	bl	8006a78 <_lseek_r>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	4628      	mov	r0, r5
 80067da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	f000 b869 	b.w	80068b4 <_write_r>

080067e2 <__sseek>:
 80067e2:	b510      	push	{r4, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 f945 	bl	8006a78 <_lseek_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	bf15      	itete	ne
 80067f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067fe:	81a3      	strheq	r3, [r4, #12]
 8006800:	bf18      	it	ne
 8006802:	81a3      	strhne	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__sclose>:
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 b8f1 	b.w	80069f0 <_close_r>
	...

08006810 <__swbuf_r>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	460e      	mov	r6, r1
 8006814:	4614      	mov	r4, r2
 8006816:	4605      	mov	r5, r0
 8006818:	b118      	cbz	r0, 8006822 <__swbuf_r+0x12>
 800681a:	6983      	ldr	r3, [r0, #24]
 800681c:	b90b      	cbnz	r3, 8006822 <__swbuf_r+0x12>
 800681e:	f7ff f8f1 	bl	8005a04 <__sinit>
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <__swbuf_r+0x98>)
 8006824:	429c      	cmp	r4, r3
 8006826:	d12b      	bne.n	8006880 <__swbuf_r+0x70>
 8006828:	686c      	ldr	r4, [r5, #4]
 800682a:	69a3      	ldr	r3, [r4, #24]
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	071a      	lsls	r2, r3, #28
 8006832:	d52f      	bpl.n	8006894 <__swbuf_r+0x84>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	b36b      	cbz	r3, 8006894 <__swbuf_r+0x84>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	1ac0      	subs	r0, r0, r3
 800683e:	6963      	ldr	r3, [r4, #20]
 8006840:	b2f6      	uxtb	r6, r6
 8006842:	4283      	cmp	r3, r0
 8006844:	4637      	mov	r7, r6
 8006846:	dc04      	bgt.n	8006852 <__swbuf_r+0x42>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff f846 	bl	80058dc <_fflush_r>
 8006850:	bb30      	cbnz	r0, 80068a0 <__swbuf_r+0x90>
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	701e      	strb	r6, [r3, #0]
 8006860:	6963      	ldr	r3, [r4, #20]
 8006862:	3001      	adds	r0, #1
 8006864:	4283      	cmp	r3, r0
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x62>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d506      	bpl.n	800687c <__swbuf_r+0x6c>
 800686e:	2e0a      	cmp	r6, #10
 8006870:	d104      	bne.n	800687c <__swbuf_r+0x6c>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff f831 	bl	80058dc <_fflush_r>
 800687a:	b988      	cbnz	r0, 80068a0 <__swbuf_r+0x90>
 800687c:	4638      	mov	r0, r7
 800687e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <__swbuf_r+0x9c>)
 8006882:	429c      	cmp	r4, r3
 8006884:	d101      	bne.n	800688a <__swbuf_r+0x7a>
 8006886:	68ac      	ldr	r4, [r5, #8]
 8006888:	e7cf      	b.n	800682a <__swbuf_r+0x1a>
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <__swbuf_r+0xa0>)
 800688c:	429c      	cmp	r4, r3
 800688e:	bf08      	it	eq
 8006890:	68ec      	ldreq	r4, [r5, #12]
 8006892:	e7ca      	b.n	800682a <__swbuf_r+0x1a>
 8006894:	4621      	mov	r1, r4
 8006896:	4628      	mov	r0, r5
 8006898:	f000 f81e 	bl	80068d8 <__swsetup_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	d0cb      	beq.n	8006838 <__swbuf_r+0x28>
 80068a0:	f04f 37ff 	mov.w	r7, #4294967295
 80068a4:	e7ea      	b.n	800687c <__swbuf_r+0x6c>
 80068a6:	bf00      	nop
 80068a8:	08006fac 	.word	0x08006fac
 80068ac:	08006fcc 	.word	0x08006fcc
 80068b0:	08006f8c 	.word	0x08006f8c

080068b4 <_write_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_write_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fb f860 	bl	8001988 <_write>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_write_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_write_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000bcc 	.word	0x20000bcc

080068d8 <__swsetup_r>:
 80068d8:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <__swsetup_r+0xcc>)
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	681d      	ldr	r5, [r3, #0]
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	b125      	cbz	r5, 80068ee <__swsetup_r+0x16>
 80068e4:	69ab      	ldr	r3, [r5, #24]
 80068e6:	b913      	cbnz	r3, 80068ee <__swsetup_r+0x16>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7ff f88b 	bl	8005a04 <__sinit>
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <__swsetup_r+0xd0>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d10f      	bne.n	8006914 <__swsetup_r+0x3c>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068fc:	0719      	lsls	r1, r3, #28
 80068fe:	d42c      	bmi.n	800695a <__swsetup_r+0x82>
 8006900:	06dd      	lsls	r5, r3, #27
 8006902:	d411      	bmi.n	8006928 <__swsetup_r+0x50>
 8006904:	2309      	movs	r3, #9
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	e03e      	b.n	8006992 <__swsetup_r+0xba>
 8006914:	4b25      	ldr	r3, [pc, #148]	; (80069ac <__swsetup_r+0xd4>)
 8006916:	429c      	cmp	r4, r3
 8006918:	d101      	bne.n	800691e <__swsetup_r+0x46>
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	e7eb      	b.n	80068f6 <__swsetup_r+0x1e>
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <__swsetup_r+0xd8>)
 8006920:	429c      	cmp	r4, r3
 8006922:	bf08      	it	eq
 8006924:	68ec      	ldreq	r4, [r5, #12]
 8006926:	e7e6      	b.n	80068f6 <__swsetup_r+0x1e>
 8006928:	0758      	lsls	r0, r3, #29
 800692a:	d512      	bpl.n	8006952 <__swsetup_r+0x7a>
 800692c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692e:	b141      	cbz	r1, 8006942 <__swsetup_r+0x6a>
 8006930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <__swsetup_r+0x66>
 8006938:	4630      	mov	r0, r6
 800693a:	f7ff fd11 	bl	8006360 <_free_r>
 800693e:	2300      	movs	r3, #0
 8006940:	6363      	str	r3, [r4, #52]	; 0x34
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	2300      	movs	r3, #0
 800694c:	6063      	str	r3, [r4, #4]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	b94b      	cbnz	r3, 8006972 <__swsetup_r+0x9a>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d003      	beq.n	8006972 <__swsetup_r+0x9a>
 800696a:	4621      	mov	r1, r4
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff f913 	bl	8005b98 <__smakebuf_r>
 8006972:	89a0      	ldrh	r0, [r4, #12]
 8006974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006978:	f010 0301 	ands.w	r3, r0, #1
 800697c:	d00a      	beq.n	8006994 <__swsetup_r+0xbc>
 800697e:	2300      	movs	r3, #0
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	425b      	negs	r3, r3
 8006986:	61a3      	str	r3, [r4, #24]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	b943      	cbnz	r3, 800699e <__swsetup_r+0xc6>
 800698c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006990:	d1ba      	bne.n	8006908 <__swsetup_r+0x30>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	0781      	lsls	r1, r0, #30
 8006996:	bf58      	it	pl
 8006998:	6963      	ldrpl	r3, [r4, #20]
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	e7f4      	b.n	8006988 <__swsetup_r+0xb0>
 800699e:	2000      	movs	r0, #0
 80069a0:	e7f7      	b.n	8006992 <__swsetup_r+0xba>
 80069a2:	bf00      	nop
 80069a4:	20000824 	.word	0x20000824
 80069a8:	08006fac 	.word	0x08006fac
 80069ac:	08006fcc 	.word	0x08006fcc
 80069b0:	08006f8c 	.word	0x08006f8c

080069b4 <__assert_func>:
 80069b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069b6:	4614      	mov	r4, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <__assert_func+0x2c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4605      	mov	r5, r0
 80069c0:	68d8      	ldr	r0, [r3, #12]
 80069c2:	b14c      	cbz	r4, 80069d8 <__assert_func+0x24>
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <__assert_func+0x30>)
 80069c6:	9100      	str	r1, [sp, #0]
 80069c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069cc:	4906      	ldr	r1, [pc, #24]	; (80069e8 <__assert_func+0x34>)
 80069ce:	462b      	mov	r3, r5
 80069d0:	f000 f81e 	bl	8006a10 <fiprintf>
 80069d4:	f000 f89f 	bl	8006b16 <abort>
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <__assert_func+0x38>)
 80069da:	461c      	mov	r4, r3
 80069dc:	e7f3      	b.n	80069c6 <__assert_func+0x12>
 80069de:	bf00      	nop
 80069e0:	20000824 	.word	0x20000824
 80069e4:	0800715d 	.word	0x0800715d
 80069e8:	0800716a 	.word	0x0800716a
 80069ec:	08007198 	.word	0x08007198

080069f0 <_close_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4d06      	ldr	r5, [pc, #24]	; (8006a0c <_close_r+0x1c>)
 80069f4:	2300      	movs	r3, #0
 80069f6:	4604      	mov	r4, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	f7fa fff0 	bl	80019e0 <_close>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_close_r+0x1a>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_close_r+0x1a>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20000bcc 	.word	0x20000bcc

08006a10 <fiprintf>:
 8006a10:	b40e      	push	{r1, r2, r3}
 8006a12:	b503      	push	{r0, r1, lr}
 8006a14:	4601      	mov	r1, r0
 8006a16:	ab03      	add	r3, sp, #12
 8006a18:	4805      	ldr	r0, [pc, #20]	; (8006a30 <fiprintf+0x20>)
 8006a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	f7ff fd71 	bl	8006508 <_vfiprintf_r>
 8006a26:	b002      	add	sp, #8
 8006a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a2c:	b003      	add	sp, #12
 8006a2e:	4770      	bx	lr
 8006a30:	20000824 	.word	0x20000824

08006a34 <_fstat_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	; (8006a54 <_fstat_r+0x20>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	f7fb f81d 	bl	8001a80 <_fstat>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d102      	bne.n	8006a50 <_fstat_r+0x1c>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b103      	cbz	r3, 8006a50 <_fstat_r+0x1c>
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	20000bcc 	.word	0x20000bcc

08006a58 <_isatty_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	; (8006a74 <_isatty_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fa ff7a 	bl	800195c <_isatty>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_isatty_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_isatty_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000bcc 	.word	0x20000bcc

08006a78 <_lseek_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <_lseek_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa ffc1 	bl	8001a0e <_lseek>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_lseek_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_lseek_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20000bcc 	.word	0x20000bcc

08006a9c <__ascii_mbtowc>:
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b901      	cbnz	r1, 8006aa2 <__ascii_mbtowc+0x6>
 8006aa0:	a901      	add	r1, sp, #4
 8006aa2:	b142      	cbz	r2, 8006ab6 <__ascii_mbtowc+0x1a>
 8006aa4:	b14b      	cbz	r3, 8006aba <__ascii_mbtowc+0x1e>
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	1e10      	subs	r0, r2, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2001      	movne	r0, #1
 8006ab2:	b002      	add	sp, #8
 8006ab4:	4770      	bx	lr
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	e7fb      	b.n	8006ab2 <__ascii_mbtowc+0x16>
 8006aba:	f06f 0001 	mvn.w	r0, #1
 8006abe:	e7f8      	b.n	8006ab2 <__ascii_mbtowc+0x16>

08006ac0 <__malloc_lock>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	; (8006ac8 <__malloc_lock+0x8>)
 8006ac2:	f7ff b842 	b.w	8005b4a <__retarget_lock_acquire_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	20000bc4 	.word	0x20000bc4

08006acc <__malloc_unlock>:
 8006acc:	4801      	ldr	r0, [pc, #4]	; (8006ad4 <__malloc_unlock+0x8>)
 8006ace:	f7ff b83d 	b.w	8005b4c <__retarget_lock_release_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20000bc4 	.word	0x20000bc4

08006ad8 <_read_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d07      	ldr	r5, [pc, #28]	; (8006af8 <_read_r+0x20>)
 8006adc:	4604      	mov	r4, r0
 8006ade:	4608      	mov	r0, r1
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fa ffa2 	bl	8001a30 <_read>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_read_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_read_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000bcc 	.word	0x20000bcc

08006afc <__ascii_wctomb>:
 8006afc:	b149      	cbz	r1, 8006b12 <__ascii_wctomb+0x16>
 8006afe:	2aff      	cmp	r2, #255	; 0xff
 8006b00:	bf85      	ittet	hi
 8006b02:	238a      	movhi	r3, #138	; 0x8a
 8006b04:	6003      	strhi	r3, [r0, #0]
 8006b06:	700a      	strbls	r2, [r1, #0]
 8006b08:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b0c:	bf98      	it	ls
 8006b0e:	2001      	movls	r0, #1
 8006b10:	4770      	bx	lr
 8006b12:	4608      	mov	r0, r1
 8006b14:	4770      	bx	lr

08006b16 <abort>:
 8006b16:	b508      	push	{r3, lr}
 8006b18:	2006      	movs	r0, #6
 8006b1a:	f000 f82b 	bl	8006b74 <raise>
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f000 f880 	bl	8006c24 <_exit>

08006b24 <_raise_r>:
 8006b24:	291f      	cmp	r1, #31
 8006b26:	b538      	push	{r3, r4, r5, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	d904      	bls.n	8006b38 <_raise_r+0x14>
 8006b2e:	2316      	movs	r3, #22
 8006b30:	6003      	str	r3, [r0, #0]
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b3a:	b112      	cbz	r2, 8006b42 <_raise_r+0x1e>
 8006b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b40:	b94b      	cbnz	r3, 8006b56 <_raise_r+0x32>
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f830 	bl	8006ba8 <_getpid_r>
 8006b48:	462a      	mov	r2, r5
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b52:	f000 b817 	b.w	8006b84 <_kill_r>
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d00a      	beq.n	8006b70 <_raise_r+0x4c>
 8006b5a:	1c59      	adds	r1, r3, #1
 8006b5c:	d103      	bne.n	8006b66 <_raise_r+0x42>
 8006b5e:	2316      	movs	r3, #22
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	2001      	movs	r0, #1
 8006b64:	e7e7      	b.n	8006b36 <_raise_r+0x12>
 8006b66:	2400      	movs	r4, #0
 8006b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	4798      	blx	r3
 8006b70:	2000      	movs	r0, #0
 8006b72:	e7e0      	b.n	8006b36 <_raise_r+0x12>

08006b74 <raise>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <raise+0xc>)
 8006b76:	4601      	mov	r1, r0
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f7ff bfd3 	b.w	8006b24 <_raise_r>
 8006b7e:	bf00      	nop
 8006b80:	20000824 	.word	0x20000824

08006b84 <_kill_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d07      	ldr	r5, [pc, #28]	; (8006ba4 <_kill_r+0x20>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	f000 f83f 	bl	8006c14 <_kill>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d102      	bne.n	8006ba0 <_kill_r+0x1c>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	b103      	cbz	r3, 8006ba0 <_kill_r+0x1c>
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	bd38      	pop	{r3, r4, r5, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000bcc 	.word	0x20000bcc

08006ba8 <_getpid_r>:
 8006ba8:	f000 b82c 	b.w	8006c04 <_getpid>

08006bac <lroundf>:
 8006bac:	ee10 3a10 	vmov	r3, s0
 8006bb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 8006bba:	bfb4      	ite	lt
 8006bbc:	f04f 30ff 	movlt.w	r0, #4294967295
 8006bc0:	2001      	movge	r0, #1
 8006bc2:	291e      	cmp	r1, #30
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	dc18      	bgt.n	8006bfa <lroundf+0x4e>
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	da03      	bge.n	8006bd4 <lroundf+0x28>
 8006bcc:	3101      	adds	r1, #1
 8006bce:	bf18      	it	ne
 8006bd0:	2000      	movne	r0, #0
 8006bd2:	bd10      	pop	{r4, pc}
 8006bd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006bd8:	2916      	cmp	r1, #22
 8006bda:	f443 0400 	orr.w	r4, r3, #8388608	; 0x800000
 8006bde:	bfdd      	ittte	le
 8006be0:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8006be4:	410b      	asrle	r3, r1
 8006be6:	191b      	addle	r3, r3, r4
 8006be8:	3a96      	subgt	r2, #150	; 0x96
 8006bea:	bfd6      	itet	le
 8006bec:	f1c1 0117 	rsble	r1, r1, #23
 8006bf0:	fa04 f302 	lslgt.w	r3, r4, r2
 8006bf4:	40cb      	lsrle	r3, r1
 8006bf6:	4358      	muls	r0, r3
 8006bf8:	e7eb      	b.n	8006bd2 <lroundf+0x26>
 8006bfa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006bfe:	ee17 0a90 	vmov	r0, s15
 8006c02:	e7e6      	b.n	8006bd2 <lroundf+0x26>

08006c04 <_getpid>:
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <_getpid+0xc>)
 8006c06:	2258      	movs	r2, #88	; 0x58
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	4770      	bx	lr
 8006c10:	20000bcc 	.word	0x20000bcc

08006c14 <_kill>:
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <_kill+0xc>)
 8006c16:	2258      	movs	r2, #88	; 0x58
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1e:	4770      	bx	lr
 8006c20:	20000bcc 	.word	0x20000bcc

08006c24 <_exit>:
 8006c24:	e7fe      	b.n	8006c24 <_exit>
	...

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
